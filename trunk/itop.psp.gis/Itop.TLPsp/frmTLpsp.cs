using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Text;
using System.Collections;
using System.Xml;
using System.Windows.Forms;
using DevComponents.DotNetBar;
using System.Configuration;
using Itop.Client;
using Itop.Client.Common;
using Itop.Domain.Graphics;
using ItopVector.DrawArea;
using ItopVector.Core;
using ItopVector.Core.Func;
using ItopVector.Core.Document;
using ItopVector.Core.Figure;
using ItopVector.Core.Interface.Figure;
using Itop.Domain.Stutistic;
using Itop.Client.Base;
using System.IO;
using System.Threading;
using ItopVector.Tools;
using ItopVector.Core.Interface;
using System.Xml.XPath;
using ItopVector.Core.Types;
using System.Diagnostics;
using Itop.MapView;
using System.Runtime.InteropServices;
using NR_PowerFlow;
using PQ_POWERFLOWLib;
using Gauss_Seidel;
using ZYZ_POWER;
using shortcir_dll;
using TLPSP_IdleOptimize;
using NiuLa_IdleOptimize;
using Excel = Microsoft.Office.Interop.Excel;
using Office = Microsoft.Office.Core;
namespace Itop.TLPsp
{
    public delegate void OnCloseDocumenthandler(object sender, string svgUid, string pid);
    public enum CustomOperation
    {
        OP_Default = 0,
        OP_MeasureGT,
        OP_MeasureDistance,
        OP_AreaEdit,
        OP_AreaCount
    }
    enum MouseEventFlag : uint
    {
        Move = 0x0001,
        LeftDown = 0x0002,
        LeftUp = 0x0004,
        RightDown = 0x0008,
        RightUp = 0x0010,
        MiddleDown = 0x0020,
        MiddleUp = 0x0040,
        XDown = 0x0080,
        XUp = 0x0100,
        Wheel = 0x0800,
        VirtualDesk = 0x4000,
        Absolute = 0x8000
    }
    public partial class frmTLpsp : FormBase
    {
        #region 对象声明
        SVGFILE svg = new SVGFILE();
        SvgDocument sdoc = new SvgDocument();
        glebeProperty gPro = new glebeProperty();
        bool JXTFlat = false;
        DevComponents.DotNetBar.ToolTip tip;
        

        private ItopVector.Selector.SymbolSelector symbolSelector;
        private System.Windows.Forms.PropertyGrid propertyGrid;
        private DevComponents.DotNetBar.ComboBoxItem scaleBox;
        public Itop.MapView.IMapViewObj mapview;

        //private ButtonItem operationButton;
        private ButtonItem orderButton;
        private ButtonItem alignButton;
        private ButtonItem rotateButton;
        private bool fileType = true;
        private bool Relaflag = false;      //是可靠性分析的开始
        private bool fk = true;
        private int bangbang = 0;
        
       // private duluqiflag=false;

        double TLPSPVmin = 0.95, TLPSPVmax = 1.05;
        private string SVGUID = "";
        private string SelUseArea = "";
        private string LineLen = "";
        private string rzb = "1";
        private string selLar = "";
        private int LayerCount = 0;
		private string str_power = "";
        public int il = 0;
        private bool LoadImage = true;
        public bool SubPrint = false;

        frmInfo fInfo = new frmInfo();

        XmlNode img = null;


        public event OnCloseDocumenthandler OnCloseSvgDocument;
        
        #endregion
        [DllImport("user32.dll")]
        static extern bool SetCursorPos(int X, int Y);
        [DllImport("user32.dll")]
        static extern void mouse_event(MouseEventFlag flags, int dx, int dy, uint data, UIntPtr extraInfo);

        public frmTLpsp()
        {
            
            
            //Itop.Client.MIS.GetProgRight("4a535c01-3b40-4323-9a6e-f2cae00358cf", "admin");
            object ert;

            //ert=System.Configuration.ConfigurationSettings.GetConfig("lastLoginUserNumber");
            this.propertyGrid = new PropertyGrid();
            tip = new DevComponents.DotNetBar.ToolTip();
            ItopVector.SpecialCursors.LoadCursors();            
            InitializeComponent();         
            tlVectorControl1.CanEdit = true;
            //tlVectorControl1.DrawArea.FreeSelect = true;
            
            this.dotNetBarManager1.Images = ItopVector.Resource.ResourceHelper.LoadBitmapStrip(base.GetType(), "Itop.TLPsp.ToolbarImages1.bmp", new Size(16, 16), new System.Drawing.Point(0, 0));


            Pen pen1 = new Pen(Brushes.Cyan, 3);
            tlVectorControl1.TempPen = pen1;
            //tlVectorControl1.PropertyGrid = propertyGrid;
            tlVectorControl1.BackColor = Color.White;
            tlVectorControl1.OperationChanged += new EventHandler(tlVectorControl1_OperationChanged);
            tlVectorControl1.FullDrawMode = true;
            tlVectorControl1.DrawArea.ViewMargin = new Size(5000, 5000);
            tlVectorControl1.DrawMode = DrawModeType.MemoryImage;
            tlVectorControl1.DrawArea.OnAddElement += new AddSvgElementEventHandler(tlVectorControl1_AddElement);
            tlVectorControl1.DrawArea.ViewChanged += new ItopVector.DrawArea.ViewChangedEventHandler(DrawArea_ViewChanged);
            tlVectorControl1.ScaleChanged += new EventHandler(tlVectorControl1_ScaleChanged);
            tlVectorControl1.CurrentOperation = ToolOperation.Select;
            tlVectorControl1.LeftClick += new SvgElementEventHandler(tlVectorControl1_LeftClick);
            tlVectorControl1.RightClick += new SvgElementEventHandler(tlVectorControl1_RightClick);
            tlVectorControl1.DoubleLeftClick += new SvgElementEventHandler(tlVectorControl1_DoubleLeftClick);
            //tlVectorControl1.DrawArea.OnMouseMove += new MouseEventHandler(DrawArea_OnMouseMove);
            tlVectorControl1.DrawArea.OnMouseDown += new MouseEventHandler(DrawArea_OnMouseDown);            
            tlVectorControl1.DocumentChanged += new OnDocumentChangedEventHandler(tlVectorControl1_DocumentChanged);
            tlVectorControl1.DrawArea.OnElementMove += new ElementMoveEventHandler(DrawArea_OnElementMove);
            tlVectorControl1.DrawArea.OnMouseMove += new MouseEventHandler(DrawArea_OnMouseMove);
        }

        void DrawArea_OnMouseMove(object sender, MouseEventArgs e)
        {
            //Topology2();
            if (tlVectorControl1.Operation == ToolOperation.PolyLine)
            {
                Topology2();
                XmlNodeList motherLineCollection = tlVectorControl1.SVGDocument.GetElementsByTagName("use");
                foreach (ISvgElement element in motherLineCollection)
                {
                    if ((element as XmlElement).GetAttribute("xlink:href").Contains("motherlinenode"))
                    {                        
                        RectangleF t = ((IGraph)element).GetBounds();
                        Point pt = this.tlVectorControl1.PointToView(new Point(e.X, e.Y));
                        Point mt = this.tlVectorControl1.PointToScreen(new Point(e.X, e.Y));
                        if (!t.Contains(pt.X, pt.Y))
                        {
                            RectangleF temp = new RectangleF();
                            temp = t;
                            temp.X = t.X - 10;
                            temp.Y = t.Y - 10;
                            temp.Height = t.Height + 20;
                            temp.Width = t.Width + 20;
                            if (temp.Contains(pt.X, pt.Y))
                            {                                
                                Point ad = new Point(0, 0);
                                if ((pt.X < t.X) || (pt.X > (t.X + t.Width)))
                                {
                                    ad.X = (int)(pt.X - t.X - t.Width / 2);
                                }
                                if ((pt.Y < t.Y) || (pt.Y > (t.Y + t.Height)))
                                {
                                    ad.Y = (int)(pt.Y - t.Y - t.Height / 2);
                                }
                                //Point ads = this.tlVectorControl1.PointToScreen(new Point(ad.X, ad.Y));
                                SetCursorPos(mt.X - ad.X, mt.Y - ad.Y);
                                Thread.Sleep(15);
                            }
                        }
                    }
                    else if ((element as XmlElement).GetAttribute("xlink:href").Contains("Substation") )
                    {
                        RectangleF t = ((IGraph)element).GetBounds();
                        Point pt = this.tlVectorControl1.PointToView(new Point(e.X, e.Y));
                        Point mt = this.tlVectorControl1.PointToScreen(new Point(e.X, e.Y));
                        RectangleF temp = new RectangleF(t.X-10, t.Y-10, t.Width + 20, t.Height + 20);
                        if (!t.Contains(pt.X, pt.Y))
                        {
                             if (temp.Contains(pt.X, pt.Y))
                             {
                                 Point ad = new Point(0, 0);

                                 //ad = this.tlVectorControl1.PointToScreen(ad);
                                 if (pt.X>t.X+t.Width/2)
                                 {
                                     ad.X = (int)((t.Width / 2) * Math.Cos(Math.Atan((pt.Y - t.Y - t.Height / 2) / (pt.X - t.X - t.Width / 2))));
                                     ad.Y = (int)((t.Width / 2) * Math.Sin(Math.Atan((pt.Y - t.Y - t.Height / 2) / (pt.X - t.X - t.Width / 2))));
                                     ad.X = (int)((t.X + t.Width / 2 + ad.X));
                                     ad.Y = (int)((t.Y + t.Height / 2 + ad.Y));
                                     //SetCursorPos(mt.X - (pt.X - ad.X), mt.Y - (pt.Y - ad.Y));
                                 }
                                 else if (pt.X<t.X+t.Width/2)
                                 {
                                     ad.X = (int)((t.Width / 2) * Math.Cos(Math.Atan((pt.Y - t.Y - t.Height / 2) / (pt.X - t.X - t.Width / 2))));
                                     ad.Y = (int)((t.Width / 2) * Math.Sin(Math.Atan((pt.Y - t.Y - t.Height / 2) / (pt.X - t.X - t.Width / 2))));
                                     ad.X = (int)((t.X + t.Width / 2 - ad.X));
                                     ad.Y = (int)((t.Y + t.Height / 2 - ad.Y));
                                     //SetCursorPos(mt.X - (pt.X - ad.X), mt.Y - (pt.Y - ad.Y));
                                 }
                                 else if (pt.X == t.X+t.Width/2)
                                 {
                                     ad.X = (int)((t.Width / 2) * Math.Cos(Math.Atan((pt.Y - t.Y - t.Height / 2) / (pt.X - t.X - t.Width / 2))));
                                     ad.Y = (int)((t.Width / 2) * Math.Sin(Math.Atan((pt.Y - t.Y - t.Height / 2) / (pt.X - t.X - t.Width / 2))));
                                     ad.X = (int)((t.X + t.Width / 2 + ad.X));
                                     ad.Y = (int)((t.Y + t.Height / 2 + ad.Y));
                                     //SetCursorPos(mt.X - (pt.X - ad.X), mt.Y - (pt.Y - ad.Y));
                                 }
                                 SetCursorPos(mt.X - (pt.X - ad.X), mt.Y - (pt.Y - ad.Y));
                                 Thread.Sleep(15);
                             }
                        }
                    }
                    else if ((element as XmlElement).GetAttribute("xlink:href").Contains("Power"))
                    {
                        RectangleF t = ((IGraph)element).GetBounds();
                        Point pt = this.tlVectorControl1.PointToView(new Point(e.X, e.Y));
                        Point mt = this.tlVectorControl1.PointToScreen(new Point(e.X, e.Y));
                        if (!t.Contains(pt.X, pt.Y))
                        {
                            RectangleF temp = new RectangleF();
                            temp = t;
                            temp.X = t.X - 10;
                            temp.Y = t.Y - 10;
                            temp.Height = t.Height + 20;
                            temp.Width = t.Width + 20;
                            if (temp.Contains(pt.X, pt.Y))
                            {
                                Point ad = new Point(0, 0);
                                if ((pt.X < t.X) || (pt.X > (t.X + t.Width)))
                                {
                                    ad.X = (int)(pt.X - t.X - t.Width / 2);
                                }
                                if ((pt.Y < t.Y) || (pt.Y > (t.Y + t.Height)))
                                {
                                    ad.Y = (int)(pt.Y - t.Y - t.Height / 2);
                                }
                                //Point ads = this.tlVectorControl1.PointToScreen(new Point(ad.X, ad.Y));
                                SetCursorPos(mt.X - ad.X, mt.Y - ad.Y);
                                Thread.Sleep(15);
                            }
                        }
                    }
                }
            }
        }

   
        void tlVectorControl1_DocumentChanged(object sender, DocumentChangedEventArgs e)
        {
            if (tlVectorControl1.Operation == ToolOperation.InterEnclosurePrint)
            {
                tlVectorControl1.Operation = ToolOperation.Select;
            }
        }      



        private void RenderTo(Graphics g)
        {
            SvgDocument svgdoc = tlVectorControl1.SVGDocument;
            Matrix matrix1 = new Matrix();
            Matrix matrix2 = new Matrix();
            matrix1 = ((SVG)svgdoc.RootElement).GraphTransform.Matrix;
            matrix2.Multiply(matrix1);
            matrix1.Reset();
            matrix1.Multiply(g.Transform);
            g.ResetTransform();
            try
            {

                SVG svg1 = svgdoc.DocumentElement as SVG;
                svgdoc.BeginPrint = true;
                SmoothingMode mode1 = svgdoc.SmoothingMode;
                svgdoc.SmoothingMode = g.SmoothingMode;
                svg1.Draw(g, svgdoc.ControlTime);
                svgdoc.SmoothingMode = mode1;
                svgdoc.BeginPrint = false;
            }
            finally
            {
                g.Transform = matrix1.Clone();
                matrix1.Reset();
                matrix1.Multiply(matrix2);
            }
        }
        public void jxtbar2(int jxt)
        {
#if Debug || Release
            dotNetBarManager1.Bars["mainmenu"].GetItem("mjxt").Visible = true;
#endif
            if (jxt == 1)
            {
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = true;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                //Refresh();
            }
            else if (jxt == 4)
            {
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = true;
                //Refresh();
            }
            else if (jxt==2)
            {
                try {
                    dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                } catch { }
                //dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Shortibut").Visible = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
                //Refresh();
            }
            else if (jxt==3)
            {
                dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Visible = Relaflag;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
            }
            else
            {
                try {
                    dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                } catch { }
                //dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                //dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                if (Relaflag)
                {
                    dotNetBarManager1.Bars["bar2"].GetItem("Rela").Visible = true;

                }
                else
                    dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Visible = false;
            }

        }
        public void jxtbar(int jxt)
        {
#if Debug || Release
            dotNetBarManager1.Bars["mainmenu"].GetItem("mjxt").Visible = true;
#endif
            if (jxt == 1)
            {
                dotNetBarManager1.Bars["mainmenu"].GetItem("mConvert").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem9").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Visible = false ;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mjxt").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mDLR").Enabled = false;
               // dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").Enabled = true;
                //dotNetBarManager1.Bars["bar2"].GetItem("powerFactor").Enabled = true;
               // dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = true;
               // dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Enabled = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mConnectLine").Visible = false;

                 dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                 dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
           
              
                //Refresh();
            }
            else if (jxt == 2)
            {
                try
                {
                    dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                }
                catch { }
                //dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                //dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
                //Refresh();
            }
            else if (jxt == 3)
            {
                dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Rela").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
            }
            else 
            {
                dotNetBarManager1.Bars["bar2"].GetItem("VoltEvaluation").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mConvert").Enabled = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem9").Enabled = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mjxt").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mDLR").Enabled = true;
                //dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("Dlqicheck").Enabled = true;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mConvert").Visible = false;
                //dotNetBarManager1.Bars["bar2"].GetItem("Indivcheck").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("ZLcheck").Enabled = false;
               // dotNetBarManager1.Bars["bar2"].GetItem("DLqiOutResult").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("powerFactor").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLoss").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("PowerLossCal").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mConnectLine").Visible = true;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Visible = JXTFlat;
                dotNetBarManager1.Bars["bar2"].GetItem("PSPIdleOptimize").Visible = JXTFlat;
                //Refresh();
            }

            //if (jxt == 1)
            //{
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("mConvert").Visible = false;
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem9").Visible = false;

            //    dotNetBarManager1.Bars["bar2"].GetItem("mDLR").Visible = false;
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").Visible = true;
            //    dotNetBarManager1.Bars["bar2"].GetItem("powerFactor").Visible = true;
            //    dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = true;
            //    dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = true;
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").ShowSubItems = true;
            //    //Refresh();
            //}
            //else
            //{
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("mConvert").Visible = true;
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem9").Visible = true;

            //    dotNetBarManager1.Bars["bar2"].GetItem("mDLR").Visible = true;
            //    dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").Visible = false;
            //    dotNetBarManager1.Bars["bar2"].GetItem("powerFactor").Visible = false;
            //    dotNetBarManager1.Bars["bar2"].GetItem("mTlpsp").Visible = false;
            //    dotNetBarManager1.Bars["bar2"].GetItem("mChaoliuResult").Visible = false;
            //    //Refresh();
            //}
        }
        private void setTJhide() {
            SvgElementCollection sc = (tlVectorControl1.SVGDocument.RootElement as SVG).ChildList;
            foreach (SvgElement se in sc) {
                try {
                    (se as IGraph).DrawVisible = se.GetAttribute("print") != "no";
                } catch { }
            }
        }
        private void setTJshow() {
            SvgElementCollection sc = (tlVectorControl1.SVGDocument.RootElement as SVG).ChildList;
            foreach (SvgElement se in sc) {
                try {
                    (se as IGraph).DrawVisible = true;
                } catch { }
            }
        }
        /// <summary>
        /// 导出区域图片
        /// </summary>
        private void ExportImage()
        {
            GraphPath rt1 = tlVectorControl1.SVGDocument.CurrentElement as GraphPath;
            //GraphPath rt1 = tlVectorControl1.SVGDocument.DocumentElement as GraphPath;
            //RectangleF rtf1 = new RectangleF(0,-100,5000,5000);
            if (rt1 == null) return;
            RectangleF rtf1 = rt1.GetBounds();
            //int width = (int)Math.Round(tlVectorControl1.DocumentSize.Height * tlVectorControl1.ScaleRatio,0);
            //int height = (int)Math.Round(tlVectorControl1.DocumentSize.Width * tlVectorControl1.ScaleRatio,0);      
            int width = (int)Math.Round(rtf1.Width * tlVectorControl1.ScaleRatio, 0)+1;
            int height = (int)Math.Round(rtf1.Height * tlVectorControl1.ScaleRatio, 0)+1;
                System.Drawing.Image image = new Bitmap(width, height);
                Graphics g = Graphics.FromImage(image);
                Color color = ColorTranslator.FromHtml("#EBEAE8");
                //image.SetColorKey(color, color);

                g.Clear(Color.White);
                g.SmoothingMode = SmoothingMode.HighQuality;
                g.CompositingQuality = CompositingQuality.HighQuality;              
                Matrix matrix1 = new Matrix();
                matrix1.Scale(tlVectorControl1.ScaleRatio, tlVectorControl1.ScaleRatio);
                matrix1.Translate(-rtf1.X, -rtf1.Y);
                g.Transform = matrix1;
                setTJhide();//屏蔽T接点
                RenderTo(g);
                setTJshow();
                SaveFileDialog dlg = new SaveFileDialog();
                dlg.RestoreDirectory = true;
                dlg.Filter = "图像文件(*.png)|*.png|图像文件(*.jpg)|*.jpg|图像文件(*.gif)|*.gif|Bitmap文件(*.bmp)|*.bmp|Jpeg文件(*.jpeg)|*.jpeg|所有文件(*.*)|*.*";
                if (dlg.ShowDialog() == DialogResult.OK)
                {
                    string str = Path.GetExtension(dlg.FileName);
                    str = str.Substring(1);
                    if (string.IsNullOrEmpty(str)) str = "Bmp";
                    ImageFormat iformat = ImageFormat.Bmp;
                    switch (str.ToLower())
                    {
                        case "bmp":
                            iformat = ImageFormat.Bmp;
                            break;
                        case "jpeg":
                        case "jpg":
                            iformat = ImageFormat.Jpeg;
                            break;
                        case "png":
                            iformat = ImageFormat.Png;
                            break;
                        case "gif":
                            iformat = ImageFormat.Gif;
                            break;
                    }
                    image.Save(dlg.FileName, iformat);                
                image.Dispose();
            }                   
        }
        void DrawArea_OnElementMove(object sender, MoveEventArgs e)
        {
            SvgElementCollection list = tlVectorControl1.SVGDocument.SelectCollection;
            ISvgElement element = e.SvgElement;
            PointF beforeMove = e.BeforeMove;
            PointF afterMove = e.AfterMove;
            XmlNodeList listFirstNode = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@FirstNode='" + element.ID + "']");
            RectangleF t = ((IGraph)element).GetBounds();
            PointF[] ptt = new PointF[] { beforeMove, afterMove };
            Transf tran = (element as Graph).Transform;
            tran.Matrix.TransformPoints(ptt);
            beforeMove = ptt[0];
            afterMove = ptt[1];
            foreach (XmlNode node in listFirstNode)
            {     
                if (list.Contains((ISvgElement)(node as XmlElement)) )
                {
                    continue;
                }
                PointF[] first = (node as Polyline).Points;
                XmlElement line = node as XmlElement;
                PointF pt1 = new PointF(first[0].X, first[0].Y);
                first[0].X = first[0].X + afterMove.X - beforeMove.X;
                first[0].Y = first[0].Y + afterMove.Y - beforeMove.Y;
                string temp = null;
                (node as Polyline).GPath.Reset();
                (node as Polyline).GPath.AddLines(first);
                foreach (PointF pt in first)
                {
                    if (temp == null)
                    {
                        temp += pt.X + " " + pt.Y;
                    }
                    else
                    {
                        temp += "," + pt.X + " " + pt.Y;
                    }
                }
                if (first[0] != pt1)
                {
                    (node as XmlElement).SetAttribute("points", temp);
                }
            }

            XmlNodeList listLastNode = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@LastNode='" + element.ID + "']");
            foreach (XmlNode node in listLastNode)
            {
                if (list.Contains((ISvgElement)(node as XmlElement)))
                {
                    continue;
                }
                PointF[] first = (node as Polyline).Points;
                XmlElement line = node as XmlElement;
                PointF pt1 = new PointF(first[first.Length - 1].X, first[first.Length - 1].Y);
                first[first.Length - 1].X = first[first.Length - 1].X + afterMove.X - beforeMove.X;
                first[first.Length - 1].Y = first[first.Length - 1].Y + afterMove.Y - beforeMove.Y;
                string temp = null;
                (node as Polyline).GPath.Reset();
                (node as Polyline).GPath.AddLines(first);
                foreach (PointF pt in first)
                {
                    if (temp == null)
                    {
                        temp += pt.X + " " + pt.Y;
                    }
                    else
                    {
                        temp += "," + pt.X + " " + pt.Y;
                    }
                }
                if (first[first.Length - 1] != pt1)
                {
                    (node as XmlElement).SetAttribute("points", temp);
                }
            }
        }


        private void Topology2()
        {
            PSPDEV pspDev = new PSPDEV();
            XmlNode tempd=null;
            XmlElement templei = tempd as XmlElement;
            XmlNodeList nodeList2 = tlVectorControl1.SVGDocument.GetElementsByTagName("polyline");
            foreach (XmlNode node in nodeList2)
            {
                
                XmlElement element = node as XmlElement;
                templei = element;
                
                if ((element.GetAttribute("flag") == "1") || (!element.HasAttributes) || element.GetAttribute("id") == "")
                {
                    break;
                }
                PointF[] t = ((Polyline)element).Pt;
                pspDev.EleID = element.GetAttribute("id");
                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                pspDev.X1 = t[0].X;
                pspDev.Y1 = t[0].Y;
                pspDev.X2 = t[1].X;
                pspDev.Y2 = t[1].Y;
                pspDev.FirstNode = -1;
                pspDev.LastNode = -1;
                pspDev.Number = -1;
                IList list11 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandEleID", pspDev);
                foreach (PSPDEV psp in list11)
                {
                    if (psp.LineStatus == "断开")
                        element.SetAttribute("stroke", "#FF0000");
                    if (psp.LineStatus == "运行")
                        element.SetAttribute("stroke", "#000000");
                }
                //Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
            }
            //pspDev.Type = "Use";
            //pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            //IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            //for (int i = 1; i <= list1.Count; i++)
            //{
            //    pspDev = (PSPDEV)list1[i - 1];
            //    pspDev.Number = i;
            //    Services.BaseService.Update<PSPDEV>(pspDev);
            //}
            //pspDev.Type = "Polyline";
            //pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            //IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            //int j = 0;
            //for (int i = 1; i <= list2.Count; i++)
            //{
            //    pspDev = (PSPDEV)list2[i - 1];
            //    if (pspDev.LineStatus == "断开")
            //    {
            //        //templei.SetAttribute("stroke", "#FF0000");
            //        j += 1;
            //        pspDev.Number = -1;
            //        Services.BaseService.Update<PSPDEV>(pspDev);
            //        continue;
            //    }
            //    pspDev.Number = (i - j);
            //    Services.BaseService.Update<PSPDEV>(pspDev);
            //}
            //pspDev.Type = "Use";
            //pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            //list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            //pspDev.Type = "Polyline";
            //pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            //list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            //foreach (PSPDEV dev in list1)
            //{
            //    double devx = Convert.ToDouble(dev.X1);
            //    double devy = Convert.ToDouble(dev.Y1);
            //    XmlElement temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']") as XmlElement;
            //    if (temp.GetAttribute("xlink:href").Contains("Substation"))
            //    {
            //        RectangleF t = ((IGraph)temp).GetBounds();
            //        foreach (PSPDEV psp in list2)
            //        {
            //            //if (psp.LineStatus== "断开")
            //                //temp.SetAttribute("stroke", "#FF0000");

            //            double x1 = psp.X1;
            //            double x2 = psp.X2;
            //            double y1 = psp.Y1;
            //            double y2 = psp.Y2;
            //            if (Math.Abs(devx - x1) < ((t.Height) / 2) && Math.Abs(devy - y1) < ((t.Height) / 2))
            //            {
            //                psp.FirstNode = dev.Number;
            //                Services.BaseService.Update<PSPDEV>(psp);
            //            }
            //            if (Math.Abs(devx - x2) < ((t.Height) / 2) && Math.Abs(devy - y2) < ((t.Height) / 2))
            //            {
            //                psp.LastNode = dev.Number;
            //                Services.BaseService.Update<PSPDEV>(psp);
            //            }
            //        }
            //    }
            //}
        }
        void DrawArea_OnMouseDown(object sender, MouseEventArgs e)
        {
            Topology2();
            XmlNodeList elementCollection = tlVectorControl1.SVGDocument.GetElementsByTagName("use");
            if (elementCollection.Count > 0)
            {
                foreach (ISvgElement element in elementCollection)
                {
                    if ((element as XmlElement) is Use)
                    {
                        RectangleF t = ((IGraph)element).GetBounds();
                        
                        PointF uset = new PointF((float)(t.X + t.Width / 2), (float)(t.Y + t.Height / 2));
                        XmlNodeList linea = tlVectorControl1.SVGDocument.GetElementsByTagName("polyline");
                        foreach (XmlNode pol in linea)
                        {
                            if ((element as XmlElement).GetAttribute("layer") != (pol as XmlElement).GetAttribute("layer"))
                            {
                                continue;
                            }
                            PointF[] tt = ((Polyline)(pol as XmlElement)).Pt;
                            double x1 = tt[0].X;
                            double x2 = tt[1].X;
                            double y1 = tt[0].Y;
                            double y2 = tt[1].Y;

                            if ((element as XmlElement).GetAttribute("xlink:href").Contains("Substation"))
                            {
                                //(element as XmlElement).SetAttribute("stroke", "#FF0000");
                                if (Math.Abs(uset.X - x1) < ((t.Height) / 2) && Math.Abs(uset.Y - y1) < ((t.Height) / 2))
                                {

                                    (pol as XmlElement).SetAttribute("FirstNode", element.ID);
                                   
                                }
                                else
                                {
                                    if ((pol as XmlElement).GetAttribute("FirstNode") == element.ID)
                                    {
                                        (pol as XmlElement).RemoveAttribute("FirstNode");
                                    }
                                }
                                if (Math.Abs(uset.X - x2) < ((t.Height) / 2) && Math.Abs(uset.Y - y2) < ((t.Height) / 2))
                                {

                                    (pol as XmlElement).SetAttribute("LastNode", element.ID);
                                   
                                }
                                else
                                {
                                    if ((pol as XmlElement).GetAttribute("LastNode") == element.ID)
                                    {
                                        (pol as XmlElement).RemoveAttribute("LastNode");
                                    }
                                }
                            }
                            else if ((element as XmlElement).GetAttribute("xlink:href").Contains("Power") || (element as XmlElement).GetAttribute("xlink:href").Contains("motherlinenode"))
                            {
                                if ((x1 - t.X) < t.Width && (y1 - t.Y) < t.Height && x1 > t.X && y1 > t.Y)
                                {

                                    (pol as XmlElement).SetAttribute("FirstNode", element.ID);
                                  
                                }
                                else
                                {
                                    if ((pol as XmlElement).GetAttribute("FirstNode") == element.ID)
                                    {
                                        (pol as XmlElement).RemoveAttribute("FirstNode");
                                    }
                                }
                                if ((x2 - t.X) < t.Width && (y2 - t.Y) < t.Height && x2 > t.X && y2 > t.Y)
                                {

                                    (pol as XmlElement).SetAttribute("LastNode", element.ID);
                                  
                                }
                                else
                                {
                                    if ((pol as XmlElement).GetAttribute("LastNode") == element.ID)
                                    {
                                        (pol as XmlElement).RemoveAttribute("LastNode");
                                    }
                                }
                            }

                        }

                    }
                }

            }
        }
        Thread oThread;
        System.Threading.Timer time; 
        //private void Form_Load(object sender, EventArgs e)
        //{
        //    t = new Thread(new ThreadStart(start));
        //    t.Start();

        //    try
        //    {
        //        //TimerCallback是一个委托类型,第三个参数是开始计时,每四参数是间隔长(以ms为单位). 
        //        time = new System.Threading.Timer(new TimerCallback(method), null, 0, 40);

        //    }
        //    catch { }
        //}
        void method(object o) //注意参数. 
        {
            oThread.Abort();
            
            while (!oThread.IsAlive)
            {//终止成功. 
                //终止计时器 
                time.Change(Timeout.Infinite, Timeout.Infinite);
                //MessageBox.Show("数据不收敛，计算超时");
                bangbang = 1;


                Thread.Sleep(10000);
                oThread = null;
                
                //workerObject.RequestStop(); 
            }//终止线程. 
        } 

        void start()
        {
            MessageBox.Show("start");
        }
        //void DrawArea_OnMouseMove(object sender, MouseEventArgs e)
        //{

           
        //}    


        void tlVectorControl1_DoubleLeftClick(object sender, SvgElementSelectedEventArgs e)
        {
            elementProperty();
        }

        void elementProperty()
        {

            //if (!Check())
            //{
            //    return;
            //}               
                XmlElement element = tlVectorControl1.SVGDocument.CurrentElement;
                if (element is Use)
                {
                    if (element.GetAttribute("xlink:href").Contains("Substation") || element.GetAttribute("xlink:href").Contains("motherlinenode"))
                    {

                        string str_power = getPower(element.GetAttribute("xlink:href"));
                       
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmSubstation dlg;
                        if (pspDev != null)
                        {
                            dlg = new frmSubstation(pspDev);
                            
                        }
                        else
                        {
                            pspDev = new PSPDEV();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = element.GetAttribute("id");
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = -1;
                            pspDev.Type = "Use";
                            if (element.GetAttribute("xlink:href").Contains("Substation"))
                            {
                                pspDev.Lable = "变电站";
                            }
                            else if (element.GetAttribute("xlink:href").Contains("motherlinenode"))
                            {
                                pspDev.Lable = "母线节点";
                            }
                            else if (element.GetAttribute("xlink:href").Contains("Power"))
                            {
                                pspDev.Lable = "电厂";
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                            dlg = new frmSubstation(pspDev);
                        }
                        dlg.Str_Power = str_power;
                        dlg.IsTJ = element.GetAttribute("print") == "no";
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "Use";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                                (text as Text).SetAttribute("print", dlg.IsTJ ? "no" : "yes");
                            }
                            pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            pspDev.Burthen = Convert.ToDecimal(dlg.Burthen);
                            element.SetAttribute("print", dlg.IsTJ ? "no" : "yes");
                            
                            pspDev.OutP = Convert.ToDouble(dlg.OutP);
                            pspDev.OutQ = Convert.ToDouble(dlg.OutQ); ;
                            //if (pspDev.InPutP==0)
                            pspDev.InPutP = Convert.ToDouble(dlg.InPutP);
                            pspDev.InPutQ = Convert.ToDouble(dlg.InPutQ);
                            pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                            if (dlg.NodeType == "是")
                            {
                                pspDev.NodeType = "0";
                            }
                            else
                            {
                                pspDev.NodeType = "1";
                            }
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("Power"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmSubstation dlg;
                        if (pspDev != null)
                        {
                            dlg = new frmSubstation(pspDev);
                        }
                        else
                        {
                            pspDev = new PSPDEV();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = element.GetAttribute("id");
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = -1;
                            pspDev.Type = "Use";
                            if (element.GetAttribute("xlink:href").Contains("Substation"))
                            {
                                pspDev.Lable = "变电站";
                            }
                            else if (element.GetAttribute("xlink:href").Contains("motherlinenode"))
                            {
                                pspDev.Lable = "母线节点";
                            }
                            else if (element.GetAttribute("xlink:href").Contains("Power"))
                            {
                                pspDev.Lable = "电厂";
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                            dlg = new frmSubstation(pspDev);
                        }

                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "Use";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }
                            pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            pspDev.Burthen = Convert.ToDecimal(dlg.Burthen);
                            pspDev.OutP = Convert.ToDouble(dlg.OutP);
                            pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                            pspDev.InPutP = Convert.ToDouble(dlg.InPutP);
                            pspDev.InPutQ = Convert.ToDouble(dlg.InPutQ);
                            pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                            if (dlg.NodeType == "是")
                            {
                                pspDev.NodeType = "0";
                            }
                            else
                            {
                                pspDev.NodeType = "2";
                            }
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("dynamotorline"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmFadejie dlg;
                        if (pspDev != null)
                        {
                            dlg = new frmFadejie(pspDev,pspDev.SvgUID);
                        }
                        else
                        {
                            pspDev = new PSPDEV();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = element.GetAttribute("id");
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "dynamotorline";
                            if (element.GetAttribute("xlink:href").Contains("dynamotorline"))
                            {
                                pspDev.Lable = "发电厂支路";
                            }
                            else if (element.GetAttribute("xlink:href").Contains("gndline"))
                            {
                                pspDev.Lable = "接地支路";
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                            dlg = new frmFadejie(pspDev,pspDev.SvgUID);
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "dynamotorline"; 
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }
                            pspDev.HuganLine1 = dlg.FirstNodeName;
                            pspDev.HuganLine3 = dlg.SwitchStatus;
                            if (dlg.OutP != "")
                                pspDev.OutP = Convert.ToDouble(dlg.OutP);
                            if (dlg.OutQ != "")
                                pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                            if (dlg.VoltR != "")
                                pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            if (dlg.VoltV != "")
                                pspDev.VoltV = Convert.ToDouble(dlg.VoltV);
                            if (dlg.PositiveTQ != "")
                                pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                            if (dlg.NegativeTQ != "")
                                pspDev.ZeroTQ = Convert.ToDouble(dlg.NegativeTQ);
                            //加入基准电压
                            pspName.Name = dlg.FirstNodeName;
                            pspName.Type = "Use";
                            pspName =(PSPDEV) Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                            //listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (pspName != null)
                            {
                                pspDev.ReferenceVolt = Convert.ToDouble(pspName.ReferenceVolt);
                            }
                            if (dlg.SiN != "")
                                pspDev.SiN = Convert.ToDouble(dlg.SiN);
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("gndline"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmFadejie dlg;
                        if (pspDev != null)
                        {
                            dlg = new frmFadejie(pspDev, pspDev.SvgUID);
                        }
                        else
                        {
                            pspDev = new PSPDEV();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = element.GetAttribute("id");
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "gndline";
                            if (element.GetAttribute("xlink:href").Contains("dynamotorline"))
                            {
                                pspDev.Lable = "发电厂支路";
                            }
                            else if (element.GetAttribute("xlink:href").Contains("gndline"))
                            {
                                pspDev.Lable = "接地支路";
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                            dlg = new frmFadejie(pspDev, pspDev.SvgUID);
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "gndline";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }
                            pspDev.HuganLine1 = dlg.FirstNodeName;
                            pspDev.HuganLine3 = dlg.SwitchStatus;
                            if (dlg.OutP != "")
                                pspDev.OutP = Convert.ToDouble(dlg.OutP);
                            if (dlg.OutQ != "")
                                pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                            if (dlg.VoltR != "")
                                pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            if (dlg.VoltV != "")
                                pspDev.VoltV = Convert.ToDouble(dlg.VoltV);
                            if (dlg.PositiveTQ != "")
                                pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                            if (dlg.NegativeTQ != "")
                                pspDev.ZeroTQ = Convert.ToDouble(dlg.NegativeTQ);
                            //加入基准电压
                            pspName.Name = dlg.FirstNodeName;
                            pspName.Type = "Use";
                            pspName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                            //listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (pspName != null)
                            {
                                pspDev.ReferenceVolt = Convert.ToDouble(pspName.ReferenceVolt);
                            }
                            if (dlg.SiN != "")
                                pspDev.SiN = Convert.ToDouble(dlg.SiN);
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("loadline"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmLoad dlg;
                        if (pspDev != null)
                        {
                            dlg = new frmLoad(pspDev);
                        }
                        else
                        {
                            pspDev = new PSPDEV();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = element.GetAttribute("id");
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "loadline";

                            pspDev.Lable = "负荷支路";

                            Services.BaseService.Create<PSPDEV>(pspDev);
                            dlg = new frmLoad(pspDev);
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "loadline";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }
                            pspDev.HuganLine1 = dlg.FirstNodeName;

                            pspDev.HuganLine3 = dlg.LoadSwitchState;
                            if (dlg.InPutP != "")
                                pspDev.InPutP = Convert.ToDouble(dlg.InPutP);
                            if (dlg.InPutQ != "")
                                pspDev.InPutQ = Convert.ToDouble(dlg.InPutQ);
                            if (dlg.VoltR != "")
                                pspDev.VoltR = Convert.ToDouble(dlg.VoltR);

                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("串联电容电抗器"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmCapacity dlg;


                        if (pspDev != null)
                        {
                            dlg = new frmCapacity(pspDev, pspDev.SvgUID);
                            dlg.SetEnable(true);
                        }
                        else
                        {
                            return;
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "串联电容电抗器";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }
                            pspDev.HuganLine1 = dlg.FirstNodeName;

                           // pspDev.HuganLine2 = dlg.LastNodeName;
                            pspDev.HuganLine4 = dlg.belongline;
                            pspDev.HuganLine3 = dlg.SwitchStatus;
                            if (dlg.PositiveTQ != "")
                                pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                            if (dlg.VoltR != "")
                            {
                                pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            }
                            if (dlg.ReferenceVolt != "")
                            {
                                pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                            }

                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("并联电容电抗器"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmCapacity dlg;


                        if (pspDev != null)
                        {
                            dlg = new frmCapacity(pspDev, pspDev.SvgUID);
                            dlg.SetEnable(false);
                        }
                        else
                        {
                            return;
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "并联电容电抗器";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }
                            pspDev.HuganLine1 = dlg.FirstNodeName;
                            //pspDev.HuganLine2 = dlg.LastNodeName;
                            pspDev.HuganLine3 = dlg.SwitchStatus;
                            if (dlg.PositiveTQ != "")
                                pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                            if (dlg.VoltR != "")
                            {
                                pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            }
                            if (dlg.ReferenceVolt != "")
                            {
                                pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                            }

                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("transformerthirdzu"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmThridTra dlg;

                        if (pspDev != null)
                        {
                            dlg = new frmThridTra(pspDev, pspDev.SvgUID);
                        }
                        else
                        {
                            return;
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "transformerthirdzu";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }

                            pspDev.HuganLine1 = dlg.IName;
                            pspDev.HuganLine2 = dlg.JName;
                            pspDev.HuganLine3 = dlg.ISwitchState;
                            pspDev.HuganLine4 = dlg.JSwitchState;
                            pspDev.LineLevel = dlg.IType;
                            pspDev.LineType = dlg.JType;
                            pspDev.LineStatus = dlg.KType;
                            pspDev.KName = dlg.KName;
                            pspDev.KSwitchStatus = dlg.KSwitchState;
                            if (dlg.IK != "")
                            {
                                pspDev.K = Convert.ToDouble(dlg.IK);
                            }
                            if (dlg.JK != "")
                            {
                                pspDev.G = Convert.ToDouble(dlg.JK);
                            }
                            if (dlg.KK != "")
                            {
                                pspDev.BigP = Convert.ToDouble(dlg.KK);
                            }
                            if (dlg.IR != "")
                            {
                                pspDev.HuganTQ1 = Convert.ToDouble(dlg.IR);
                            }
                            if (dlg.JR != "")
                            {
                                pspDev.HuganTQ2 = Convert.ToDouble(dlg.JR);
                            }
                            if (dlg.KR != "")
                            {
                                pspDev.HuganTQ3 = Convert.ToDouble(dlg.KR);
                            }
                            if (dlg.ITQ != "")
                            {
                                pspDev.HuganTQ4 = Convert.ToDouble(dlg.ITQ);
                            }
                            if (dlg.JTQ != "")
                            {
                                pspDev.HuganTQ5 = Convert.ToDouble(dlg.JTQ);
                            }
                            if (dlg.KTQ != "")
                            {
                                pspDev.SmallTQ = Convert.ToDouble(dlg.KTQ);
                            }
                            if (dlg.ZeroTQ != "")
                                pspDev.ZeroTQ = Convert.ToDouble(dlg.ZeroTQ);

                            if (dlg.NeutralNodeTQ != "")
                                pspDev.BigTQ = Convert.ToDouble(dlg.NeutralNodeTQ);
                            if (dlg.P0 != "")
                            {
                                pspDev.P0 = Convert.ToDouble(dlg.P0);
                            }
                            if (dlg.I0 != "")
                            {
                                pspDev.I0 = Convert.ToDouble(dlg.I0);
                            }
                            if (dlg.SiN != "")
                            {
                                pspDev.SiN = Convert.ToDouble(dlg.SiN);
                            }
                            if (dlg.Vi0 != "")
                            {
                                pspDev.Vi0 = Convert.ToDouble(dlg.Vi0);
                            }
                            if (dlg.Pij != "")
                            {
                                pspDev.Pij = Convert.ToDouble(dlg.Pij);
                            }
                            if (dlg.Vij != "")
                            {
                                pspDev.Vij = Convert.ToDouble(dlg.Vij);
                            }
                            if (dlg.Vipos != "")
                            {
                                pspDev.Vipos = Convert.ToDouble(dlg.Vipos);
                            }
                            if (dlg.Vistep != "")
                            {
                                pspDev.Vistep = Convert.ToDouble(dlg.Vistep);
                            }
                            if (dlg.Vimax != "")
                            {
                                pspDev.Vimax = Convert.ToDouble(dlg.Vimax);
                            }
                            if (dlg.Vimin != "")
                            {
                                pspDev.Vimin = Convert.ToDouble(dlg.Vimin);
                            }
                            if (dlg.SjN != "")
                            {
                                pspDev.SjN = Convert.ToDouble(dlg.SjN);
                            }
                            if (dlg.Vj0 != "")
                            {
                                pspDev.Vj0 = Convert.ToDouble(dlg.Vj0);
                            }
                            if (dlg.Pjk != "")
                            {
                                pspDev.Pjk = Convert.ToDouble(dlg.Pjk);
                            }
                            if (dlg.Vjk != "")
                            {
                                pspDev.Vjk = Convert.ToDouble(dlg.Vjk);
                            }
                            if (dlg.Vjpos != "")
                            {
                                pspDev.Vjpos = Convert.ToDouble(dlg.Vjpos);
                            }
                            if (dlg.Vjstep != "")
                            {
                                pspDev.Vjstep = Convert.ToDouble(dlg.Vjstep);
                            }
                            if (dlg.Vjmax != "")
                            {
                                pspDev.Vjmax = Convert.ToDouble(dlg.Vjmax);
                            }
                            if (dlg.Vjmin != "")
                            {
                                pspDev.Vjmin = Convert.ToDouble(dlg.Vjmin);
                            }
                            if (dlg.SkN != "")
                            {
                                pspDev.SkN = Convert.ToDouble(dlg.SkN);
                            }
                            if (dlg.Vk0 != "")
                            {
                                pspDev.Vk0 = Convert.ToDouble(dlg.Vk0);
                            }
                            if (dlg.Pik != "")
                            {
                                pspDev.Pik = Convert.ToDouble(dlg.Pik);
                            }
                            if (dlg.Vik != "")
                            {
                                pspDev.Vik = Convert.ToDouble(dlg.Vik);
                            }
                            if (dlg.Vkpos != "")
                            {
                                pspDev.Vkpos = Convert.ToDouble(dlg.Vkpos);
                            }
                            if (dlg.Vkstep != "")
                            {
                                pspDev.Vkstep = Convert.ToDouble(dlg.Vkstep);
                            }
                            if (dlg.Vkmax != "")
                            {
                                pspDev.Vkmax = Convert.ToDouble(dlg.Vkmax);
                            }
                            if (dlg.Vkmin != "")
                            {
                                pspDev.Vkmin = Convert.ToDouble(dlg.Vkmin);
                            }
                            if (dlg.Vib != "")
                            {
                                pspDev.Vib = Convert.ToDouble(dlg.Vib);
                            }
                            if (dlg.Vjb != "")
                            {
                                pspDev.Vjb = Convert.ToDouble(dlg.Vjb);
                            }
                            if (dlg.Vkb != "")
                            {
                                pspDev.Vkb = Convert.ToDouble(dlg.Vkb);
                            }
                            //if (dlg.Vib != "")
                            //{
                            //    pspDev.Vib = Convert.ToDouble(dlg.Vib);
                            //}
                            //if (dlg.Vjb != "")
                            //{
                            //    pspDev.Vjb = Convert.ToDouble(dlg.Vjb);
                            //}
                            //if (dlg.Vkb != "")
                            //{
                            //    pspDev.Vkb = Convert.ToDouble(dlg.Vkb);
                            //}
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("transformertwozu"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmTwoTra dlg;

                        if (pspDev != null)
                        {
                            dlg = new frmTwoTra(pspDev, pspDev.SvgUID);
                        }
                        else
                        {
                            return;
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "transformertwozu";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }

                            pspDev.HuganLine1 = dlg.FirstName;
                            pspDev.HuganLine2 = dlg.LastName;
                            pspDev.HuganLine3 = dlg.FirstSwitchState;
                            pspDev.HuganLine4 = dlg.LastSwitchState;
                            pspDev.LineLevel = dlg.FirstType;
                            pspDev.LineType = dlg.LastType;

                            if (dlg.PositiveR != "")
                            {
                                pspDev.PositiveR = Convert.ToDouble(dlg.PositiveR);
                            }
                            if (dlg.PositiveTQ != "")
                            {
                                pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                            }

                            if (dlg.ZeroR != "")
                            {
                                pspDev.ZeroR = Convert.ToDouble(dlg.ZeroR);
                            }

                            if (dlg.ZeroTQ != "")
                            {
                                pspDev.ZeroTQ = Convert.ToDouble(dlg.ZeroTQ);
                            }

                            if (dlg.K != "")
                                pspDev.K = Convert.ToDouble(dlg.K);

                            if (dlg.NeutralNodeTQ != "")
                                pspDev.BigTQ = Convert.ToDouble(dlg.NeutralNodeTQ);
                            if (dlg.NeutralNodeR!="")
                            {
                                pspDev.SmallTQ = Convert.ToDouble(dlg.NeutralNodeR);
                            }
                            if (dlg.Pij != "")
                            {
                                pspDev.Pij = Convert.ToDouble(dlg.Pij);
                            }
                            if (dlg.Vij != "")
                            {
                                pspDev.Vij = Convert.ToDouble(dlg.Vij);
                            }
                            if (dlg.Vi0 != "")
                            {
                                pspDev.Vi0 = Convert.ToDouble(dlg.Vi0);
                            }
                            if (dlg.Vipos != "")
                            {
                                pspDev.Vipos = Convert.ToDouble(dlg.Vipos);
                            }
                            if (dlg.Vistep != "")
                            {
                                pspDev.Vistep = Convert.ToDouble(dlg.Vistep);
                            }
                            if (dlg.Vimax != "")
                            {
                                pspDev.Vimax = Convert.ToDouble(dlg.Vimax);
                            }
                            if (dlg.Vimin != "")
                            {
                                pspDev.Vimin = Convert.ToDouble(dlg.Vimin);
                            }
                            if (dlg.P0 != "")
                            {
                                pspDev.P0 = Convert.ToDouble(dlg.P0);
                            }
                            if (dlg.I0 != "")
                            {
                                pspDev.I0 = Convert.ToDouble(dlg.I0);
                            }
                            if (dlg.SiN != "")
                            {
                                pspDev.SiN = Convert.ToDouble(dlg.SiN);
                            }
                            if (dlg.Vj0 != "")
                            {
                                pspDev.Vj0 = Convert.ToDouble(dlg.Vj0);
                            }
                            if (dlg.Vjpos != "")
                            {
                                pspDev.Vjpos = Convert.ToDouble(dlg.Vjpos);
                            }
                            if (dlg.Vjstep != "")
                            {
                                pspDev.Vjstep = Convert.ToDouble(dlg.Vjstep);
                            }
                            if (dlg.Vjmax != "")
                            {
                                pspDev.Vjmax = Convert.ToDouble(dlg.Vjmax);
                            }
                            if (dlg.Vjmin != "")
                            {
                                pspDev.Vjmin = Convert.ToDouble(dlg.Vjmin);
                            }
                            if (dlg.Vib != "")
                            {
                                pspDev.Vib = Convert.ToDouble(dlg.Vib);
                            }
                            if (dlg.Vjb != "")
                            {
                                pspDev.Vjb = Convert.ToDouble(dlg.Vjb);
                            }
                            if (dlg.Vib != "")
                            {
                                pspDev.Vib = Convert.ToDouble(dlg.Vib);
                            }

                            if (dlg.Vjb != "")
                            {
                                pspDev.Vjb = Convert.ToDouble(dlg.Vjb);
                            }
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("1/2母联开关"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmMuLian dlg;

                        if (pspDev != null)
                        {
                            dlg = new frmMuLian(pspDev, pspDev.SvgUID);
                        }
                        else
                        {
                            return;
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "1/2母联开关";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }

                            pspDev.HuganLine1 = dlg.FirstNodeName;
                            pspDev.HuganLine2 = dlg.LastNodeName;
                            pspDev.HuganLine3 = dlg.SwitchStatus;                            
                          

                         
                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    else if (element.GetAttribute("xlink:href").Contains("2/3母联开关"))
                    {
                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        frmMuLian2 dlg;

                        if (pspDev != null)
                        {
                            dlg = new frmMuLian2(pspDev, pspDev.SvgUID);
                        }
                        else
                        {
                            return;
                        }
                        if (dlg.ShowDialog() == DialogResult.OK)
                        {
                            if (dlg.Name == null)
                            {
                                MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "2/3母联开关";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            pspDev.Name = dlg.Name;
                            XmlNode text = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + pspDev.EleID + "']");
                            if (text != null)
                            {
                                (text as Text).InnerText = dlg.Name;
                            }

                            pspDev.HuganLine1 = dlg.INodeName;
                            pspDev.HuganLine2 = dlg.JNodeName;
                            pspDev.HuganLine3 = dlg.ILineName;
                            pspDev.HuganLine4 = dlg.JLineName;
                            pspDev.KName = dlg.ILoadName;
                            pspDev.KSwitchStatus = dlg.JLoadName;
                            pspDev.LineLevel = dlg.SwitchStatus1;
                            pspDev.LineType = dlg.SwitchStatus2;
                            pspDev.LineStatus = dlg.SwitchStatus3;

                            Services.BaseService.Update<PSPDEV>(pspDev);
                        }
                    }
                    
                }               
                else if ((element is Polyline) && element.GetAttribute("flag") != "1" && fileType == true)
                {

                    PSPDEV pspDev = new PSPDEV();
                    pspDev.EleID = element.GetAttribute("id");
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);

                    frmLinenew dlg2;
                    if (pspDev != null)
                    {
                        dlg2 = new frmLinenew(pspDev);
                    }
                    else
                    {
                        pspDev = new PSPDEV();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = -1;
                        pspDev.Type = "Polyline";
                        pspDev.Lable = "支路";
                        Services.BaseService.Create<PSPDEV>(pspDev);
                        dlg2 = new frmLinenew(pspDev);
                    }

                    if (dlg2.ShowDialog() == DialogResult.OK)
                    {
                        if (dlg2.Name == null)
                        {
                            MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlg2.Name;
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspName.Type = "Polyline";
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        pspDev.Name = dlg2.Name;
                        pspDev.LineLength = Convert.ToDouble(dlg2.LineLength);
                        pspDev.LineR = Convert.ToDouble(dlg2.LineR);
                        pspDev.LineTQ = Convert.ToDouble(dlg2.LineTQ);
                        pspDev.LineGNDC = Convert.ToDouble(dlg2.LineGNDC);
                        pspDev.LineLevel = dlg2.LineLevel;
                        pspDev.ReferenceVolt =Convert.ToDouble(dlg2.ReferenceVolt) ;
                        pspDev.LineType = dlg2.LineType;
                        pspDev.LineStatus = dlg2.LineStatus;
                        WireCategory wirewire = new WireCategory();
                        wirewire.WireType = dlg2.LineType;
                        WireCategory wirewire2 = new WireCategory();
                        wirewire2 = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                        //if (pspDev.LineR == 0)
                        //    pspDev.LineR = Convert.ToDouble(dlg2.LineLength)*wirewire2.WireR ;
                        //if (pspDev.LineTQ == 0)
                        //    pspDev.LineTQ = Convert.ToDouble(dlg2.LineLength) * wirewire2.WireTQ;
                        //if (pspDev.LineGNDC == 0)
                        //    pspDev.LineGNDC = Convert.ToDouble(dlg2.LineLength) * wirewire2.WireGNDC;
                        if (wirewire2 != null)
                            pspDev.LineChange = (double)wirewire2.WireChange;
                        string tempp = dlg2.LineLev;
                        int tel = tempp.Length;
                        //tempp = tempp.Substring(0, tel - 2);
                        pspDev.VoltR = Convert.ToDouble(tempp);
                        if (dlg2.ReferenceVolt == "" || dlg2.ReferenceVolt == null)
                        {
                            dlg2.ReferenceVolt = "0";
                        }
                        pspDev.ReferenceVolt = Convert.ToDouble(dlg2.ReferenceVolt);

                        //switch (dlg2.LineType)
                        //{
                        //    case "2*LGJ-400":
                        //        {
                        //            if (pspDev.LineR==0)
                        //            pspDev.LineR = Convert.ToDouble(dlg2.LineLength) * 0.04;
                        //            if (pspDev.LineTQ == 0)
                        //            pspDev.LineTQ = Convert.ToDouble(dlg2.LineLength) * 0.303;
                        //            if (pspDev.LineGNDC == 0)
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg2.LineLength) * 17.9;
                        //            pspDev.LineChange = 1690;
                        //        } break;
                        //    case "2*LGJ-300":
                        //        {
                        //            if (pspDev.LineR == 0)
                        //            pspDev.LineR = Convert.ToDouble(dlg2.LineLength) * 0.054;
                        //            if (pspDev.LineTQ == 0)
                        //            pspDev.LineTQ = Convert.ToDouble(dlg2.LineLength) * 0.308;
                        //            if (pspDev.LineGNDC == 0)
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg2.LineLength) * 17.7;
                        //            pspDev.LineChange = 1400;
                        //        } break;
                        //    case "2*LGJ-240":
                        //        {
                        //            if (pspDev.LineR == 0)
                        //            pspDev.LineR = Convert.ToDouble(dlg2.LineLength) * 0.066;
                        //            if (pspDev.LineTQ == 0)
                        //            pspDev.LineTQ = Convert.ToDouble(dlg2.LineLength) * 0.310;
                        //            if (pspDev.LineGNDC == 0)
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg2.LineLength) * 17.5;
                        //            pspDev.LineChange = 1220;
                        //        } break;
                        //    case "LGJ-400":
                        //        {
                        //            if (pspDev.LineR == 0)
                        //            pspDev.LineR = Convert.ToDouble(dlg2.LineLength) * 0.08;
                        //            if (pspDev.LineTQ == 0)
                        //            pspDev.LineTQ = Convert.ToDouble(dlg2.LineLength) * 0.417;
                        //            if (pspDev.LineGNDC == 0)
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg2.LineLength) * 13.2;
                        //            pspDev.LineChange = 845;
                        //        } break;


                        //}
                        Services.BaseService.Update<PSPDEV>(pspDev);
                        Topology2();
                    }
                }
                else if ((element is Polyline) && element.GetAttribute("flag") != "1" && fileType != true)
                {

                    PSPDEV pspDev = new PSPDEV();
                    pspDev.EleID = element.GetAttribute("id");
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);

                    frmLine dlg;
                    if (pspDev != null)
                    {
                        dlg = new frmLine(pspDev);
                    }
                    else
                    {
                        pspDev = new PSPDEV();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = -1;
                        pspDev.Type = "Polyline";
                        pspDev.Lable = "支路";
                        Services.BaseService.Create<PSPDEV>(pspDev);
                        dlg = new frmLine(pspDev);
                    }

                    if (dlg.ShowDialog() == DialogResult.OK)
                    {
                        if (dlg.Name == null)
                        {
                            MessageBox.Show("名称不能为空！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlg.Name;
                        pspName.Type = "Polyline";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        pspDev.Name = dlg.Name;
                        pspDev.LineLength = Convert.ToDouble(dlg.LineLength);
                        pspDev.LineLevel = dlg.LineLevel;
                        pspDev.LineType = dlg.LineType;
                        pspDev.KName = dlg.ISwitchStatus;
                        pspDev.KSwitchStatus = dlg.JSwitchStatus;
                        pspDev.LineStatus = dlg.LineStatus;
                        pspDev.SmallTQ = Convert.ToDouble(dlg.PositiveES);
                        pspDev.PositiveR = Convert.ToDouble(dlg.PositiveR);
                        pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                        pspDev.ZeroR = Convert.ToDouble(dlg.ZeroR);
                        pspDev.ZeroTQ = Convert.ToDouble(dlg.ZeroTQ);
                        if (dlg.HuganFirst == "是")
                            pspDev.HuganFirst = 1;
                        else
                            pspDev.HuganFirst = 0;
                        if (dlg.PositiveES != "")
                        {
                            pspDev.SmallTQ = Convert.ToDouble(dlg.PositiveES);
                        }
                        if (dlg.ZeroES != "")
                        {
                            pspDev.BigTQ = Convert.ToDouble(dlg.ZeroES);
                        }
                        if (dlg.ReferenceVolt!="")
                        {
                            pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                        }
                        pspDev.HuganLine1 = dlg.HuganLine1;
                        pspDev.HuganLine2 = dlg.HuganLine2;
                        pspDev.HuganLine3 = dlg.HuganLine3;
                        pspDev.HuganLine4 = dlg.HuganLine4;
                        pspDev.HuganTQ1 = Convert.ToDouble(dlg.HuganTQ1);
                        pspDev.HuganTQ2 = Convert.ToDouble(dlg.HuganTQ2);
                        pspDev.HuganTQ3 = Convert.ToDouble(dlg.HuganTQ3);
                        pspDev.HuganTQ4 = Convert.ToDouble(dlg.HuganTQ4);
                        pspDev.HuganTQ5 = Convert.ToDouble(dlg.HuganTQ5);
                        pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                        string tempp = dlg.LineLev;
                        int tel = tempp.Length;
                        if (tel == 1)
                            pspDev.VoltR = 0;
                        else
                        {
                            //tempp = tempp.Substring(0, tel - 2);
                            pspDev.VoltR = Convert.ToDouble(tempp);
                        }
                        //switch (dlg.LineType)
                        //{
                        //    case "2*LGJ-400":
                        //        {
                        //            pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.04;
                        //            pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.303;
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.9;
                        //            pspDev.LineChange = 1690;
                        //        } break;
                        //    case "2*LGJ-300":
                        //        {
                        //            pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.054;
                        //            pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.308;
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.7;
                        //            pspDev.LineChange = 1400;
                        //        } break;
                        //    case "2*LGJ-240":
                        //        {
                        //            pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.066;
                        //            pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.310;
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.5;
                        //            pspDev.LineChange = 1220;
                        //        } break;
                        //    case "LGJ-400":
                        //        {
                        //            pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.08;
                        //            pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.417;
                        //            pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 13.2;
                        //            pspDev.LineChange = 845;
                        //        } break;


                        //}
                        Services.BaseService.Update<PSPDEV>(pspDev);
                        Topology2();
                    }
                }
        }

        void tlVectorControl1_RightClick(object sender, SvgElementSelectedEventArgs e)
        {
            if (Operateflag && tlVectorControl1.CurrentOperation == ToolOperation.AreaSelect)
            {
                DelLinenum.Clear();
                DelTransnum.Clear();
                contextMenuStrip1.Visible = false;
                SvgElementCollection svgelcollect = tlVectorControl1.SVGDocument.SelectCollection;
                if (svgelcollect.Count == 0)
                {
                    MessageBox.Show("请选择区域！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                PSPDEV psp = new PSPDEV();
                psp.Type = "Polyline";
                psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                int n = 0;
                for (int j = 0; j < svgelcollect.Count; j++)            //记录要进行断开的线路
                {
                    if (svgelcollect[j].GetType().FullName == "ItopVector.Core.Figure.Polyline")
                    {
                        XmlElement e1 = (XmlElement)svgelcollect[j];
                        string str_id = e1.GetAttribute("id");
                        psp.EleID=str_id;
                        PSPDEV dlg11 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", psp);
                        if (dlg11.LineStatus == "运行")
                        {
                            DelLinenum.Add(dlg11.Number);
                        }
                        n++;
                    }
                    if (svgelcollect[j].GetType().FullName == "ItopVector.Core.Figure.TransformLine")
                    {
                        XmlElement e1 = (XmlElement)svgelcollect[j];
                        string str_id = e1.GetAttribute("id");
                        psp.EleID = str_id;
                        PSPDEV dlg11 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", psp);
                        DelTransnum.Add(dlg11.Number);
                        n++;
                    }
                }
                if (n==0)
                {
                    MessageBox.Show("选择的区域中，没有可以断开的线路。", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    tlVectorControl1.CurrentOperation = ToolOperation.Select;
                    return;
                }
                else
                {
                    DelLinenum.Sort();
                    DelTransnum.Sort();
                    //进行区域N-1检验
                    QyRelanalyst();
                    tlVectorControl1.CurrentOperation = ToolOperation.Select;
                    return;

                }
                
            }
            if ((tlVectorControl1.SVGDocument.CurrentElement is Use || tlVectorControl1.SVGDocument.CurrentElement is Polyline) && tlVectorControl1.Operation != ToolOperation.PolyLine)
            {
                contextMenuStrip1.Show();
                //if (fileType == true)
                //{
                //    moveMenuItem.Enabled = false;
                //}
                //else
                //{
                //    moveMenuItem.Enabled = true;
                //}

                if (fileType == true)
                {
                    printToolStripMenuItem.Visible = false;
                    moveMenuItem.Visible = false;
                    Duluqi.Visible = false;
                }
                else
                {
                    printToolStripMenuItem.Visible = false;
                    moveMenuItem.Visible = true;
                }              
                //if (tlVectorControl1.SVGDocument.CurrentElement
                XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement as XmlElement;
                if (temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                {
                    Ssubstation.Visible = true;
                    Duluqi.Visible = true;
                }
                if (temp.GetAttribute("xlink:href").Contains("Polyline")||temp.GetAttribute("xlink:href").Contains("dynamotorline") || temp.GetAttribute("xlink:href").Contains("gndline") || temp.GetAttribute("xlink:href").Contains("loadline") || temp.GetAttribute("xlink:href").Contains("串联电容电抗器") || temp.GetAttribute("xlink:href").Contains("并联电容电抗器") || temp.GetAttribute("xlink:href").Contains("transformerthirdzu") || temp.GetAttribute("xlink:href").Contains("transformertwozu") || temp.GetAttribute("xlink:href").Contains("1/2母联开关") || temp.GetAttribute("xlink:href").Contains("2/3母联开关"))
                {
                    moveMenuItem.Visible = false;
                    Duluqi.Visible = false;
                    Ssubstation.Visible = false;
                }
            }
            else
            {
                //contextMenuStrip1.Hide();
                if ((tlVectorControl1.SVGDocument.CurrentElement is RectangleElement))
                {
                    contextMenuStrip1.Show();
                    printToolStripMenuItem.Visible = true;
                    moveMenuItem.Visible = false;                    
                }
            }
             
            if (tlVectorControl1.Operation == ToolOperation.PolyLine && tlVectorControl1.SVGDocument.CurrentElement is Polyline && fileType==true)
            {
                tlVectorControl1.Operation = ToolOperation.Select;
                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                PointF[] t = (tlVectorControl1.SVGDocument.CurrentElement as Polyline).Pt;
                PSPDEV pspDev = new PSPDEV();
                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                pspDev.Number = -1;
                pspDev.Type = "Polyline";
                pspDev.FirstNode = -1;
                pspDev.LastNode = -1;
                frmLinenew dlg = new frmLinenew(pspDev);
                 if (dlg.ShowDialog(this) == DialogResult.OK)
                 {
                     XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                     PSPDEV pspName = new PSPDEV();
                     pspName.Name = dlg.Name;
                     pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                     pspName.Type = "Polyline";
                     IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                     if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                     {
                         MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                         tlVectorControl1.Delete();
                         return;
                     }
                     //if (element.Count > 0)
                     //{
                     //    foreach (XmlNode node in element)
                     //    {
                     //        if (node.InnerText == dlg.TextInput)
                     //        {
                     //            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                     //            tlVectorControl1.Delete();
                     //            return;
                     //        }
                     //    }
                     //}
                     pspDev.Name = dlg.Name;
                     pspDev.Number = -1;
                     pspDev.Type = "Polyline";
                     pspDev.FirstNode = -1;
                     pspDev.LastNode = -1;
                     pspDev.EleID = tlVectorControl1.SVGDocument.CurrentElement.ID;
                     pspDev.SUID = Guid.NewGuid().ToString();
                     pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                     pspDev.X1 = t[0].X;
                     pspDev.Y1 = t[0].Y;
                     pspDev.X2 = t[1].X;
                     pspDev.Y2 = t[1].Y;
                     pspDev.Lable = "支路";
                     if (dlg.LineLength!="")
                     pspDev.LineLength = Convert.ToDouble(dlg.LineLength);
                 string tempp = dlg.LineLev;
                 int tel = tempp.Length;
                // tempp = tempp.Substring(0, tel - 2);
                 pspDev.VoltR = Convert.ToDouble(tempp);
                 if (dlg.LineR != "")
                     pspDev.LineR = Convert.ToDouble(dlg.LineR);
                 if (dlg.LineTQ != "")
                     pspDev.LineTQ = Convert.ToDouble(dlg.LineTQ);
                 if (dlg.LineGNDC != "")
                     pspDev.LineGNDC = Convert.ToDouble(dlg.LineGNDC);
                 if (dlg.LineLevel != "")
                     pspDev.LineLevel = dlg.LineLevel;
                 if (dlg.ReferenceVolt!="")
                 {
                     pspDev.ReferenceVolt =Convert.ToDouble(dlg.ReferenceVolt) ;
                 }
                 if (dlg.LineType != "")
                     pspDev.LineType = dlg.LineType;
                 if (dlg.LineStatus != "")
                     pspDev.LineStatus = dlg.LineStatus;
                 if (dlg.LineType != "")
                 {
                     WireCategory wirewire = new WireCategory();
                     wirewire.WireType = dlg.LineType;
                     WireCategory wirewire2 = new WireCategory();
                     wirewire2 = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                     if (wirewire2!=null)
                     pspDev.LineChange = (double)wirewire2.WireChange;
                 
                     //switch (dlg.LineType)
                     //{
                     //    case "2*LGJ-400":
                     //        {
                     //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                     //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.04;
                     //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                     //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.303;
                     //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                     //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.9;
                     //            pspDev.LineChange = 1690;
                     //        } break;
                     //    case "2*LGJ-300":
                     //        {
                     //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                     //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.054;
                     //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                     //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.308;
                     //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                     //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.7;
                     //            pspDev.LineChange = 1400;
                     //        } break;
                     //    case "2*LGJ-240":
                     //        {
                     //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                     //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.066;
                     //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                     //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.310;
                     //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                     //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.5;
                     //            pspDev.LineChange = 1220;
                     //        } break;
                     //    case "LGJ-400":
                     //        {
                     //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                     //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.08;
                     //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                     //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.417;
                     //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                     //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 13.2;
                     //            pspDev.LineChange = 845;
                     //        } break;


                     //}
                 }
                     Services.BaseService.Create<PSPDEV>(pspDev);
                     Topology2();
                 }
                 else
                 {
                     tlVectorControl1.Delete();
                 }

                return;
            }
            if (tlVectorControl1.Operation == ToolOperation.PolyLine && tlVectorControl1.SVGDocument.CurrentElement is Polyline && fileType != true)
            {
                tlVectorControl1.Operation = ToolOperation.Select;
                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                PointF[] t = (tlVectorControl1.SVGDocument.CurrentElement as Polyline).Pt;
                PSPDEV pspDev = new PSPDEV();
                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                pspDev.Number = -1;
                pspDev.Type = "Polyline";
                pspDev.FirstNode = -1;
                pspDev.LastNode = -1;
                frmLine dlg = new frmLine(pspDev);
                if (dlg.ShowDialog(this) == DialogResult.OK)
                {
                    XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                    PSPDEV pspName = new PSPDEV();
                    pspName.Name = dlg.Name;
                    pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspName.Type = "Polyline";
                    IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                    if (listName.Count >= 2 || (listName.Count == 1 && (listName[0] as PSPDEV).EleID != pspDev.EleID))
                    {
                        MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        tlVectorControl1.Delete();
                        return;
                    }
                    //if (element.Count > 0)
                    //{
                    //    foreach (XmlNode node in element)
                    //    {
                    //        if (node.InnerText == dlg.TextInput)
                    //        {
                    //            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //            tlVectorControl1.Delete();
                    //            return;
                    //        }
                    //    }
                    //}
                    pspDev.Name = dlg.Name;
                    pspDev.Number = -1;
                    pspDev.Type = "Polyline";
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = -1;
                    pspDev.EleID = tlVectorControl1.SVGDocument.CurrentElement.ID;
                    pspDev.SUID = Guid.NewGuid().ToString();
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.X1 = t[0].X;
                    pspDev.Y1 = t[0].Y;
                    pspDev.X2 = t[1].X;
                    pspDev.Y2 = t[1].Y;
                    pspDev.Lable = "支路";
                    if (dlg.LineLength != "")
                        pspDev.LineLength = Convert.ToDouble(dlg.LineLength);
                    
                    if (dlg.LineLevel != "")
                        pspDev.LineLevel = dlg.LineLevel;
                    if (dlg.LineType != "")
                        pspDev.LineType = dlg.LineType;
                    if (dlg.LineStatus != "")
                        pspDev.LineStatus = dlg.LineStatus;
                    if (dlg.PositiveR!="")
                    pspDev.PositiveR = Convert.ToDouble(dlg.PositiveR);
                    if (dlg.PositiveTQ!="")
                    pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                    if (dlg.PositiveES!="")
                    {
                        pspDev.SmallTQ = Convert.ToDouble(dlg.PositiveES);
                    }
                    if (dlg.ZeroR!="")
                    pspDev.ZeroR = Convert.ToDouble(dlg.ZeroR);
                    if (dlg.ZeroTQ!="")
                    pspDev.ZeroTQ = Convert.ToDouble(dlg.ZeroTQ);
                    if (dlg.ZeroES!="")
                    {
                        pspDev.BigTQ = Convert.ToDouble(dlg.ZeroES);
                    }
                    if (dlg.HuganFirst == "是")
                        pspDev.HuganFirst = 1;
                    else
                        pspDev.HuganFirst = 0;
                    if (dlg.HuganLine1!="")
                    pspDev.HuganLine1 = dlg.HuganLine1;
                    if (dlg.HuganLine2!="")
                    pspDev.HuganLine2 = dlg.HuganLine2;
                    if (dlg.HuganLine3!="")
                    pspDev.HuganLine3 = dlg.HuganLine3;
                    if (dlg.HuganLine4!="")
                    pspDev.HuganLine4 = dlg.HuganLine4;
                    if (dlg.HuganTQ1!="")
                    pspDev.HuganTQ1 = Convert.ToDouble(dlg.HuganTQ1);
                    if (dlg.HuganTQ2!="")
                    pspDev.HuganTQ2 = Convert.ToDouble(dlg.HuganTQ2);
                    if (dlg.HuganTQ3 != "")
                    pspDev.HuganTQ3 = Convert.ToDouble(dlg.HuganTQ3);
                    if (dlg.HuganTQ4 != "")
                    pspDev.HuganTQ4 = Convert.ToDouble(dlg.HuganTQ4);
                    if (dlg.HuganTQ5 != "")
                    pspDev.HuganTQ5 = Convert.ToDouble(dlg.HuganTQ5);

                    pspDev.KName = dlg.ISwitchStatus;
                    pspDev.KSwitchStatus = dlg.JSwitchStatus;
                    pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                    if (dlg.LineType != "")
                    {
                        WireCategory wirewire = new WireCategory();
                     wirewire.WireType = dlg.LineType;
                     WireCategory wirewire2 = new WireCategory();
                     wirewire2 = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                     if (wirewire2!=null)
                     pspDev.LineChange = (double)wirewire2.WireChange;
                        //switch (dlg.LineType)
                        //{
                        //    case "2*LGJ-400":
                        //        {
                        //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                        //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.04;
                        //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                        //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.303;
                        //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                        //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.9;
                        //            pspDev.LineChange = 1690;
                        //        } break;
                        //    case "2*LGJ-300":
                        //        {
                        //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                        //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.054;
                        //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                        //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.308;
                        //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                        //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.7;
                        //            pspDev.LineChange = 1400;
                        //        } break;
                        //    case "2*LGJ-240":
                        //        {
                        //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                        //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.066;
                        //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                        //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.310;
                        //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                        //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 17.5;
                        //            pspDev.LineChange = 1220;
                        //        } break;
                        //    case "LGJ-400":
                        //        {
                        //            if (pspDev.LineR == 0 && dlg.LineLength != "")
                        //                pspDev.LineR = Convert.ToDouble(dlg.LineLength) * 0.08;
                        //            if (pspDev.LineTQ == 0 && dlg.LineLength != "")
                        //                pspDev.LineTQ = Convert.ToDouble(dlg.LineLength) * 0.417;
                        //            if (pspDev.LineGNDC == 0 && dlg.LineLength != "")
                        //                pspDev.LineGNDC = Convert.ToDouble(dlg.LineLength) * 13.2;
                        //            pspDev.LineChange = 845;
                        //        } break;


                        //}
                    }
                    string tempp = dlg.LineLev;
                    int tel = tempp.Length;
                    if (tel == 1)
                        pspDev.VoltR = 0;
                    else
                    {
                       // tempp = tempp.Substring(0, tel - 2);
                        pspDev.VoltR = Convert.ToDouble(tempp);
                    }
                    if (pspDev.PositiveTQ == 0)
                        pspDev.PositiveTQ = pspDev.LineTQ;
                    Services.BaseService.Create<PSPDEV>(pspDev);
                    Topology2();
                }
                else
                {
                    tlVectorControl1.Delete();
                }

                return;
            }       
        }

        void tlVectorControl1_LeftClick(object sender, SvgElementSelectedEventArgs e)
        {
            if (tlVectorControl1.Operation == ToolOperation.Select)
            {
                fInfo.Hide();
                if (e.SvgElement.GetType().ToString() == "ItopVector.Core.Figure.Line")
                {
                    PSPDEV lineInfo = new PSPDEV();
                    lineInfo.EleID = e.SvgElement.ID;
                    lineInfo.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    PSPDEV _lineTemp = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", lineInfo);

                    if (_lineTemp != null)
                    {
                        string info = "线路名称：" + _lineTemp.Name + " 线路长度：" + _lineTemp.LineLength + "（KM）\r\n" + "导线型号：" + _lineTemp.LineType + " 电压等级：";
                        if (_lineTemp.ReferenceVolt==10.5)
                        {
                            info += "10KV";
                        }
                        if (_lineTemp.ReferenceVolt==37)
                        {
                            info += "35KV";
                        }
                        if (_lineTemp.ReferenceVolt == 115)
                        {
                            info += "110KV";
                        }
                        if (_lineTemp.ReferenceVolt == 230)
                        {
                            info += "220KV";
                        }
                        if (_lineTemp.ReferenceVolt==525)
                        {
                            info += "500KV";
                        }
                        fInfo.Info = info;
                    }

                    fInfo.Top = e.Mouse.Y;
                    fInfo.Left = e.Mouse.X;
                    fInfo.Width = (fInfo.Info.Length) * 7;
                    fInfo.Height = 50;

                    fInfo.Show();


                }
                if (e.SvgElement.GetType().ToString() == "ItopVector.Core.Figure.Polyline")
                {

                    PSPDEV lineInfo = new PSPDEV();
                    lineInfo.EleID = e.SvgElement.ID;
                    lineInfo.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    PSPDEV _lineTemp = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", lineInfo);


                    if (_lineTemp != null)
                    {
                        string Info = "线路名称：" + _lineTemp.Name + " 线路长度：" + _lineTemp.LineLength + "（KM）\r\n" + "导线型号：" + _lineTemp.LineType + " 电压等级：" ;
                        if (_lineTemp.ReferenceVolt == 10.5)
                        {
                            Info += "10KV";
                        }
                        if (_lineTemp.ReferenceVolt == 37)
                        {
                            Info += "35KV";
                        }
                        if (_lineTemp.ReferenceVolt == 115)
                        {
                            Info += "110KV";
                        }
                        if (_lineTemp.ReferenceVolt == 230)
                        {
                            Info += "220KV";
                        }
                        if (_lineTemp.ReferenceVolt == 525)
                        {
                            Info += "500KV";
                        }
                        fInfo.Info= Info;
                    }


                    fInfo.Top = e.Mouse.Y;
                    fInfo.Left = e.Mouse.X;
                    fInfo.Width = (fInfo.Info.Length) * 7;
                    fInfo.Height = 50;

                    fInfo.Show();

                }
                if (e.SvgElement.GetType().ToString() == "ItopVector.Core.Figure.Use")
                {


                    PSPDEV sub = new PSPDEV();
                    sub.EleID = e.SvgElement.ID;
                    sub.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    PSPDEV _subTemp = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", sub);
                    if (_subTemp != null)
                    {
                       string Info = "名称：" + _subTemp.Name + " 容量：" + _subTemp.Burthen + "MVA\r\n" + " 电压等级：" ;
                        if (_subTemp.ReferenceVolt == 10.5)
                        {
                            Info += "10KV";
                        }
                        if (_subTemp.ReferenceVolt == 37)
                        {
                            Info += "35KV";
                        }
                        if (_subTemp.ReferenceVolt == 115)
                        {
                            Info += "110KV";
                        }
                        if (_subTemp.ReferenceVolt == 230)
                        {
                            Info += "220KV";
                        }
                        if (_subTemp.ReferenceVolt ==525)
                        {
                            Info += "500KV";
                        }
                        fInfo.Info = Info;
                    }
                    else
                    {
                        fInfo.Info = "名称：" + " " + " 容量：0" + "MVA" + "\r\n 电压等级：0 kV ";
                    }


                    fInfo.Top = e.Mouse.Y;
                    fInfo.Left = e.Mouse.X;
                    fInfo.Width = (fInfo.Info.Length) * 7;
                    fInfo.Height = 50;
                    fInfo.Show();
                }
            }
            
            if (tlVectorControl1.Operation == ToolOperation.Text)
            {
                frmTextInput ft = new frmTextInput();
                if (ft.ShowDialog() == DialogResult.OK)
                {
                    string txt = ft.Content;
                    XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                    System.Drawing.Point point1 = tlVectorControl1.PointToView(new System.Drawing.Point(e.Mouse.X, e.Mouse.Y));
                    n1.SetAttribute("x", point1.X.ToString());
                    n1.SetAttribute("y", point1.Y.ToString());
                    n1.InnerText = txt;
                    n1.SetAttribute("layer", SvgDocument.currentLayer);
                    tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                    tlVectorControl1.Operation = ToolOperation.Select;
                }
            }
            else if (tlVectorControl1.Operation == ToolOperation.Symbol)
            {
                XmlElement temp = e.SvgElement as XmlElement;

                if (temp is Use && (temp.GetAttribute("xlink:href").Contains("Substation") || temp.GetAttribute("xlink:href").Contains("Power") || temp.GetAttribute("xlink:href").Contains("motherlinenode")))
                {
                    PSPDEV pspDev23 = new PSPDEV();
                    //pspDev.EleID = element.GetAttribute("id");
                    pspDev23.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (temp.GetAttribute("xlink:href").Contains("Substation"))
                    {
                        pspDev23.Lable = "变电站";
                    }
                    else if (temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                    {
                        pspDev23.Lable = "母线节点";
                    }
                    else if (temp.GetAttribute("xlink:href").Contains("Power"))
                    {
                        pspDev23.Lable = "电厂";
                    }
                    frmSubstation dlg = new frmSubstation(pspDev23);
                    if (dlg.ShowDialog(this) == DialogResult.OK)
                    {

                        //XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement;                
                        if (temp != null)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "Use";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }
                            if (true)
                            {

                                XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                if (temp is Polyline)
                                {
                                    double x1 = Convert.ToDouble(temp.GetAttribute("x1"));
                                    double y1 = Convert.ToDouble(temp.GetAttribute("y1"));
                                    double x2 = Convert.ToDouble(temp.GetAttribute("x2"));
                                    double y2 = Convert.ToDouble(temp.GetAttribute("y2"));

                                    tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                    n1.SetAttribute("x", Convert.ToString(x1 + (x2 - x1) / 2));
                                    n1.SetAttribute("y", Convert.ToString(y1 + (y2 - y1) / 2));

                                }
                                else
                                {
                                    n1.SetAttribute("x", temp.GetAttribute("x"));
                                    n1.SetAttribute("y", temp.GetAttribute("y"));
                                    RectangleF t = ((IGraph)temp).GetBounds();
                                    n1.SetAttribute("x", t.X.ToString());
                                    n1.SetAttribute("y", t.Y.ToString());
                                }

      
                                (n1 as Text).InnerText = dlg.Name;
                                (n1 as Text).SetAttribute("print", dlg.IsTJ ? "no" : "yes");
          
                                //n1.InnerText = dlg.Name;
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("ParentID", temp.GetAttribute("id"));
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;
                            }
                            else
                            {
                                XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                if (temp is Polyline)
                                {
                                    double x1 = Convert.ToDouble(temp.GetAttribute("x1"));
                                    double y1 = Convert.ToDouble(temp.GetAttribute("y1"));
                                    double x2 = Convert.ToDouble(temp.GetAttribute("x2"));
                                    double y2 = Convert.ToDouble(temp.GetAttribute("y2"));

                                    tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                    n1.SetAttribute("x", Convert.ToString(x1 + (x2 - x1) / 2));
                                    n1.SetAttribute("y", Convert.ToString(y1 + (y2 - y1) / 2));
                                }
                                else
                                {
                                    RectangleF t = ((IGraph)temp).GetBounds();
                                    n1.SetAttribute("x", (t.X - 8).ToString());
                                    n1.SetAttribute("y", (t.Y - 8).ToString());
                                }

                  
                                (n1 as Text).InnerText = dlg.Name;
                                (n1 as Text).SetAttribute("print", dlg.IsTJ ? "no" : "yes");
                          
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("ParentID", temp.GetAttribute("id"));
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;

                            }
                            PSPDEV pspDev = new PSPDEV();
                            if (temp is Use)
                            {
                                RectangleF t = ((IGraph)temp).GetBounds();
                                pspDev.SUID = Guid.NewGuid().ToString();
                                pspDev.EleID = temp.GetAttribute("id");
                                pspDev.Name = dlg.Name;
                                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                pspDev.X1 = t.X;
                                pspDev.Y1 = t.Y;
                                pspDev.Number = -1;
                                pspDev.FirstNode = -1;
                                pspDev.LastNode = -1;
                                pspDev.Type = "Use";
                                if (temp.GetAttribute("xlink:href").Contains("Substation"))
                                {
                                    pspDev.Lable = "变电站";
                                }
                                else if (temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                                {
                                    pspDev.Lable = "母线节点";
                                }
                                else if (temp.GetAttribute("xlink:href").Contains("Power"))
                                {
                                    pspDev.Lable = "电厂";
                                }
                                if (dlg.VoltR != "")
                                    pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                                if (dlg.Burthen != "")
                                    pspDev.Burthen = Convert.ToDecimal(dlg.Burthen);

                                //if (dlg.InPutP!="")
                                //    pspDev.InPutP = Convert.ToDouble(dlg.InPutP);
                                //if (dlg.InPutQ!="")
                                //    pspDev.InPutQ = Convert.ToDouble(dlg.InPutQ);
                                if (dlg.InPutP != "")
                                    pspDev.InPutP = Convert.ToDouble(dlg.InPutP);
                                if (dlg.InPutQ!="")
                                    pspDev.InPutQ = Convert.ToDouble(dlg.InPutQ);
                                if (dlg.OutP != "")
                                    pspDev.OutP = Convert.ToDouble(dlg.OutP);
                                if (dlg.OutQ != "")
                                    pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                                if (dlg.ReferenceVolt != "")
                                    pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                                if (dlg.NodeType == "是")
                                {
                                    pspDev.NodeType = "0";
                                }
                                else
                                {
                                    pspDev.NodeType = "1";
                                }
                                Services.BaseService.Create<PSPDEV>(pspDev);
                            }
                            else if (temp is Polyline)
                            {
                                pspDev.SUID = Guid.NewGuid().ToString();
                                pspDev.EleID = temp.GetAttribute("id");
                                pspDev.Name = dlg.Name;
                                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                pspDev.X1 = Convert.ToDouble(temp.GetAttribute("x1"));
                                pspDev.Y1 = Convert.ToDouble(temp.GetAttribute("y1"));
                                pspDev.X2 = Convert.ToDouble(temp.GetAttribute("x2"));
                                pspDev.Y2 = Convert.ToDouble(temp.GetAttribute("y2"));
                                pspDev.Number = -1;
                                pspDev.FirstNode = -1;
                                pspDev.LastNode = -1;
                                pspDev.Type = "Polyline";
                                Services.BaseService.Create<PSPDEV>(pspDev);
                            }
                        }

                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else
                {
                    if (temp is Use && (temp.GetAttribute("xlink:href").Contains("dynamotorline")) )//接地支路
                    {
                        frmFadejie dlg = new frmFadejie(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlg.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlg.ShowDialog(this) == DialogResult.OK)
                        {

                            //XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement;                
                            if (temp != null)
                            {
                                PSPDEV pspDev2 = new PSPDEV();
                                XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                                PSPDEV pspName = new PSPDEV();
                                pspName.Name = dlg.Name;
                                pspName.Type = "dynamotorline";
                                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                if (listName.Count >= 1)
                                {
                                    MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    tlVectorControl1.Delete();
                                    return;
                                }
                                if (true)
                                {
                                    tlVectorControl1.Operation = ToolOperation.Select;
                                    PSPDEV pspDev = new PSPDEV();
                                    tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                    RectangleF t = ((IGraph)temp).GetBounds();
                                    pspDev.SUID = Guid.NewGuid().ToString();
                                    pspDev.EleID = temp.GetAttribute("id");
                                    pspDev.Name = dlg.Name;
                                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    pspDev.X1 = t.X;
                                    pspDev.Y1 = t.Y;
                                    pspDev.Number = -1;
                                    pspDev.FirstNode = -1;
                                    pspDev.LastNode = 0;
                                    pspDev.Type = "dynamotorline";
                                    if (temp.GetAttribute("xlink:href").Contains("dynamotorline"))
                                    {
                                        pspDev.Lable = "发电厂支路";
                                    }
                                    else if (temp.GetAttribute("xlink:href").Contains("gndline"))
                                    {
                                        pspDev.Lable = "接地支路";
                                    }

                                    pspDev.HuganLine1 = dlg.FirstNodeName;
                                    pspDev.HuganLine3 = dlg.SwitchStatus;
                                    if (dlg.OutP != "")
                                        pspDev.OutP = Convert.ToDouble(dlg.OutP);
                                    if (dlg.OutQ != "")
                                        pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                                    if (dlg.VoltR != "")
                                        pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                                    if (dlg.VoltV != "")
                                        pspDev.VoltV = Convert.ToDouble(dlg.VoltV);
                                    if (dlg.PositiveTQ != "")
                                        pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                                    if (dlg.NegativeTQ != "")
                                        pspDev.ZeroTQ = Convert.ToDouble(dlg.NegativeTQ);
                                    //加入基准电压
                                    pspName.Name = dlg.FirstNodeName;
                                    pspName.Type = "Use";
                                    pspName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                                    //listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                    if (pspName != null)
                                    {
                                        pspDev.ReferenceVolt = Convert.ToDouble(pspName.ReferenceVolt);
                                    }
                                    if (dlg.SiN != "")
                                        pspDev.SiN = Convert.ToDouble(dlg.SiN);
                                    Services.BaseService.Create<PSPDEV>(pspDev);
                                }
                            }
                        }
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && ( temp.GetAttribute("xlink:href").Contains("gndline")))//接地支路
                    {
                        frmFadejie dlg = new frmFadejie(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlg.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlg.ShowDialog(this) == DialogResult.OK)
                        {

                            //XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement;                
                            if (temp != null)
                            {
                                PSPDEV pspDev2 = new PSPDEV();
                                XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                                PSPDEV pspName = new PSPDEV();
                                pspName.Name = dlg.Name;
                                pspName.Type = "gndline";
                                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                if (listName.Count >= 1)
                                {
                                    MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    tlVectorControl1.Delete();
                                    return;
                                }
                                if (true)
                                {
                                    tlVectorControl1.Operation = ToolOperation.Select;
                                    PSPDEV pspDev = new PSPDEV();
                                    tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                    RectangleF t = ((IGraph)temp).GetBounds();
                                    pspDev.SUID = Guid.NewGuid().ToString();
                                    pspDev.EleID = temp.GetAttribute("id");
                                    pspDev.Name = dlg.Name;
                                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    pspDev.X1 = t.X;
                                    pspDev.Y1 = t.Y;
                                    pspDev.Number = -1;
                                    pspDev.FirstNode = -1;
                                    pspDev.LastNode = 0;
                                    pspDev.Type = "gndline";
                                    if (temp.GetAttribute("xlink:href").Contains("dynamotorline"))
                                    {
                                        pspDev.Lable = "发电厂支路";
                                    }
                                    else if (temp.GetAttribute("xlink:href").Contains("gndline"))
                                    {
                                        pspDev.Lable = "接地支路";
                                    }

                                    pspDev.HuganLine1 = dlg.FirstNodeName;
                                    pspDev.HuganLine3 = dlg.SwitchStatus;
                                    if (dlg.OutP != "")
                                        pspDev.OutP = Convert.ToDouble(dlg.OutP);
                                    if (dlg.OutQ != "")
                                        pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                                    if (dlg.VoltR != "")
                                        pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                                    if (dlg.VoltV != "")
                                        pspDev.VoltV = Convert.ToDouble(dlg.VoltV);
                                    if (dlg.PositiveTQ != "")
                                        pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                                    if (dlg.NegativeTQ != "")
                                        pspDev.ZeroTQ = Convert.ToDouble(dlg.NegativeTQ);
                                    //加入基准电压
                                    pspName.Name = dlg.FirstNodeName;
                                    pspName.Type = "Use";
                                    pspName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                                    //listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                    if (pspName != null)
                                    {
                                        pspDev.ReferenceVolt = Convert.ToDouble(pspName.ReferenceVolt);
                                    }
                                    if (dlg.SiN != "")
                                        pspDev.SiN = Convert.ToDouble(dlg.SiN);
                                    Services.BaseService.Create<PSPDEV>(pspDev);
                                }
                            }
                        }
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("loadline")))
                    {
                        frmLoad dlgLoad = new frmLoad();
                        dlgLoad.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgLoad.ShowDialog(this)==DialogResult.OK)
                        {
                            if (temp != null)
                            {
                                PSPDEV pspDev2 = new PSPDEV();
                                XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                                PSPDEV pspName = new PSPDEV();
                                pspName.Name = dlgLoad.Name;
                                pspName.Type = "loadline";
                                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                if (listName.Count >= 1)
                                {
                                    MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    tlVectorControl1.Delete();
                                    return;
                                }

                                tlVectorControl1.Operation = ToolOperation.Select;
                                PSPDEV pspDev = new PSPDEV();
                                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                RectangleF t = ((IGraph)temp).GetBounds();
                                pspDev.SUID = Guid.NewGuid().ToString();
                                pspDev.EleID = temp.GetAttribute("id");
                                pspDev.Name = dlgLoad.Name;
                                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                pspDev.X1 = t.X;
                                pspDev.Y1 = t.Y;
                                pspDev.Number = -1;
                                pspDev.FirstNode = -1;
                                pspDev.LastNode = 0;
                                pspDev.Type = "loadline";
                  
                                pspDev.Lable = "负荷支路";

                                pspDev.HuganLine1 = dlgLoad.FirstNodeName;
                                if (dlgLoad.InPutP!="")
                                {
                                    pspDev.InPutP = Convert.ToDouble(dlgLoad.InPutP);
                                }
                                if (dlgLoad.InPutQ!="")
                                {
                                    pspDev.InPutQ = Convert.ToDouble(dlgLoad.InPutQ);
                                }
                                if (dlgLoad.VoltR!="")
                                {
                                    pspDev.VoltR = Convert.ToDouble(dlgLoad.VoltR);
                                }
                                                             

                                pspDev.HuganLine3 = dlgLoad.LoadSwitchState;

                                Services.BaseService.Create<PSPDEV>(pspDev);
                            }
                        } 
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("transformertwozu")))
                    {
                        frmTwoTra dlgTra = new frmTwoTra(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgTra.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgTra.ShowDialog(this)==DialogResult.OK)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgTra.Name;
                            pspName.Type = "transformertwozu";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgTra.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "transformertwozu";

                            pspDev.Lable = "二绕组变压器";
                            pspDev.HuganLine1 = dlgTra.FirstName;
                            pspDev.HuganLine2 = dlgTra.LastName;
                            pspDev.HuganLine3 = dlgTra.FirstSwitchState;
                            pspDev.HuganLine4 = dlgTra.LastSwitchState;
                            pspDev.LineLevel = dlgTra.FirstType;
                            pspDev.LineType = dlgTra.LastType;

                            if (dlgTra.K!="")
                            { 
                                pspDev.K = Convert.ToDouble(dlgTra.K);
                            }
                            if (dlgTra.PositiveR!="")
                            {
                                pspDev.PositiveR = Convert.ToDouble(dlgTra.PositiveR);
                            }
                            if (dlgTra.PositiveTQ!="")
                            {
                                pspDev.PositiveTQ = Convert.ToDouble(dlgTra.PositiveTQ);
                            }
                            if (dlgTra.ZeroR!="")
                            {
                                pspDev.ZeroR = Convert.ToDouble(dlgTra.ZeroR);
                            }
                            if (dlgTra.ZeroTQ!="")
                            {
                                pspDev.ZeroTQ = Convert.ToDouble(dlgTra.ZeroTQ);
                            }
                            if (dlgTra.NeutralNodeTQ!="")
                            {
                                pspDev.BigTQ = Convert.ToDouble(dlgTra.NeutralNodeTQ);
                            }
                            if (dlgTra.Pij != "")
                            {
                                pspDev.Pij = Convert.ToDouble(dlgTra.Pij);
                            }
                            if (dlgTra.Vij != "")
                            {
                                pspDev.Vij = Convert.ToDouble(dlgTra.Vij);
                            }
                            if (dlgTra.Vi0 != "")
                            {
                                pspDev.Vi0 = Convert.ToDouble(dlgTra.Vi0);
                            }
                            if (dlgTra.Vipos != "")
                            {
                                pspDev.Vipos = Convert.ToDouble(dlgTra.Vipos);
                            }
                            if (dlgTra.Vistep != "")
                            {
                                pspDev.Vistep = Convert.ToDouble(dlgTra.Vistep);
                            }
                            if (dlgTra.Vimax != "")
                            {
                                pspDev.Vimax = Convert.ToDouble(dlgTra.Vimax);
                            }
                            if (dlgTra.Vimin != "")
                            {
                                pspDev.Vimin = Convert.ToDouble(dlgTra.Vimin);
                            }
                            if (dlgTra.P0 != "")
                            {
                                pspDev.P0 = Convert.ToDouble(dlgTra.P0);
                            }
                            if (dlgTra.I0 != "")
                            {
                                pspDev.I0 = Convert.ToDouble(dlgTra.I0);
                            }
                            if (dlgTra.SiN != "")
                            {
                                pspDev.SiN = Convert.ToDouble(dlgTra.SiN);
                            }
                            if (dlgTra.Vj0 != "")
                            {
                                pspDev.Vj0 = Convert.ToDouble(dlgTra.Vj0);
                            }
                            if (dlgTra.Vjpos != "")
                            {
                                pspDev.Vjpos = Convert.ToDouble(dlgTra.Vjpos);
                            }
                            if (dlgTra.Vjstep != "")
                            {
                                pspDev.Vjstep = Convert.ToDouble(dlgTra.Vjstep);
                            }
                            if (dlgTra.Vjmax != "")
                            {
                                pspDev.Vjmax = Convert.ToDouble(dlgTra.Vjmax);
                            }
                            if (dlgTra.Vjmin != "")
                            {
                                pspDev.Vjmin = Convert.ToDouble(dlgTra.Vjmin);
                            }
                            if (dlgTra.Vib != "")
                            {
                                pspDev.Vib = Convert.ToDouble(dlgTra.Vib);
                            }
                            if (dlgTra.Vjb != "")
                            {
                                pspDev.Vjb = Convert.ToDouble(dlgTra.Vjb);
                            }

                            Services.BaseService.Create<PSPDEV>(pspDev);
                        } 
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("transformerthirdzu")))
                    {
                        frmThridTra dlgThridTra = new frmThridTra(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgThridTra.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgThridTra.ShowDialog(this)==DialogResult.OK)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgThridTra.Name;
                            pspName.Type = "transformerthirdzu";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgThridTra.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "transformerthirdzu";

                            pspDev.Lable = "三绕组变压器";
                            pspDev.HuganLine1 = dlgThridTra.IName;
                            pspDev.HuganLine2 = dlgThridTra.JName;
                            pspDev.HuganLine3 = dlgThridTra.ISwitchState;
                            pspDev.HuganLine4 = dlgThridTra.JSwitchState;
                            pspDev.LineLevel = dlgThridTra.IType;
                            pspDev.LineType = dlgThridTra.JType;
                            pspDev.LineStatus = dlgThridTra.KType;
                            pspDev.KName = dlgThridTra.KName;
                            pspDev.KSwitchStatus = dlgThridTra.KSwitchState;

                            if (dlgThridTra.IK!="")
                            {
                                pspDev.K = Convert.ToDouble(dlgThridTra.IK);
                            }
                            if (dlgThridTra.JK!="")
                            {
                                pspDev.G = Convert.ToDouble(dlgThridTra.JK);
                            }
                            if (dlgThridTra.KK!="")
                            {
                                pspDev.BigP = Convert.ToDouble(dlgThridTra.KK);
                            }
                            if (dlgThridTra.IR!="")
                            {
                                pspDev.HuganTQ1 = Convert.ToDouble(dlgThridTra.IR);
                            }
                            if (dlgThridTra.JR!="")
                            {
                                pspDev.HuganTQ2 = Convert.ToDouble(dlgThridTra.JR);
                            }
                            if (dlgThridTra.KR!="")
                            {
                                pspDev.HuganTQ3 = Convert.ToDouble(dlgThridTra.KR);
                            }
                            if (dlgThridTra.ITQ!="")
                            {
                                pspDev.HuganTQ4 = Convert.ToDouble(dlgThridTra.ITQ);
                            }
                            if (dlgThridTra.JTQ!="")
                            {
                                pspDev.HuganTQ5 = Convert.ToDouble(dlgThridTra.JTQ);
                            }
                            if (dlgThridTra.KTQ!="")
                            {
                                pspDev.SmallTQ = Convert.ToDouble(dlgThridTra.KTQ);
                            }
                            if (dlgThridTra.ZeroTQ!="")
                            {
                                pspDev.ZeroTQ = Convert.ToDouble(dlgThridTra.ZeroTQ);
                            }
                            if (dlgThridTra.NeutralNodeTQ!="")
                            {
                                pspDev.BigTQ = Convert.ToDouble(dlgThridTra.NeutralNodeTQ);
                            }
                            if (dlgThridTra.P0 != "")
                            {
                                pspDev.P0 = Convert.ToDouble(dlgThridTra.P0);
                            }
                            if (dlgThridTra.I0 != "")
                            {
                                pspDev.I0 = Convert.ToDouble(dlgThridTra.I0);
                            }
                            if (dlgThridTra.SiN != "")
                            {
                                pspDev.SiN = Convert.ToDouble(dlgThridTra.SiN);
                            }
                            if (dlgThridTra.Vi0 != "")
                            {
                                pspDev.Vi0 = Convert.ToDouble(dlgThridTra.Vi0);
                            }
                            if (dlgThridTra.Pij != "")
                            {
                                pspDev.Pij = Convert.ToDouble(dlgThridTra.Pij);
                            }
                            if (dlgThridTra.Vij != "")
                            {
                                pspDev.Vij = Convert.ToDouble(dlgThridTra.Vij);
                            }
                            if (dlgThridTra.Vipos != "")
                            {
                                pspDev.Vipos = Convert.ToDouble(dlgThridTra.Vipos);
                            }
                            if (dlgThridTra.Vistep != "")
                            {
                                pspDev.Vistep = Convert.ToDouble(dlgThridTra.Vistep);
                            }
                            if (dlgThridTra.Vimax != "")
                            {
                                pspDev.Vimax = Convert.ToDouble(dlgThridTra.Vimax);
                            }
                            if (dlgThridTra.Vimin != "")
                            {
                                pspDev.Vimin = Convert.ToDouble(dlgThridTra.Vimin);
                            }
                            if (dlgThridTra.SjN != "")
                            {
                                pspDev.SjN = Convert.ToDouble(dlgThridTra.SjN);
                            }
                            if (dlgThridTra.Vj0 != "")
                            {
                                pspDev.Vj0 = Convert.ToDouble(dlgThridTra.Vj0);
                            }
                            if (dlgThridTra.Pjk != "")
                            {
                                pspDev.Pjk = Convert.ToDouble(dlgThridTra.Pjk);
                            }
                            if (dlgThridTra.Vjk != "")
                            {
                                pspDev.Vjk = Convert.ToDouble(dlgThridTra.Vjk);
                            }
                            if (dlgThridTra.Vjpos != "")
                            {
                                pspDev.Vjpos = Convert.ToDouble(dlgThridTra.Vjpos);
                            }
                            if (dlgThridTra.Vjstep != "")
                            {
                                pspDev.Vjstep = Convert.ToDouble(dlgThridTra.Vjstep);
                            }
                            if (dlgThridTra.Vjmax != "")
                            {
                                pspDev.Vjmax = Convert.ToDouble(dlgThridTra.Vjmax);
                            }
                            if (dlgThridTra.Vjmin != "")
                            {
                                pspDev.Vjmin = Convert.ToDouble(dlgThridTra.Vjmin);
                            }
                            if (dlgThridTra.SkN != "")
                            {
                                pspDev.SkN = Convert.ToDouble(dlgThridTra.SkN);
                            }
                            if (dlgThridTra.Vk0 != "")
                            {
                                pspDev.Vk0 = Convert.ToDouble(dlgThridTra.Vk0);
                            }
                            if (dlgThridTra.Pik != "")
                            {
                                pspDev.Pik = Convert.ToDouble(dlgThridTra.Pik);
                            }
                            if (dlgThridTra.Vik != "")
                            {
                                pspDev.Vik = Convert.ToDouble(dlgThridTra.Vik);
                            }
                            if (dlgThridTra.Vkpos != "")
                            {
                                pspDev.Vkpos = Convert.ToDouble(dlgThridTra.Vkpos);
                            }
                            if (dlgThridTra.Vkstep != "")
                            {
                                pspDev.Vkstep = Convert.ToDouble(dlgThridTra.Vkstep);
                            }
                            if (dlgThridTra.Vkmax != "")
                            {
                                pspDev.Vkmax = Convert.ToDouble(dlgThridTra.Vkmax);
                            }
                            if (dlgThridTra.Vkmin != "")
                            {
                                pspDev.Vkmin = Convert.ToDouble(dlgThridTra.Vkmin);
                            }
                            if (dlgThridTra.Vib != "")
                            {
                                pspDev.Vib = Convert.ToDouble(dlgThridTra.Vib);
                            }
                            if (dlgThridTra.Vjb != "")
                            {
                                pspDev.Vjb = Convert.ToDouble(dlgThridTra.Vjb);
                            }
                            if (dlgThridTra.Vkb != "")
                            {
                                pspDev.Vkb = Convert.ToDouble(dlgThridTra.Vkb);
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                        } 
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("串联电容电抗器")))
                    {
                        frmCapacity dlgCapacity = new frmCapacity(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgCapacity.SetEnable(true);
                        dlgCapacity.Text = "串联电容电抗器";
                        dlgCapacity.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgCapacity.ShowDialog(this)==DialogResult.OK)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgCapacity.Name;
                            pspName.Type = "串联电容电抗器";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgCapacity.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "串联电容电抗器";

                            pspDev.Lable = dlgCapacity.Lable;

                            if (dlgCapacity.PositiveTQ!="")
                            {
                                pspDev.PositiveTQ = Convert.ToDouble(dlgCapacity.PositiveTQ);
                            }
                            pspDev.HuganLine1 = dlgCapacity.FirstNodeName;
                           // pspDev.HuganLine2 = dlgCapacity.LastNodeName;
                            if (dlgCapacity.VoltR != "")
                            {
                                pspDev.VoltR = Convert.ToDouble(dlgCapacity.VoltR);
                            }
                            if (dlgCapacity.ReferenceVolt != "")
                            {
                                pspDev.ReferenceVolt = Convert.ToDouble(dlgCapacity.ReferenceVolt);
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                        } 
                        else
                        {
                            tlVectorControl1.Delete();
                        }

                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("并联电容电抗器")))
                    {
                        frmCapacity dlgCapacity = new frmCapacity(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgCapacity.SetEnable(false);
                        dlgCapacity.Text = "并联电容电抗器";
                        dlgCapacity.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgCapacity.ShowDialog(this) == DialogResult.OK)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgCapacity.Name;
                            pspName.Type = "并联电容电抗器";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgCapacity.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "并联电容电抗器";

                            pspDev.Lable = dlgCapacity.Lable;

                            if (dlgCapacity.PositiveTQ != "")
                            {
                                pspDev.PositiveTQ = Convert.ToDouble(dlgCapacity.PositiveTQ);
                            }
                            pspDev.HuganLine1 = dlgCapacity.FirstNodeName;
                           // pspDev.HuganLine2 = dlgCapacity.LastNodeName;
                            if (dlgCapacity.VoltR != "")
                            {
                                pspDev.VoltR = Convert.ToDouble(dlgCapacity.VoltR);
                            }
                            if (dlgCapacity.ReferenceVolt != "")
                            {
                                pspDev.ReferenceVolt = Convert.ToDouble(dlgCapacity.ReferenceVolt);
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                        }
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("1/2母联开关")))
                    {
                        frmMuLian dlgmulian = new frmMuLian(tlVectorControl1.SVGDocument.SvgdataUid);

                        dlgmulian.Text = "1/2母联开关";
                        dlgmulian.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgmulian.ShowDialog(this) == DialogResult.OK)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgmulian.Name;
                            pspName.Type = "1/2母联开关";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgmulian.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "1/2母联开关";

                            pspDev.Lable = "1/2母联开关";

                     
                            pspDev.HuganLine1 = dlgmulian.FirstNodeName;
                            pspDev.HuganLine2 = dlgmulian.LastNodeName;
                            pspDev.HuganLine3 = dlgmulian.SwitchStatus;

                            Services.BaseService.Create<PSPDEV>(pspDev);
                        }
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("2/3母联开关")))
                    {
                        frmMuLian2 dlgmulian = new frmMuLian2(tlVectorControl1.SVGDocument.SvgdataUid);

                        dlgmulian.Text = "2/3母联开关";
                        dlgmulian.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        if (dlgmulian.ShowDialog(this) == DialogResult.OK)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgmulian.Name;
                            pspName.Type = "2/3母联开关";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgmulian.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "2/3母联开关";

                            pspDev.Lable = "2/3母联开关";


                            pspDev.HuganLine1 = dlgmulian.INodeName;
                            pspDev.HuganLine2 = dlgmulian.JNodeName;
                            pspDev.HuganLine3 = dlgmulian.ILineName;
                            pspDev.HuganLine4 = dlgmulian.JLineName;
                            pspDev.KName = dlgmulian.ILoadName;
                            pspDev.KSwitchStatus = dlgmulian.JLoadName;
                            pspDev.LineLevel = dlgmulian.SwitchStatus1;
                            pspDev.LineType = dlgmulian.SwitchStatus2;
                            pspDev.LineStatus = dlgmulian.SwitchStatus3;

                            Services.BaseService.Create<PSPDEV>(pspDev);
                        }
                        else
                        {
                            tlVectorControl1.Delete();
                        }
                    }
                    //temp.RemoveAll();
                }
            }

        }

        void tlVectorControl1_AddElement(object sender, AddSvgElementEventArgs e)
        {
            //MessageBox.Show(e.SvgElement.ID);
            XmlElement temp = e.SvgElement as XmlElement;
            if (temp is Polyline)
            {
                XmlNodeList list2 = tlVectorControl1.SVGDocument.SelectNodes("svg/polyline");
                foreach (XmlNode node in list2)
                {
                    PSPDEV dev = new PSPDEV();
                    //(node as Text).InnerText = dev.Name;
                    //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                    PSPDEV dlg11 = new PSPDEV();
                    XmlElement element = node as XmlElement;
                    dev.EleID = element.GetAttribute("id");
                    PSPDEV psp = new PSPDEV();
                    dev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    dlg11 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                    if (dlg11 == null)
                    {
                        SvgElement element2 = node as SvgElement;
                        tlVectorControl1.SVGDocument.CurrentElement = element2;
                        tlVectorControl1.Delete();
                    }
                }
            }

            if (temp is Use && (temp.GetAttribute("xlink:href").Contains("Substation") || temp.GetAttribute("xlink:href").Contains("Power") || temp.GetAttribute("xlink:href").Contains("motherlinenode")))
            {
                PSPDEV pspDev22 = new PSPDEV();
                //pspDev.EleID = element.GetAttribute("id");
                str_power = getPower(temp.GetAttribute("xlink:href"));
                pspDev22.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                if (temp.GetAttribute("xlink:href").Contains("Substation"))
                {
                    pspDev22.Lable = "变电站";

                }
                else if (temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                {
                    pspDev22.Lable = "母线节点";
                }
                else if (temp.GetAttribute("xlink:href").Contains("Power"))
                {
                    pspDev22.Lable = "电厂";
                }
                frmSubstation dlg = new frmSubstation(pspDev22);
                dlg.Str_Power = str_power;
                
                if(tlVectorControl1.SVGDocument.FileName.Length>5){
                    dlg.Str_year = tlVectorControl1.SVGDocument.FileName.Substring(0, 4); 
                }


                if (dlg.ShowDialog(this) == DialogResult.OK)
                {

                    //XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement;                
                    if (temp != null)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlg.Name;
                        pspName.Type = "Use";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1 )
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        
                        //if (pspName.Name == "")
                        //{
                        //    MessageBox.Show("名称不能为空!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        //    tlVectorControl1.Delete();
                        //    return;
                        //}
                        if (true)
                        {

                            XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                            if (temp is Polyline)
                            {
                                double x1 = Convert.ToDouble(temp.GetAttribute("x1"));
                                double y1 = Convert.ToDouble(temp.GetAttribute("y1"));
                                double x2 = Convert.ToDouble(temp.GetAttribute("x2"));
                                double y2 = Convert.ToDouble(temp.GetAttribute("y2"));

                                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                n1.SetAttribute("x", Convert.ToString(x1 + (x2 - x1) / 2));
                                n1.SetAttribute("y", Convert.ToString(y1 + (y2 - y1) / 2));

                            }
                            else
                            {
                                n1.SetAttribute("x", temp.GetAttribute("x"));
                                n1.SetAttribute("y", temp.GetAttribute("y"));
                                RectangleF t = ((IGraph)temp).GetBounds();
                                n1.SetAttribute("x", (t.X-10).ToString());
                                n1.SetAttribute("y", (t.Y-10).ToString());
                            }
                            if (dlg.EleID!="")
                            {
                                temp.SetAttribute("id", dlg.EleID);
                            }

                            n1.InnerText = dlg.Name;
                 
                            (n1).SetAttribute("print", dlg.IsTJ ? "no" : "yes");
                          
                            n1.SetAttribute("layer", SvgDocument.currentLayer);
                            n1.SetAttribute("ParentID", temp.GetAttribute("id"));
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            tlVectorControl1.Operation = ToolOperation.Select;
                        }
                        else
                        {
                            XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                            if (temp is Polyline)
                            {
                                double x1 = Convert.ToDouble(temp.GetAttribute("x1"));
                                double y1 = Convert.ToDouble(temp.GetAttribute("y1"));
                                double x2 = Convert.ToDouble(temp.GetAttribute("x2"));
                                double y2 = Convert.ToDouble(temp.GetAttribute("y2"));

                                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                n1.SetAttribute("x", Convert.ToString(x1 + (x2 - x1) / 2));
                                n1.SetAttribute("y", Convert.ToString(y1 + (y2 - y1) / 2));
                            }
                            else
                            {
                                RectangleF t = ((IGraph)temp).GetBounds();
                                n1.SetAttribute("x", (t.X - 10).ToString());
                                n1.SetAttribute("y", (t.Y - 10).ToString());
                            }

                            n1.InnerText = dlg.Name;                         
                            n1.SetAttribute("print", dlg.IsTJ ? "no" : "yes");
                            n1.SetAttribute("layer", SvgDocument.currentLayer);
                            n1.SetAttribute("ParentID", temp.GetAttribute("id"));
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            tlVectorControl1.Operation = ToolOperation.Select;

                        }
                        PSPDEV pspDev = new PSPDEV();
                        if (temp is Use)
                        {
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlg.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = -1;
                            pspDev.Type = "Use";
                            if (temp.GetAttribute("xlink:href").Contains("Substation"))
                            {
                                pspDev.Lable = "变电站";
                                temp.SetAttribute("print", dlg.IsTJ ? "no" : "yes");
                            }
                            else if (temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                            {
                                pspDev.Lable = "母线节点";
                            }
                            else if (temp.GetAttribute("xlink:href").Contains("Power"))
                            {
                                pspDev.Lable = "电厂";
                            }
                            if (dlg.VoltR!="")
                            pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                            if (dlg.Burthen!="")
                            pspDev.Burthen = Convert.ToDecimal(dlg.Burthen);

                        //if ((dlg.InPutP == ""))
                        //{
                        //    PSPDEV powerfactor = new PSPDEV();
                        //    powerfactor.Type = "Power";
                        //    powerfactor.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        //    powerfactor = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", powerfactor);
                        //    pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                        //    pspDev.Burthen = Convert.ToDecimal(dlg.Burthen);

                        //    //if (powerfactor!=null && (Convert.ToDecimal(dlg.Change)==2))
                        //    pspDev.InPutP = Convert.ToDouble(dlg.Burthen) * powerfactor.BigP;
                        //}

                            //if (pspDev.InPutP == 0 && dlg.Burthen!="")
                            //    pspDev.InPutP = Convert.ToDouble(dlg.Burthen) * 0.65;
                            if (dlg.InPutP!="")
                            pspDev.InPutP = Convert.ToDouble(dlg.InPutP);
                            if (dlg.InPutQ!="")
                                pspDev.InPutQ = Convert.ToDouble(dlg.InPutQ);
                            if (dlg.OutP != "")
                                pspDev.OutP = Convert.ToDouble(dlg.OutP);
                            if (dlg.OutQ != "")
                                pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                            if (dlg.ReferenceVolt != "")
                                pspDev.ReferenceVolt = Convert.ToDouble(dlg.ReferenceVolt);
                            if (dlg.NodeType == "是")
                            {
                                pspDev.NodeType = "0";
                            }
                            else
                            {
                                pspDev.NodeType = "1";
                            }
                            Services.BaseService.Create<PSPDEV>(pspDev);
                        }
                        else if (temp is Polyline)
                        {
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlg.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = Convert.ToDouble(temp.GetAttribute("x1"));
                            pspDev.Y1 = Convert.ToDouble(temp.GetAttribute("y1"));
                            pspDev.X2 = Convert.ToDouble(temp.GetAttribute("x2"));
                            pspDev.Y2 = Convert.ToDouble(temp.GetAttribute("y2"));
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = -1;
                            pspDev.Type = "Polyline";
                            Services.BaseService.Create<PSPDEV>(pspDev);
                        }
                    }
                    //*************
                    string fyear=tlVectorControl1.SVGDocument.FileName.Substring(0,4);
                    LayerGrade lag=new LayerGrade();
                    lag.Name=fyear+"%";
                    IList laglist= Services.BaseService.GetList("SelectLayerGradeByYear",lag);
                    string power = getPower(temp.GetAttribute("xlink:href"));
                    if (laglist.Count > 0)
                    {
                        LineInfo line = new LineInfo();
                        line.LineName = " Voltage='" + power + "' and length<>'' and LayerID in (select SUID from SVG_LAYER where yearid='" + ((LayerGrade)laglist[0]).SUID + "') and ObligateField6 ='" + dlg.Name + "' order by LineName";
                        IList linList = Services.BaseService.GetList("SelectLineInfoByWhere", line);
                        for (int j = 0; j < linList.Count; j++)
                        {
                            if (((LineInfo)linList[j]).ObligateField7 != "")
                            {
                                PSPDEV p1 = new PSPDEV();
                                p1.SvgUID=tlVectorControl1.SVGDocument.SvgdataUid;
                                p1.Name = ((LineInfo)linList[j]).ObligateField6;
                                p1.Type = "Use";
                                IList p1list= Services.BaseService.GetList("SelectPSPDEVByName", p1);
                                PSPDEV p2 = new PSPDEV();
                                p2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                p2.Name = ((LineInfo)linList[j]).ObligateField7;
                                p2.Type = "Use";
                                IList p2list = Services.BaseService.GetList("SelectPSPDEVByName", p2);
                                if (p1list.Count > 0 && p2list.Count > 0)
                                {
                                    PointF TempPoint = TLMath.getUseOffset(temp.GetAttribute("xlink:href"));
                                    PointF[] ptt = new PointF[] { new PointF(((Use)temp).X + TempPoint.X, ((Use)temp).Y + TempPoint.Y) };
                                    Transf tran = (temp as Graph).Transform;
                                    tran.Matrix.TransformPoints(ptt);
                                    XmlNode n2 = tlVectorControl1.SVGDocument.SelectSingleNode("//*[@id='" + ((PSPDEV)p2list[0]).EleID + "']");
                                    PointF TempPoint2 = TLMath.getUseOffset(((XmlElement)n2).GetAttribute("xlink:href"));
                                    PointF[] ptt2 = new PointF[] { new PointF(((Use)n2).X + TempPoint2.X, ((Use)n2).Y + TempPoint2.Y) };
                                    Transf tran2 = (n2 as Graph).Transform;
                                    tran2.Matrix.TransformPoints(ptt2);
                                    XmlElement line1 = tlVectorControl1.SVGDocument.CreateElement("polyline") as Polyline;
                                    line1.SetAttribute("stroke", "#000000");
                                    line1.SetAttribute("layer", ((Layer)tlVectorControl1.SVGDocument.getLayerList()[0]).ID);
                                    line1.SetAttribute("points",ptt[0].X.ToString()+" "+ptt[0].Y.ToString()+","+ptt2[0].X.ToString()+" "+ptt2[0].Y.ToString());
                                    line1.SetAttribute("FirstNode", ((PSPDEV)p1list[0]).EleID);
                                    line1.SetAttribute("LastNode", ((PSPDEV)p2list[0]).EleID);
                                    XmlNode fn= tlVectorControl1.SVGDocument.RootElement.AppendChild(line1);
                                    PSPDEV pspDev = new PSPDEV();
                                    pspDev.SUID = Guid.NewGuid().ToString();
                                    pspDev.EleID = ((Polyline)fn).ID;
                                    pspDev.Name = ((LineInfo)linList[j]).LineName;
                                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    pspDev.X1 = ptt[0].X;
                                    pspDev.Y1 = ptt[0].Y;
                                    pspDev.X2 = ptt2[0].X;
                                    pspDev.Y2 = ptt2[0].Y;
                                    pspDev.LineLength = Convert.ToDouble(((LineInfo)linList[j]).Length);
                                    pspDev.Number = -1;
                                    pspDev.FirstNode = -1;
                                    pspDev.LastNode = -1;
                                    pspDev.Type = "Polyline";
                                    pspDev.LineType = ((LineInfo)linList[j]).LineType;
                                    pspDev.VoltR = Convert.ToDouble(((LineInfo)linList[j]).Voltage);
                                    Services.BaseService.Create<PSPDEV>(pspDev);
                                    tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;
                                    tlVectorControl1.ChangeLevel(LevelType.Top);
                                }
                            }
                        }
                    }
                    if (laglist.Count > 0)
                    {
                        LineInfo line = new LineInfo();
                        line.LineName = " Voltage='" + power + "' and length<>'' and LayerID in (select SUID from SVG_LAYER where yearid='" + ((LayerGrade)laglist[0]).SUID + "') and ObligateField7 ='" + dlg.Name + "' order by LineName";
                        IList linList = Services.BaseService.GetList("SelectLineInfoByWhere", line);
                        for (int j = 0; j < linList.Count; j++)
                        {
                            if (((LineInfo)linList[j]).ObligateField6 != "")
                            {
                                PSPDEV p1 = new PSPDEV();
                                p1.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                p1.Name = ((LineInfo)linList[j]).ObligateField6;
                                p1.Type = "Use";
                                IList p1list = Services.BaseService.GetList("SelectPSPDEVByName", p1);
                                PSPDEV p2 = new PSPDEV();
                                p2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                p2.Name = ((LineInfo)linList[j]).ObligateField7;
                                p2.Type = "Use";
                                IList p2list = Services.BaseService.GetList("SelectPSPDEVByName", p2);
                                if (p1list.Count > 0 && p2list.Count > 0)
                                {
                                    PointF TempPoint = TLMath.getUseOffset(temp.GetAttribute("xlink:href"));
                                    PointF[] ptt = new PointF[] { new PointF(((Use)temp).X + TempPoint.X, ((Use)temp).Y + TempPoint.Y) };
                                    Transf tran = (temp as Graph).Transform;
                                    tran.Matrix.TransformPoints(ptt);
                                    XmlNode n2 = tlVectorControl1.SVGDocument.SelectSingleNode("//*[@id='" + ((PSPDEV)p1list[0]).EleID + "']");
                                    PointF TempPoint2 = TLMath.getUseOffset(((XmlElement)n2).GetAttribute("xlink:href"));
                                    PointF[] ptt2 = new PointF[] { new PointF(((Use)n2).X + TempPoint2.X, ((Use)n2).Y + TempPoint2.Y) };
                                    Transf tran2 = (n2 as Graph).Transform;
                                    tran2.Matrix.TransformPoints(ptt2);
                                    XmlElement line1 = tlVectorControl1.SVGDocument.CreateElement("polyline") as Polyline;
                                    line1.SetAttribute("stroke", "#000000");
                                    line1.SetAttribute("layer", ((Layer)tlVectorControl1.SVGDocument.getLayerList()[0]).ID);
                                    line1.SetAttribute("points", ptt2[0].X.ToString() + " " + ptt2[0].Y.ToString() + "," + ptt[0].X.ToString() + " " + ptt[0].Y.ToString());
                                    line1.SetAttribute("FirstNode", ((PSPDEV)p2list[0]).EleID);
                                    line1.SetAttribute("LastNode", ((PSPDEV)p1list[0]).EleID);
                                    XmlNode fn = tlVectorControl1.SVGDocument.RootElement.AppendChild(line1);
                                    PSPDEV pspDev = new PSPDEV();
                                    pspDev.SUID = Guid.NewGuid().ToString();
                                    pspDev.EleID = ((Polyline)fn).ID;
                                    pspDev.Name = ((LineInfo)linList[j]).LineName;
                                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    pspDev.X1 = ptt2[0].X;
                                    pspDev.Y1 = ptt2[0].Y;
                                    pspDev.X2 = ptt[0].X;
                                    pspDev.Y2 = ptt[0].Y;
                                    pspDev.LineLength = Convert.ToDouble(((LineInfo)linList[j]).Length);
                                    pspDev.Number = -1;
                                    pspDev.FirstNode = -1;
                                    pspDev.LastNode = -1;
                                    pspDev.Type = "Polyline";
                                    pspDev.LineType = ((LineInfo)linList[j]).LineType;
                                    pspDev.VoltR = Convert.ToDouble(((LineInfo)linList[j]).Voltage);
                                    Services.BaseService.Create<PSPDEV>(pspDev);
                                    tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;
                                    tlVectorControl1.ChangeLevel(LevelType.Top);
                                }
                            }
                        }

                    }
                    tlVectorControl1.SVGDocument.CurrentElement = temp as SvgElement;
                    tlVectorControl1.ChangeLevel(LevelType.Top);

                }
                else
                {
                    //tlVectorControl1.Delete();
                    //tlVectorControl1.Dispose();
                    //tlVectorControl1.Undo();
                    XmlNodeList list2 = tlVectorControl1.SVGDocument.SelectNodes("svg/use");
                    foreach (XmlNode node in list2)
                    {
                        PSPDEV dev = new PSPDEV();
                        //(node as Text).InnerText = dev.Name;
                        //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                        PSPDEV dlg11 = new PSPDEV();
                        XmlElement element = node as XmlElement;
                        dev.EleID = element.GetAttribute("id");
                        PSPDEV psp = new PSPDEV();
                        dev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        dlg11 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                        if (dlg11 == null)
                        {
                            SvgElement element2 = node as SvgElement;
                            tlVectorControl1.SVGDocument.CurrentElement = element2;
                            tlVectorControl1.Delete();
                        }
                    }

                }
            }
            else
            {
                if (temp is Use && (temp.GetAttribute("xlink:href").Contains("dynamotorline")))//接地支路
                {
                    frmFadejie dlg = new frmFadejie(tlVectorControl1.SVGDocument.SvgdataUid);
                    dlg.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlg.ShowDialog(this) == DialogResult.OK)
                    {

                        //XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement;                
                        if (temp != null)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "dynamotorline";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }
                            if (true)
                            {
                                tlVectorControl1.Operation = ToolOperation.Select;
                                PSPDEV pspDev = new PSPDEV();
                                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                RectangleF t = ((IGraph)temp).GetBounds();
                                pspDev.SUID = Guid.NewGuid().ToString();
                                pspDev.EleID = temp.GetAttribute("id");
                                pspDev.Name = dlg.Name;
                                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                pspDev.X1 = t.X;
                                pspDev.Y1 = t.Y;
                                pspDev.Number = -1;
                                pspDev.FirstNode = -1;
                                pspDev.LastNode = 0;
                                pspDev.Type = "dynamotorline";
                                if (temp.GetAttribute("xlink:href").Contains("dynamotorline"))
                                {
                                    pspDev.Lable = "发电厂支路";
                                }
                                else if (temp.GetAttribute("xlink:href").Contains("gndline"))
                                {
                                    pspDev.Lable = "接地支路";
                                }

                                pspDev.HuganLine1 = dlg.FirstNodeName;
                                pspDev.HuganLine3 = dlg.SwitchStatus;
                                if (dlg.OutP != "")
                                    pspDev.OutP = Convert.ToDouble(dlg.OutP);
                                if (dlg.OutQ != "")
                                    pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                                if (dlg.VoltR != "")
                                    pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                                if (dlg.VoltV != "")
                                    pspDev.VoltV = Convert.ToDouble(dlg.VoltV);
                                if (dlg.PositiveTQ != "")
                                    pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                                if (dlg.NegativeTQ != "")
                                    pspDev.ZeroTQ = Convert.ToDouble(dlg.NegativeTQ);
                                //加入基准电压
                                pspName.Name = dlg.FirstNodeName;
                                pspName.Type = "Use";
                                pspName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                                //listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                if (pspName != null)
                                {
                                    pspDev.ReferenceVolt = Convert.ToDouble(pspName.ReferenceVolt);
                                }
                                if (dlg.SiN != "")
                                    pspDev.SiN = Convert.ToDouble(dlg.SiN);
                                Services.BaseService.Create<PSPDEV>(pspDev);
                            }
                        }
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("gndline")))//接地支路
                {
                    frmFadejie dlg = new frmFadejie(tlVectorControl1.SVGDocument.SvgdataUid);
                    dlg.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlg.ShowDialog(this) == DialogResult.OK)
                    {

                        //XmlElement temp = tlVectorControl1.SVGDocument.CurrentElement;                
                        if (temp != null)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlg.Name;
                            pspName.Type = "gndline";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }
                            if (true)
                            {
                                tlVectorControl1.Operation = ToolOperation.Select;
                                PSPDEV pspDev = new PSPDEV();
                                tlVectorControl1.ChangeLevel(LevelType.Bottom);
                                RectangleF t = ((IGraph)temp).GetBounds();
                                pspDev.SUID = Guid.NewGuid().ToString();
                                pspDev.EleID = temp.GetAttribute("id");
                                pspDev.Name = dlg.Name;
                                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                pspDev.X1 = t.X;
                                pspDev.Y1 = t.Y;
                                pspDev.Number = -1;
                                pspDev.FirstNode = -1;
                                pspDev.LastNode = 0;
                                pspDev.Type = "gndline";
                                if (temp.GetAttribute("xlink:href").Contains("dynamotorline"))
                                {
                                    pspDev.Lable = "发电厂支路";
                                }
                                else if (temp.GetAttribute("xlink:href").Contains("gndline"))
                                {
                                    pspDev.Lable = "接地支路";
                                }

                                pspDev.HuganLine1 = dlg.FirstNodeName;
                                pspDev.HuganLine3 = dlg.SwitchStatus;
                                if (dlg.OutP != "")
                                    pspDev.OutP = Convert.ToDouble(dlg.OutP);
                                if (dlg.OutQ != "")
                                    pspDev.OutQ = Convert.ToDouble(dlg.OutQ);
                                if (dlg.VoltR != "")
                                    pspDev.VoltR = Convert.ToDouble(dlg.VoltR);
                                if (dlg.VoltV != "")
                                    pspDev.VoltV = Convert.ToDouble(dlg.VoltV);
                                if (dlg.PositiveTQ != "")
                                    pspDev.PositiveTQ = Convert.ToDouble(dlg.PositiveTQ);
                                if (dlg.NegativeTQ != "")
                                    pspDev.ZeroTQ = Convert.ToDouble(dlg.NegativeTQ);
                                //加入基准电压
                                pspName.Name = dlg.FirstNodeName;
                                pspName.Type = "Use";
                                pspName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                                //listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                                if (pspName!= null)
                                {
                                    pspDev.ReferenceVolt = Convert.ToDouble(pspName.ReferenceVolt);
                                }
                                if (dlg.SiN != "")
                                    pspDev.SiN = Convert.ToDouble(dlg.SiN);
                                Services.BaseService.Create<PSPDEV>(pspDev);
                            }
                        }
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("loadline")))
                {
                    frmLoad dlgLoad = new frmLoad(tlVectorControl1.SVGDocument.SvgdataUid);
                    //dlgLoad.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    
                    if (dlgLoad.ShowDialog(this) == DialogResult.OK)
                    {
                        if (temp != null)
                        {
                            PSPDEV pspDev2 = new PSPDEV();
                            XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                            PSPDEV pspName = new PSPDEV();
                            pspName.Name = dlgLoad.Name;
                            pspName.Type = "loadline";
                            pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                            if (listName.Count >= 1)
                            {
                                MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                tlVectorControl1.Delete();
                                return;
                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            PSPDEV pspDev = new PSPDEV();
                            tlVectorControl1.ChangeLevel(LevelType.Bottom);
                            RectangleF t = ((IGraph)temp).GetBounds();
                            pspDev.SUID = Guid.NewGuid().ToString();
                            pspDev.EleID = temp.GetAttribute("id");
                            pspDev.Name = dlgLoad.Name;
                            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev.X1 = t.X;
                            pspDev.Y1 = t.Y;
                            pspDev.Number = -1;
                            pspDev.FirstNode = -1;
                            pspDev.LastNode = 0;
                            pspDev.Type = "loadline";

                            pspDev.Lable = "负荷支路";

                            pspDev.HuganLine1 = dlgLoad.FirstNodeName;
                            if (dlgLoad.InPutP != "")
                            {
                                pspDev.InPutP = Convert.ToDouble(dlgLoad.InPutP);
                            }
                            if (dlgLoad.InPutQ != "")
                            {
                                pspDev.InPutQ = Convert.ToDouble(dlgLoad.InPutQ);
                            }
                            if (dlgLoad.VoltR != "")
                            {
                                pspDev.VoltR = Convert.ToDouble(dlgLoad.VoltR);
                            }


                            pspDev.HuganLine3 = dlgLoad.LoadSwitchState;

                            Services.BaseService.Create<PSPDEV>(pspDev);
                        }
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("transformertwozu")))
                {
                    frmTwoTra dlgTra = new frmTwoTra(tlVectorControl1.SVGDocument.SvgdataUid);
                    dlgTra.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlgTra.ShowDialog(this) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlgTra.Name;
                        pspName.Type = "transformertwozu";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1)
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        tlVectorControl1.Operation = ToolOperation.Select;
                        PSPDEV pspDev = new PSPDEV();
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        RectangleF t = ((IGraph)temp).GetBounds();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = temp.GetAttribute("id");
                        pspDev.Name = dlgTra.Name;
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.X1 = t.X;
                        pspDev.Y1 = t.Y;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = 0;
                        pspDev.Type = "transformertwozu";

                        pspDev.Lable = "二绕组变压器";
                        pspDev.HuganLine1 = dlgTra.FirstName;
                        pspDev.HuganLine2 = dlgTra.LastName;
                        pspDev.HuganLine3 = dlgTra.FirstSwitchState;
                        pspDev.HuganLine4 = dlgTra.LastSwitchState;
                        pspDev.LineLevel = dlgTra.FirstType;
                        pspDev.LineType = dlgTra.LastType;

                        if (dlgTra.K != "")
                        {
                            pspDev.K = Convert.ToDouble(dlgTra.K);
                        }
                        if (dlgTra.PositiveR != "")
                        {
                            pspDev.PositiveR = Convert.ToDouble(dlgTra.PositiveR);
                        }
                        if (dlgTra.PositiveTQ != "")
                        {
                            pspDev.PositiveTQ = Convert.ToDouble(dlgTra.PositiveTQ);
                        }
                        if (dlgTra.ZeroR != "")
                        {
                            pspDev.ZeroR = Convert.ToDouble(dlgTra.ZeroR);
                        }
                        if (dlgTra.ZeroTQ != "")
                        {
                            pspDev.ZeroTQ = Convert.ToDouble(dlgTra.ZeroTQ);
                        }
                        if (dlgTra.NeutralNodeTQ != "")
                        {
                            pspDev.BigTQ = Convert.ToDouble(dlgTra.NeutralNodeTQ);
                        }
                        if (dlgTra.NeutralNodeR!="")
                        {
                            pspDev.SmallTQ = Convert.ToDouble(dlgTra.NeutralNodeR);
                        }
                        if (dlgTra.Pij != "")
                        {
                            pspDev.Pij = Convert.ToDouble(dlgTra.Pij);
                        }
                        if (dlgTra.Vij != "")
                        {
                            pspDev.Vij = Convert.ToDouble(dlgTra.Vij);
                        }
                        if (dlgTra.Vi0 != "")
                        {
                            pspDev.Vi0 = Convert.ToDouble(dlgTra.Vi0);
                        }
                        if (dlgTra.Vipos != "")
                        {
                            pspDev.Vipos = Convert.ToDouble(dlgTra.Vipos);
                        }
                        if (dlgTra.Vistep != "")
                        {
                            pspDev.Vistep = Convert.ToDouble(dlgTra.Vistep);
                        }
                        if (dlgTra.Vimax != "")
                        {
                            pspDev.Vimax = Convert.ToDouble(dlgTra.Vimax);
                        }
                        if (dlgTra.Vimin != "")
                        {
                            pspDev.Vimin = Convert.ToDouble(dlgTra.Vimin);
                        }
                        if (dlgTra.P0 != "")
                        {
                            pspDev.P0 = Convert.ToDouble(dlgTra.P0);
                        }
                        if (dlgTra.I0 != "")
                        {
                            pspDev.I0 = Convert.ToDouble(dlgTra.I0);
                        }
                        if (dlgTra.SiN != "")
                        {
                            pspDev.SiN = Convert.ToDouble(dlgTra.SiN);
                        }
                        if (dlgTra.Vj0 != "")
                        {
                            pspDev.Vj0 = Convert.ToDouble(dlgTra.Vj0);
                        }
                        if (dlgTra.Vjpos != "")
                        {
                            pspDev.Vjpos = Convert.ToDouble(dlgTra.Vjpos);
                        }
                        if (dlgTra.Vjstep != "")
                        {
                            pspDev.Vjstep = Convert.ToDouble(dlgTra.Vjstep);
                        }
                        if (dlgTra.Vjmax != "")
                        {
                            pspDev.Vjmax = Convert.ToDouble(dlgTra.Vjmax);
                        }
                        if (dlgTra.Vjmin != "")
                        {
                            pspDev.Vjmin = Convert.ToDouble(dlgTra.Vjmin);
                        }
                        if (dlgTra.Vib!="")
                        {
                            pspDev.Vib = Convert.ToDouble(dlgTra.Vib);
                        }
                        if (dlgTra.Vjb!="")
                        {
                            pspDev.Vjb = Convert.ToDouble(dlgTra.Vib);
                        }

                        Services.BaseService.Create<PSPDEV>(pspDev);
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("transformerthirdzu")))
                {
                    frmThridTra dlgThridTra = new frmThridTra(tlVectorControl1.SVGDocument.SvgdataUid);
                    dlgThridTra.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlgThridTra.ShowDialog(this) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlgThridTra.Name;
                        pspName.Type = "transformerthirdzu";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1)
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        tlVectorControl1.Operation = ToolOperation.Select;
                        PSPDEV pspDev = new PSPDEV();
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        RectangleF t = ((IGraph)temp).GetBounds();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = temp.GetAttribute("id");
                        pspDev.Name = dlgThridTra.Name;
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.X1 = t.X;
                        pspDev.Y1 = t.Y;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = 0;
                        pspDev.Type = "transformerthirdzu";

                        pspDev.Lable = "三绕组变压器";
                        pspDev.HuganLine1 = dlgThridTra.IName;
                        pspDev.HuganLine2 = dlgThridTra.JName;
                        pspDev.HuganLine3 = dlgThridTra.ISwitchState;
                        pspDev.HuganLine4 = dlgThridTra.JSwitchState;
                        pspDev.LineLevel = dlgThridTra.IType;
                        pspDev.LineType = dlgThridTra.JType;
                        pspDev.LineStatus = dlgThridTra.KType;
                        pspDev.KName = dlgThridTra.KName;
                        pspDev.KSwitchStatus = dlgThridTra.KSwitchState;

                        if (dlgThridTra.IK != "")
                        {
                            pspDev.K = Convert.ToDouble(dlgThridTra.IK);
                        }
                        if (dlgThridTra.JK != "")
                        {
                            pspDev.G = Convert.ToDouble(dlgThridTra.JK);
                        }
                        if (dlgThridTra.KK != "")
                        {
                            pspDev.BigP = Convert.ToDouble(dlgThridTra.KK);
                        }
                        if (dlgThridTra.IR != "")
                        {
                            pspDev.HuganTQ1 = Convert.ToDouble(dlgThridTra.IR);
                        }
                        if (dlgThridTra.JR != "")
                        {
                            pspDev.HuganTQ2 = Convert.ToDouble(dlgThridTra.JR);
                        }
                        if (dlgThridTra.KR != "")
                        {
                            pspDev.HuganTQ3 = Convert.ToDouble(dlgThridTra.KR);
                        }
                        if (dlgThridTra.ITQ != "")
                        {
                            pspDev.HuganTQ4 = Convert.ToDouble(dlgThridTra.ITQ);
                        }
                        if (dlgThridTra.JTQ != "")
                        {
                            pspDev.HuganTQ5 = Convert.ToDouble(dlgThridTra.JTQ);
                        }
                        if (dlgThridTra.KTQ != "")
                        {
                            pspDev.SmallTQ = Convert.ToDouble(dlgThridTra.KTQ);
                        }
                        if (dlgThridTra.ZeroTQ != "")
                        {
                            pspDev.ZeroTQ = Convert.ToDouble(dlgThridTra.ZeroTQ);
                        }
                        if (dlgThridTra.NeutralNodeTQ != "")
                        {
                            pspDev.BigTQ = Convert.ToDouble(dlgThridTra.NeutralNodeTQ);
                        }
                        if (dlgThridTra.P0 != "")
                        {
                            pspDev.P0 = Convert.ToDouble(dlgThridTra.P0);
                        }
                        if (dlgThridTra.I0 != "")
                        {
                            pspDev.I0 = Convert.ToDouble(dlgThridTra.I0);
                        }
                        if (dlgThridTra.SiN != "")
                        {
                            pspDev.SiN = Convert.ToDouble(dlgThridTra.SiN);
                        }
                        if (dlgThridTra.Vi0 != "")
                        {
                            pspDev.Vi0 = Convert.ToDouble(dlgThridTra.Vi0);
                        }
                        if (dlgThridTra.Pij != "")
                        {
                            pspDev.Pij = Convert.ToDouble(dlgThridTra.Pij);
                        }
                        if (dlgThridTra.Vij != "")
                        {
                            pspDev.Vij = Convert.ToDouble(dlgThridTra.Vij);
                        }
                        if (dlgThridTra.Vipos != "")
                        {
                            pspDev.Vipos = Convert.ToDouble(dlgThridTra.Vipos);
                        }
                        if (dlgThridTra.Vistep != "")
                        {
                            pspDev.Vistep = Convert.ToDouble(dlgThridTra.Vistep);
                        }
                        if (dlgThridTra.Vimax != "")
                        {
                            pspDev.Vimax = Convert.ToDouble(dlgThridTra.Vimax);
                        }
                        if (dlgThridTra.Vimin != "")
                        {
                            pspDev.Vimin = Convert.ToDouble(dlgThridTra.Vimin);
                        }
                        if (dlgThridTra.SjN != "")
                        {
                            pspDev.SjN = Convert.ToDouble(dlgThridTra.SjN);
                        }
                        if (dlgThridTra.Vj0 != "")
                        {
                            pspDev.Vj0 = Convert.ToDouble(dlgThridTra.Vj0);
                        }
                        if (dlgThridTra.Pjk != "")
                        {
                            pspDev.Pjk = Convert.ToDouble(dlgThridTra.Pjk);
                        }
                        if (dlgThridTra.Vjk != "")
                        {
                            pspDev.Vjk = Convert.ToDouble(dlgThridTra.Vjk);
                        }
                        if (dlgThridTra.Vjpos != "")
                        {
                            pspDev.Vjpos = Convert.ToDouble(dlgThridTra.Vjpos);
                        }
                        if (dlgThridTra.Vjstep != "")
                        {
                            pspDev.Vjstep = Convert.ToDouble(dlgThridTra.Vjstep);
                        }
                        if (dlgThridTra.Vjmax != "")
                        {
                            pspDev.Vjmax = Convert.ToDouble(dlgThridTra.Vjmax);
                        }
                        if (dlgThridTra.Vjmin != "")
                        {
                            pspDev.Vjmin = Convert.ToDouble(dlgThridTra.Vjmin);
                        }
                        if (dlgThridTra.SkN != "")
                        {
                            pspDev.SkN = Convert.ToDouble(dlgThridTra.SkN);
                        }
                        if (dlgThridTra.Vk0 != "")
                        {
                            pspDev.Vk0 = Convert.ToDouble(dlgThridTra.Vk0);
                        }
                        if (dlgThridTra.Pik != "")
                        {
                            pspDev.Pik = Convert.ToDouble(dlgThridTra.Pik);
                        }
                        if (dlgThridTra.Vik != "")
                        {
                            pspDev.Vik = Convert.ToDouble(dlgThridTra.Vik);
                        }
                        if (dlgThridTra.Vkpos != "")
                        {
                            pspDev.Vkpos = Convert.ToDouble(dlgThridTra.Vkpos);
                        }
                        if (dlgThridTra.Vkstep != "")
                        {
                            pspDev.Vkstep = Convert.ToDouble(dlgThridTra.Vkstep);
                        }
                        if (dlgThridTra.Vkmax != "")
                        {
                            pspDev.Vkmax = Convert.ToDouble(dlgThridTra.Vkmax);
                        }
                        if (dlgThridTra.Vkmin != "")
                        {
                            pspDev.Vkmin = Convert.ToDouble(dlgThridTra.Vkmin);
                        }
                        if (dlgThridTra.Vib != "")
                        {
                            pspDev.Vib = Convert.ToDouble(dlgThridTra.Vib);
                        }
                        if (dlgThridTra.Vjb != "")
                        {
                            pspDev.Vjb = Convert.ToDouble(dlgThridTra.Vjb);
                        }
                        if (dlgThridTra.Vkb != "")
                        {
                            pspDev.Vkb = Convert.ToDouble(dlgThridTra.Vkb);
                        }
                        pspDev.ReferenceVolt = 1;        //中心节点的电压
                        Services.BaseService.Create<PSPDEV>(pspDev);
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("串联电容电抗器")))
                {
                    frmCapacity dlgCapacity = new frmCapacity(tlVectorControl1.SVGDocument.SvgdataUid);
                    dlgCapacity.SetEnable(true);
                    dlgCapacity.Text = "串联电容电抗器";
                    dlgCapacity.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlgCapacity.ShowDialog(this) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlgCapacity.Name;
                        pspName.Type = "串联电容电抗器";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1)
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        tlVectorControl1.Operation = ToolOperation.Select;
                        PSPDEV pspDev = new PSPDEV();
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        RectangleF t = ((IGraph)temp).GetBounds();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = temp.GetAttribute("id");
                        pspDev.Name = dlgCapacity.Name;
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.X1 = t.X;
                        pspDev.Y1 = t.Y;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = 0;
                        pspDev.Type = "串联电容电抗器";

                        pspDev.Lable = dlgCapacity.Lable;

                        if (dlgCapacity.PositiveTQ != "")
                        {
                            pspDev.PositiveTQ = Convert.ToDouble(dlgCapacity.PositiveTQ);
                        }
                        pspDev.HuganLine1 = dlgCapacity.FirstNodeName;
                        //pspDev.HuganLine2 = dlgCapacity.LastNodeName;
                        pspDev.HuganLine3 = dlgCapacity.SwitchStatus;
                        pspDev.HuganLine4 = dlgCapacity.belongline;
                        if (dlgCapacity.VoltR != "")
                        {
                            pspDev.VoltR = Convert.ToDouble(dlgCapacity.VoltR);
                        }
                        if (dlgCapacity.ReferenceVolt != "")
                        {
                            pspDev.ReferenceVolt = Convert.ToDouble(dlgCapacity.ReferenceVolt);
                        }
                        Services.BaseService.Create<PSPDEV>(pspDev);
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }

                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("并联电容电抗器")))
                {
                    frmCapacity dlgCapacity = new frmCapacity(tlVectorControl1.SVGDocument.SvgdataUid);
                    dlgCapacity.SetEnable(false);
                    dlgCapacity.Text = "并联电容电抗器";
                    dlgCapacity.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlgCapacity.ShowDialog(this) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlgCapacity.Name;
                        pspName.Type = "并联电容电抗器";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1)
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        tlVectorControl1.Operation = ToolOperation.Select;
                        PSPDEV pspDev = new PSPDEV();
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        RectangleF t = ((IGraph)temp).GetBounds();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = temp.GetAttribute("id");
                        pspDev.Name = dlgCapacity.Name;
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.X1 = t.X;
                        pspDev.Y1 = t.Y;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = 0;
                        pspDev.Type = "并联电容电抗器";

                        pspDev.Lable = dlgCapacity.Lable;

                        if (dlgCapacity.PositiveTQ != "")
                        {
                            pspDev.PositiveTQ = Convert.ToDouble(dlgCapacity.PositiveTQ);
                        }
                        pspDev.HuganLine1 = dlgCapacity.FirstNodeName;
                        //pspDev.HuganLine2 = dlgCapacity.LastNodeName;
                        pspDev.HuganLine3 = dlgCapacity.SwitchStatus;
                        if (dlgCapacity.VoltR != "")
                        {
                            pspDev.VoltR = Convert.ToDouble(dlgCapacity.VoltR);
                        }
                        if (dlgCapacity.ReferenceVolt != "")
                        {
                            pspDev.ReferenceVolt = Convert.ToDouble(dlgCapacity.ReferenceVolt);
                        }
                        Services.BaseService.Create<PSPDEV>(pspDev);
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("1/2母联开关")))
                {
                    frmMuLian dlgmulian = new frmMuLian(tlVectorControl1.SVGDocument.SvgdataUid);

                    dlgmulian.Text = "1/2母联开关";
                    dlgmulian.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlgmulian.ShowDialog(this) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlgmulian.Name;
                        pspName.Type = "1/2母联开关";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1)
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        tlVectorControl1.Operation = ToolOperation.Select;
                        PSPDEV pspDev = new PSPDEV();
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        RectangleF t = ((IGraph)temp).GetBounds();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = temp.GetAttribute("id");
                        pspDev.Name = dlgmulian.Name;
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.X1 = t.X;
                        pspDev.Y1 = t.Y;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = 0;
                        pspDev.Type = "1/2母联开关";

                        pspDev.Lable = "1/2母联开关";


                        pspDev.HuganLine1 = dlgmulian.FirstNodeName;
                        pspDev.HuganLine2 = dlgmulian.LastNodeName;
                        pspDev.HuganLine3 = dlgmulian.SwitchStatus;

                        Services.BaseService.Create<PSPDEV>(pspDev);
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                else if (temp is Use && (temp.GetAttribute("xlink:href").Contains("2/3母联开关")))
                {
                    frmMuLian2 dlgmulian = new frmMuLian2(tlVectorControl1.SVGDocument.SvgdataUid);

                    dlgmulian.Text = "2/3母联开关";
                    dlgmulian.svgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    if (dlgmulian.ShowDialog(this) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();
                        XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                        PSPDEV pspName = new PSPDEV();
                        pspName.Name = dlgmulian.Name;
                        pspName.Type = "2/3母联开关";
                        pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList listName = Services.BaseService.GetList("SelectPSPDEVByName", pspName);
                        if (listName.Count >= 1)
                        {
                            MessageBox.Show("名称已存在！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            tlVectorControl1.Delete();
                            return;
                        }

                        tlVectorControl1.Operation = ToolOperation.Select;
                        PSPDEV pspDev = new PSPDEV();
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        RectangleF t = ((IGraph)temp).GetBounds();
                        pspDev.SUID = Guid.NewGuid().ToString();
                        pspDev.EleID = temp.GetAttribute("id");
                        pspDev.Name = dlgmulian.Name;
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.X1 = t.X;
                        pspDev.Y1 = t.Y;
                        pspDev.Number = -1;
                        pspDev.FirstNode = -1;
                        pspDev.LastNode = 0;
                        pspDev.Type = "2/3母联开关";

                        pspDev.Lable = "2/3母联开关";


                        pspDev.HuganLine1 = dlgmulian.INodeName;
                        pspDev.HuganLine2 = dlgmulian.JNodeName;
                        pspDev.HuganLine3 = dlgmulian.ILineName;
                        pspDev.HuganLine4 = dlgmulian.JLineName;
                        pspDev.KName = dlgmulian.ILoadName;
                        pspDev.KSwitchStatus = dlgmulian.JLoadName;
                        pspDev.LineLevel = dlgmulian.SwitchStatus1;
                        pspDev.LineType = dlgmulian.SwitchStatus2;
                        pspDev.LineStatus = dlgmulian.SwitchStatus3;

                        Services.BaseService.Create<PSPDEV>(pspDev);
                    }
                    else
                    {
                        tlVectorControl1.Delete();
                    }
                }
                //temp.RemoveAll();
            }

        }
        public double getVolt(double avolt)
        {
            if (avolt == 525)
            {
                return 500;
            }
            else if (avolt == 230)
            {
                return 220;
            }
            else if (avolt == 115)
            {
                return 110;
            }
            else if (avolt == 69)
            {
                return 66;
            }
            else if (avolt == 37)
            {
                return 35;
            }
            else if (avolt == 10.5)
            {
                return 10;
            }
            else
                return 1;
        }
        public string getPower(string str)
        {
            if(str.Contains("500")){
                return "500";
            }
            if (str.Contains("220"))
            {
                return "220";
            }
            if (str.Contains("110"))
            {
                return "110";
            }
            if (str.Contains("66"))
            {
                return "66";
            }
            if (str.Contains("35"))
            {
                return "35";
            }
            else
                return "";
        }
        void DrawArea_ViewChanged(object sender, ItopVector.DrawArea.ViewChangedEventArgs e)
        {
            //throw new Exception("The method or operation is not implemented.");
            //float a = e.Bounds.Bottom;
        }
        CustomOperation csOperation = CustomOperation.OP_Default;
        public void RelStart()
        {
            this.Show();

            LoadShape("symbol20.xml");
            Relaflag = true;
            RelFormdialog reldialog = new RelFormdialog();
           // reldialog.Parent = this;
            reldialog.ShowDialog();
            if (reldialog.DialogResult==DialogResult.OK)
            {
                jxtbar2(3);
                NewFile(fileType);
                tlVectorControl1.PropertyGrid = propertyGrid;
                tlVectorControl1.ContextMenuStrip = contextMenuStrip1;
            }
            else if (reldialog.DialogResult==DialogResult.Ignore)
            {
                this.Visible = false;
                //进行变压器检验
                FrmLayoutSubstationInfo layoutSubstation = new FrmLayoutSubstationInfo();
                layoutSubstation.Biandianzhan();

            }
            else if (reldialog.DialogResult == DialogResult.Cancel)
            {
                this.Visible = false;
            }
        }
        public void Start()
        {
           //Thread newThread = new Thread(new ThreadStart(FirstStart));
           // newThread.Start();
           // int timef = DateTime.Now.Minute*60+DateTime.Now.Second;
           // int times = 0;
           // while ((newThread.IsAlive)&&(times==(timef+10)))
           // { 
           //     times = DateTime.Now.Minute * 60 + DateTime.Now.Second;
           // }
            this.Show();
            Relaflag = false;
            LoadShape("symbol20.xml");
            JXTFlat = false;
            jxtbar2(1);
            fileType = true;
            NewFile(fileType);
            tlVectorControl1.PropertyGrid = propertyGrid;
            tlVectorControl1.ContextMenuStrip = contextMenuStrip1;
            
                        
        }
        public void PowerLossStart()
        {
            this.Show();
            this.Text = "线损计算";
            LoadShape("symbol20.xml");
            JXTFlat = false;
            jxtbar2(2);
            NewFile(fileType, DialogResult.Ignore);
            tlVectorControl1.PropertyGrid = propertyGrid;
            tlVectorControl1.ContextMenuStrip = contextMenuStrip1;
        }
        public void VoltStart()
        {
            this.Show();
            this.Text = "电压质量评估";
            LoadShape("symbol20.xml");
            JXTFlat = false;
            jxtbar2(4);
            NewFile(fileType, DialogResult.Ignore);
            tlVectorControl1.PropertyGrid = propertyGrid;
            tlVectorControl1.ContextMenuStrip = contextMenuStrip1;

        }
        public void IdleStart()
        {
            this.Show();
            this.Text = "无功优化";
            LoadShape("symbol20.xml");
            JXTFlat = true;
            jxtbar2(3);
            NewFile(fileType, DialogResult.Ignore);
            tlVectorControl1.PropertyGrid = propertyGrid;
            tlVectorControl1.ContextMenuStrip = contextMenuStrip1;

        }
        public void ShortCutStart()
        {
            this.Show();
            this.Text = "短路计算";
            LoadShape("symbol21.xml");
            JXTFlat = false;
            jxtbar2(2);
            fileType = false;
            NewFile(fileType, "短路计算");
           // NewFile(fileType, DialogResult.Ignore);
            tlVectorControl1.PropertyGrid = propertyGrid;
            tlVectorControl1.ContextMenuStrip = contextMenuStrip1;

        }
        void tlVectorControl1_OperationChanged(object sender, EventArgs e)
        {
            if (csOperation == CustomOperation.OP_MeasureDistance)
            {
                resetOperation();
            }
        }
        void resetOperation()
        {
            csOperation = CustomOperation.OP_Default;
            ItopVector.Core.Figure.Polyline obj = (ItopVector.Core.Figure.Polyline)tlVectorControl1.SVGDocument.CurrentElement;
            if (obj != null)
            {
                obj.ParentNode.RemoveChild(obj);
                tlVectorControl1.SVGDocument.CurrentElement = tlVectorControl1.SVGDocument.RootElement;
                label1.Hide();
                //tlVectorControl1.SetToolTip("");
            }
        }
        void symbolSelector_SelectedChanged(object sender, EventArgs e)
        {
            tlVectorControl1.CurrentOperation = ToolOperation.Select;
            if (symbolSelector.SelectedItem != null)
            {
                tlVectorControl1.DrawArea.PreGraph = symbolSelector.SelectedItem.CloneNode(true) as IGraph;
            }
            else
            {
                tlVectorControl1.DrawArea.PreGraph = null;
            }
        }
        public void LoadShape(string filename)
        {
            DockContainerItem dockitem = dotNetBarManager1.GetItem("DockContainerty") as DockContainerItem;
            symbolSelector = null;
            this.symbolSelector = new ItopVector.Selector.SymbolSelector(System.Windows.Forms.Application.StartupPath + "\\symbol\\" + filename);
            this.symbolSelector.Dock = DockStyle.Fill;
            tlVectorControl1.SymbolSelector = this.symbolSelector;
            dockitem.Control = this.symbolSelector;
            dockitem.Refresh();
            dockitem = dotNetBarManager1.GetItem("DockContainersx") as DockContainerItem;
            dockitem.Control = this.propertyGrid;
            dockitem.Refresh();        
            //symbolSelector.SelectedChanged += new EventHandler(symbolSelector_SelectedChanged);
            //symbolSelector.Selected += new EventHandler(symbolSelector_Selected);
            tlVectorControl1.Location = new System.Drawing.Point(176, 90);

            //tlVectorControl1.Size = new Size((Screen.PrimaryScreen.Bounds.Width - 176), (Screen.PrimaryScreen.Bounds.Height - 158));
        }

        void symbolSelector_Selected(object sender, EventArgs e)
        {
            tlVectorControl1.CurrentOperation = ToolOperation.Select;
            if (symbolSelector.SelectedItem != null)
            {
                tlVectorControl1.DrawArea.PreGraph = symbolSelector.SelectedItem.CloneNode(true) as IGraph;
            }
            else
            {
                tlVectorControl1.DrawArea.PreGraph = null;
            }
        }
        public void NewFile(bool type,DialogResult result)
        {           
            if (result != DialogResult.Ignore && result != DialogResult.No)
            {
                if (result == DialogResult.OK)
                {
                    type = true;
                    fileType = true;
                }
                else
                {
                    type = false;
                    fileType = false;
                }
                //type = false;
                tlVectorControl1.NewFile();
                if (type == true)
                {
                    LoadShape("symbol20.xml");
                    jxtbar(1);
                }
                else
                {
                    LoadShape("symbol21.xml");
                    jxtbar(0);
                }
                tlVectorControl1.SVGDocument.SvgdataUid = Guid.NewGuid().ToString();
                SvgDocument.currentLayer = Layer.CreateNew("默认层", tlVectorControl1.SVGDocument).ID;
                tlVectorControl1.IsModified = false;
                frmElementName dlgnew = new frmElementName();
                dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                if (dlgnew.ShowDialog() == DialogResult.OK)
                {
                    tlVectorControl1.SVGDocument.FileName = dlgnew.TextInput;
                    this.Text = tlVectorControl1.SVGDocument.FileName;
                    this.Refresh();
                    Save();
                }
                else
                {
                    return;
                }

                if (type == true)
                {
                    //MessageBox.Show();
                    //start st=new start();
                    //if (st.ShowDialog()==DialogResult.OK)
                    //{}
                    if (MessageBox.Show("新建的潮流计算，需要设置基准值，是否立即设置？？", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();


                        //pspDev2.SUID = Guid.NewGuid().ToString();
                        pspDev2.Type = "Power";
                        pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pspDev2);
                        if (pspDev2 != null)
                        {
                        }
                        else
                        {
                            pspDev2 = new PSPDEV();
                            pspDev2.SUID = Guid.NewGuid().ToString();
                            pspDev2.Type = "Power";
                            pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev2.iV = 0.95;
                            pspDev2.jV = 1.05;
                            Services.BaseService.Create<PSPDEV>(pspDev2);
                        }
                        powerf pp = new powerf(pspDev2);
                        if (pp.ShowDialog() == DialogResult.OK)
                        {
                            pspDev2.PowerFactor = Convert.ToDouble(pp.powerfactor);
                            pspDev2.StandardVolt = Convert.ToDouble(pp.standardvolt);
                            pspDev2.StandardCurrent = Convert.ToDouble(pp.standardcurrent);
                            pspDev2.BigP = Convert.ToDouble(pp.bigP);
                            pspDev2.iV = Convert.ToDouble(pp.Vmin);
                            pspDev2.jV = Convert.ToDouble(pp.Vmax);
                            Services.BaseService.Update<PSPDEV>(pspDev2);
                            PSPDEV voltall = new PSPDEV();
                            voltall.Type = "Use";
                            voltall.Lable = "电厂";
                            voltall.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.OutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.OutQ = dev.OutP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }
                            voltall.Lable = "变电站";
                            allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.InPutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.InPutQ = dev.InPutP * pspDev2.BigP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }

                        }
                        //powerf pf=new powerf()
                    }

                }
            }
            //if (dg.ShowDialog() == DialogResult.Ignore)
            else if (result == DialogResult.Ignore)
            {
                OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        Open(dlgOpenFile.FileGUID);
                        PSPDEV psp = new PSPDEV();
                        psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                        foreach (PSPDEV dev in list1)
                        {
                            if (dev.Type != "Power" && dev.Type != "TransformLine" && dev.Type != "Duanluqi" && dev.Type != "GNDLine")
                            {
                                XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                if (temp == null)
                                {
                                    Services.BaseService.Delete<PSPDEV>(dev);
                                }
                            }
                        }
                        XmlNodeList list2 = tlVectorControl1.SVGDocument.SelectNodes("svg/use");
                        foreach (XmlNode node in list2)
                        {
                            PSPDEV dev = new PSPDEV();
                            //(node as Text).InnerText = dev.Name;
                            //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                            PSPDEV dlg = new PSPDEV();
                            XmlElement element = node as XmlElement;
                            dev.EleID = element.GetAttribute("id");
                            dev.SvgUID = psp.SvgUID;
                            dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                            if (dlg == null)
                            {
                                SvgElement element2 = node as SvgElement;
                                tlVectorControl1.SVGDocument.CurrentElement = element2;
                                tlVectorControl1.Delete();
                            }
                        }
                        XmlNodeList list3 = tlVectorControl1.SVGDocument.SelectNodes("svg/polyline");
                        foreach (XmlNode node in list3)
                        {

                            PSPDEV dev = new PSPDEV();
                            //(node as Text).InnerText = dev.Name;
                            //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                            PSPDEV dlg = new PSPDEV();
                            XmlElement element = node as XmlElement;

                            dev.EleID = element.GetAttribute("id");
                            if (element.GetAttribute("flag") == "1")
                            { }
                            else
                            {
                                dev.SvgUID = psp.SvgUID;
                                dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                                if (dlg == null)
                                {
                                    SvgElement element2 = node as SvgElement;
                                    tlVectorControl1.SVGDocument.CurrentElement = element2;
                                    tlVectorControl1.Delete();
                                }
                            }
                        }
                    }
                    if (dlgOpenFile.FileType == "短路")
                    {
                        fileType = false;
                        LoadShape("symbol21.xml");
                        jxtbar(0);
                    }
                    else
                    {
                        fileType = true;
                        LoadShape("symbol20.xml");
                        jxtbar(1);
                    }
                }
            }
            else if (result == DialogResult.No)
            {
                OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        SVGFILE svgFile = new SVGFILE();
                        svgFile.SUID = dlgOpenFile.FileGUID;
                        IList svgList = Services.BaseService.GetList("SelectSVGFILEByKey", svgFile);
                        if (svgList.Count > 0)
                        {
                            svgFile = (SVGFILE)svgList[0];
                            SVGFILE svgNew = new SVGFILE();
                            svgNew.SVGDATA = svgFile.SVGDATA;
                            svgNew.PARENTID = svgFile.PARENTID;
                            svgNew.SUID = Guid.NewGuid().ToString();
                            frmElementName dlgnew = new frmElementName();

                            dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                            if (dlgnew.ShowDialog() == DialogResult.OK)
                            {
                                svgNew.FILENAME = dlgnew.TextInput;
                            }
                            else
                            {
                                return;
                            }
                            Services.BaseService.Create<SVGFILE>(svgNew);
                            PSPDIR pspDir = new PSPDIR();
                            pspDir.CreateTime = System.DateTime.Now.ToString();
                            pspDir.FileGUID = svgNew.SUID;
                            pspDir.FileName = svgNew.FILENAME;
                            pspDir.FileType = dlgOpenFile.FileType;
                            Services.BaseService.Create<PSPDIR>(pspDir);
                            PSPDEV pspDev = new PSPDEV();
                            pspDev.SvgUID = svgFile.SUID;
                            IList pspList = Services.BaseService.GetList("SelectPSPDEVBySvgUID", pspDev);
                            foreach (PSPDEV dev in pspList)
                            {
                                dev.SvgUID = svgNew.SUID;
                                dev.SUID = Guid.NewGuid().ToString();
                                Services.BaseService.Create<PSPDEV>(dev);
                            }
                            Open(svgNew.SUID);
                            PSPDEV psp = new PSPDEV();
                            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                            foreach (PSPDEV dev in list1)
                            {
                                if (dev.Type != "Power" && dev.Type != "TransformLine" && dev.Type != "Duanluqi" && dev.Type != "GNDLine")
                                {
                                    XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                    if (temp == null)
                                    {
                                        Services.BaseService.Delete<PSPDEV>(dev);
                                    }
                                }
                            }
                            if (dlgOpenFile.FileType == "短路")
                            {
                                fileType = false;
                                LoadShape("symbol21.xml");
                                jxtbar(0);
                            }
                            else
                            {
                                fileType = true;
                                LoadShape("symbol20.xml");
                                jxtbar(1);
                            }
                        }
                    }
                }
            }
        }

        public void NewFile(bool type)
        {
            start dg = new start();
            dg.setEnabled(type);
            //if (dg.ShowDialog() == DialogResult.OK)
            //{

            //    MessageBox.Show("shit");
            //}
            DialogResult result = dg.ShowDialog();
            if (result != DialogResult.Ignore && result != DialogResult.No)
            {
                if (result == DialogResult.OK)
                {
                    type = true;
                    fileType = true;
                }
                else
                {
                    type = false;
                    fileType = false;
                }
                //type = false;
                tlVectorControl1.NewFile();
                if (type == true)
                {
                    LoadShape("symbol20.xml");
                    jxtbar(1);
                }
                else
                {
                    LoadShape("symbol21.xml");
                    jxtbar(0);
                }
                tlVectorControl1.SVGDocument.SvgdataUid = Guid.NewGuid().ToString();
                SvgDocument.currentLayer = Layer.CreateNew("默认层", tlVectorControl1.SVGDocument).ID;
                tlVectorControl1.IsModified = false;
                frmElementName dlgnew = new frmElementName();
                dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                if (dlgnew.ShowDialog() == DialogResult.OK)
                {
                    tlVectorControl1.SVGDocument.FileName = dlgnew.TextInput;
                    this.Text = tlVectorControl1.SVGDocument.FileName;
                    this.Refresh();
                    Save();
                }
                else
                {
                    return;
                }
                
                if (type==true)
                {
                    //MessageBox.Show();
                    //start st=new start();
                    //if (st.ShowDialog()==DialogResult.OK)
                    //{}
                    if(MessageBox.Show("新建的潮流计算，需要设置基准值，是否立即设置？？","提示",MessageBoxButtons.OKCancel,MessageBoxIcon.Information)==DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();

                      
                        //pspDev2.SUID = Guid.NewGuid().ToString();
                        pspDev2.Type = "Power";
                        pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pspDev2);
                        if(pspDev2 != null)
                        {
                        }
                        else
                        {
                            pspDev2 = new PSPDEV();
                            pspDev2.SUID = Guid.NewGuid().ToString();
                            pspDev2.Type = "Power";
                            pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev2.iV = 0.95;
                            pspDev2.jV = 1.05;
                            Services.BaseService.Create<PSPDEV>(pspDev2);
                        }
                        powerf pp = new powerf(pspDev2);
                        if (pp.ShowDialog() == DialogResult.OK)
                        {
                            pspDev2.PowerFactor = Convert.ToDouble(pp.powerfactor);
                            pspDev2.StandardVolt = Convert.ToDouble(pp.standardvolt);
                            pspDev2.StandardCurrent = Convert.ToDouble(pp.standardcurrent);
                            pspDev2.BigP = Convert.ToDouble(pp.bigP);
                            pspDev2.iV = Convert.ToDouble(pp.Vmin);
                            pspDev2.jV = Convert.ToDouble(pp.Vmax);
                            Services.BaseService.Update<PSPDEV>(pspDev2);
                            PSPDEV voltall=new PSPDEV();
                            voltall.Type="Use";
                            voltall.Lable="电厂";
                            voltall.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.OutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.OutQ = dev.OutP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }
                            voltall.Lable = "变电站";
                            allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.InPutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.InPutQ = dev.InPutP * pspDev2.BigP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }

                        }
                        //powerf pf=new powerf()
                    }
                

                }
                if (type == false)
                {
                    if (MessageBox.Show("新建的短路计算，需要设置基准值，是否立即设置？？", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();


                        //pspDev2.SUID = Guid.NewGuid().ToString();
                        pspDev2.Type = "Power";
                        pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pspDev2);
                        if (pspDev2 != null)
                        {
                        }
                        else
                        {
                            pspDev2 = new PSPDEV();
                            pspDev2.SUID = Guid.NewGuid().ToString();
                            pspDev2.Type = "Power";
                            pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev2.iV = 0.95;
                            pspDev2.jV = 1.05;
                            Services.BaseService.Create<PSPDEV>(pspDev2);
                        }
                        powerf pp = new powerf(pspDev2);
                        if (pp.ShowDialog() == DialogResult.OK)
                        {
                            pspDev2.PowerFactor = Convert.ToDouble(pp.powerfactor);
                            pspDev2.StandardVolt = Convert.ToDouble(pp.standardvolt);
                            pspDev2.StandardCurrent = Convert.ToDouble(pp.standardcurrent);
                            pspDev2.BigP = Convert.ToDouble(pp.bigP);
                            pspDev2.iV = Convert.ToDouble(pp.Vmin);
                            pspDev2.jV = Convert.ToDouble(pp.Vmax);
                            Services.BaseService.Update<PSPDEV>(pspDev2);
                            PSPDEV voltall = new PSPDEV();
                            voltall.Type = "Use";
                            voltall.Lable = "母线节点";
                            voltall.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.OutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.OutQ = dev.OutP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }
                            //voltall.Lable = "变电站";
                            //allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            //foreach (PSPDEV dev in allvolt)
                            //{
                            //    dev.InPutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                            //    //dev.InPutP=dev.Burthen*pspDev2.BigP;
                            //    dev.InPutQ = dev.InPutP * pspDev2.BigP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                            //    Services.BaseService.Update<PSPDEV>(dev);
                            //}

                        }
                    }
                }
            }
            //if (dg.ShowDialog() == DialogResult.Ignore)
            else if (result == DialogResult.Ignore)
            {
                OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                dlgOpenFile.ShowDialog();
                if (dlgOpenFile.DialogResult == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        Open(dlgOpenFile.FileGUID);
                        PSPDEV psp = new PSPDEV();
                        psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                        foreach (PSPDEV dev in list1)
                        {
                            if (dev.Type != "Power" && dev.Type != "TransformLine" && dev.Type != "Duanluqi" && dev.Type != "GNDLine")
                            {
                                XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                if (temp == null)
                                {
                                    Services.BaseService.Delete<PSPDEV>(dev);
                                }
                            }
                        }
                        XmlNodeList list2 = tlVectorControl1.SVGDocument.SelectNodes("svg/use");
                        foreach (XmlNode node in list2)
                        {
                            PSPDEV dev = new PSPDEV();
                            //(node as Text).InnerText = dev.Name;
                            //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                            PSPDEV dlg = new PSPDEV();
                            XmlElement element = node as XmlElement;
                            dev.EleID = element.GetAttribute("id");
                            dev.SvgUID = psp.SvgUID;
                            dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                            if (dlg == null)
                            {
                                SvgElement element2 = node as SvgElement;
                                tlVectorControl1.SVGDocument.CurrentElement = element2;
                                tlVectorControl1.Delete();
                            }
                        }
                        XmlNodeList list3 = tlVectorControl1.SVGDocument.SelectNodes("svg/polyline");
                        foreach (XmlNode node in list3)
                        {

                            PSPDEV dev = new PSPDEV();
                            //(node as Text).InnerText = dev.Name;
                            //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                            PSPDEV dlg = new PSPDEV();
                            XmlElement element = node as XmlElement;

                            dev.EleID = element.GetAttribute("id");
                            if (element.GetAttribute("flag") == "1")
                            { }
                            else
                            {
                                dev.SvgUID = psp.SvgUID;
                                dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                                if (dlg == null)
                                {
                                    SvgElement element2 = node as SvgElement;
                                    tlVectorControl1.SVGDocument.CurrentElement = element2;
                                    tlVectorControl1.Delete();
                                }
                            }
                        }
                    }
                    if (dlgOpenFile.FileType == "短路")
                    {
                        fileType = false;
                        LoadShape("symbol21.xml");
                        jxtbar(0);
                    }
                    else
                    {
                        fileType = true;
                        LoadShape("symbol20.xml");
                        jxtbar(1);
                    }
                }
                if (dlgOpenFile.DialogResult == DialogResult.Cancel)
                {
                    this.Visible = false;
                }
            }
            else if (result == DialogResult.No)
            {
                OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        SVGFILE svgFile = new SVGFILE();
                        svgFile.SUID = dlgOpenFile.FileGUID;
                        IList svgList = Services.BaseService.GetList("SelectSVGFILEByKey", svgFile);
                        if (svgList.Count > 0)
                        {
                            svgFile = (SVGFILE)svgList[0];
                            SVGFILE svgNew = new SVGFILE();
                            svgNew.SVGDATA = svgFile.SVGDATA;
                            svgNew.PARENTID = svgFile.PARENTID;
                            svgNew.SUID = Guid.NewGuid().ToString();
                            frmElementName dlgnew = new frmElementName();
                            
                            dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                            if (dlgnew.ShowDialog() == DialogResult.OK)
                            {
                                svgNew.FILENAME = dlgnew.TextInput;
                            }
                            else
                            {
                                return;
                            }

                            Services.BaseService.Create<SVGFILE>(svgNew);
                            PSPDIR pspDir = new PSPDIR();
                            pspDir.CreateTime = System.DateTime.Now.ToString();
                            pspDir.FileGUID = svgNew.SUID;
                            pspDir.FileName = svgNew.FILENAME;
                            pspDir.FileType = dlgOpenFile.FileType;
                            Services.BaseService.Create<PSPDIR>(pspDir);
                            PSPDEV pspDev = new PSPDEV();
                            pspDev.SvgUID = svgFile.SUID;
                            IList pspList = Services.BaseService.GetList("SelectPSPDEVBySvgUID", pspDev);
                            foreach (PSPDEV dev in pspList)
                            {
                                dev.SvgUID = svgNew.SUID;
                                dev.SUID = Guid.NewGuid().ToString();
                                Services.BaseService.Create<PSPDEV>(dev);
                            }
                            Open(svgNew.SUID);
                            PSPDEV psp = new PSPDEV();
                            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                            foreach (PSPDEV dev in list1)
                            {
                                if (dev.Type != "Power" && dev.Type != "TransformLine" && dev.Type != "GNDLine")
                                {
                                    XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                    if (temp == null)
                                    {
                                        Services.BaseService.Delete<PSPDEV>(dev);
                                    }
                                }
                            }
                            if (dlgOpenFile.FileType == "短路")
                            {
                                fileType = false;
                                LoadShape("symbol21.xml");
                                jxtbar(0);
                            }
                            else
                            {
                                fileType = true;
                                LoadShape("symbol20.xml");
                                jxtbar(1);
                            }
                        }
                    }
                }
                else
                {
                    return;
                }
            }
        }
        public void NewFile(bool type,string str)
        {
            start dg = new start();
            dg.setEnabled(type);
            dg.Text = str;
            //if (dg.ShowDialog() == DialogResult.OK)
            //{

            //    MessageBox.Show("shit");
            //}
            DialogResult result = dg.ShowDialog();
            if (result != DialogResult.Ignore && result != DialogResult.No)
            {
                if (result == DialogResult.OK)
                {
                    type = true;
                    fileType = true;
                }
                else
                {
                    type = false;
                    fileType = false;
                }
                //type = false;
                tlVectorControl1.NewFile();
                if (type == true)
                {
                    LoadShape("symbol20.xml");
                    jxtbar(1);
                }
                else
                {
                    LoadShape("symbol21.xml");
                    jxtbar(0);
                }
                tlVectorControl1.SVGDocument.SvgdataUid = Guid.NewGuid().ToString();
                SvgDocument.currentLayer = Layer.CreateNew("默认层", tlVectorControl1.SVGDocument).ID;
                tlVectorControl1.IsModified = false;
                frmElementName dlgnew = new frmElementName();
                dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                if (dlgnew.ShowDialog() == DialogResult.OK)
                {
                    tlVectorControl1.SVGDocument.FileName = dlgnew.TextInput;
                    this.Text = tlVectorControl1.SVGDocument.FileName;
                    this.Refresh();
                    Save();
                }
                else
                {
                    return;
                }

                if (type == true)
                {
                    //MessageBox.Show();
                    //start st=new start();
                    //if (st.ShowDialog()==DialogResult.OK)
                    //{}
                    if (MessageBox.Show("新建的潮流计算，需要设置基准值，是否立即设置？？", "提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                    {
                        PSPDEV pspDev2 = new PSPDEV();


                        //pspDev2.SUID = Guid.NewGuid().ToString();
                        pspDev2.Type = "Power";
                        pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pspDev2);
                        if (pspDev2 != null)
                        {
                        }
                        else
                        {
                            pspDev2 = new PSPDEV();
                            pspDev2.SUID = Guid.NewGuid().ToString();
                            pspDev2.Type = "Power";
                            pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev2.iV = 0.95;
                            pspDev2.jV = 1.05;
                            Services.BaseService.Create<PSPDEV>(pspDev2);
                        }
                        powerf pp = new powerf(pspDev2);
                        if (pp.ShowDialog() == DialogResult.OK)
                        {
                            pspDev2.PowerFactor = Convert.ToDouble(pp.powerfactor);
                            pspDev2.StandardVolt = Convert.ToDouble(pp.standardvolt);
                            pspDev2.StandardCurrent = Convert.ToDouble(pp.standardcurrent);
                            pspDev2.BigP = Convert.ToDouble(pp.bigP);
                            pspDev2.iV = Convert.ToDouble(pp.Vmin);
                            pspDev2.jV = Convert.ToDouble(pp.Vmax);
                            Services.BaseService.Update<PSPDEV>(pspDev2);
                            PSPDEV voltall = new PSPDEV();
                            voltall.Type = "Use";
                            voltall.Lable = "电厂";
                            voltall.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.OutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.OutQ = dev.OutP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }
                            voltall.Lable = "变电站";
                            allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.InPutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.InPutQ = dev.InPutP * pspDev2.BigP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }

                        }
                        //powerf pf=new powerf()
                    }

                }
            }
            //if (dg.ShowDialog() == DialogResult.Ignore)
            else if (result == DialogResult.Ignore)
            {
                OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                dlgOpenFile.ShowDialog();
                if (dlgOpenFile.DialogResult == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        Open(dlgOpenFile.FileGUID);
                        PSPDEV psp = new PSPDEV();
                        psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                        foreach (PSPDEV dev in list1)
                        {
                            if (dev.Type != "Power" && dev.Type != "TransformLine" && dev.Type != "GNDLine" && dev.Type != "Duanluqi")
                            {
                                XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                if (temp == null)
                                {
                                    Services.BaseService.Delete<PSPDEV>(dev);
                                }
                            }
                        }
                        XmlNodeList list2 = tlVectorControl1.SVGDocument.SelectNodes("svg/use");
                        foreach (XmlNode node in list2)
                        {
                            PSPDEV dev = new PSPDEV();
                            //(node as Text).InnerText = dev.Name;
                            //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                            PSPDEV dlg = new PSPDEV();
                            XmlElement element = node as XmlElement;
                            dev.EleID = element.GetAttribute("id");
                            dev.SvgUID = psp.SvgUID;
                            dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                            if (dlg == null)
                            {
                                SvgElement element2 = node as SvgElement;
                                tlVectorControl1.SVGDocument.CurrentElement = element2;
                                tlVectorControl1.Delete();
                            }
                        }
                        XmlNodeList list3 = tlVectorControl1.SVGDocument.SelectNodes("svg/polyline");
                        foreach (XmlNode node in list3)
                        {

                            PSPDEV dev = new PSPDEV();
                            //(node as Text).InnerText = dev.Name;
                            //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                            PSPDEV dlg = new PSPDEV();
                            XmlElement element = node as XmlElement;

                            dev.EleID = element.GetAttribute("id");
                            if (element.GetAttribute("flag") == "1")
                            { }
                            else
                            {
                                dev.SvgUID = psp.SvgUID;
                                dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                                if (dlg == null)
                                {
                                    SvgElement element2 = node as SvgElement;
                                    tlVectorControl1.SVGDocument.CurrentElement = element2;
                                    tlVectorControl1.Delete();
                                }
                            }
                        }
                    }
                    if (dlgOpenFile.FileType == "短路")
                    {
                        fileType = false;
                        LoadShape("symbol21.xml");
                        jxtbar(0);
                    }
                    else
                    {
                        fileType = true;
                        LoadShape("symbol20.xml");
                        jxtbar(1);
                    }
                }
                if (dlgOpenFile.DialogResult == DialogResult.Cancel)
                {
                    this.Visible = false;
                }
            }
            else if (result == DialogResult.No)
            {
                OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        SVGFILE svgFile = new SVGFILE();
                        svgFile.SUID = dlgOpenFile.FileGUID;
                        IList svgList = Services.BaseService.GetList("SelectSVGFILEByKey", svgFile);
                        if (svgList.Count > 0)
                        {
                            svgFile = (SVGFILE)svgList[0];
                            SVGFILE svgNew = new SVGFILE();
                            svgNew.SVGDATA = svgFile.SVGDATA;
                            svgNew.PARENTID = svgFile.PARENTID;
                            svgNew.SUID = Guid.NewGuid().ToString();
                            frmElementName dlgnew = new frmElementName();

                            dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                            if (dlgnew.ShowDialog() == DialogResult.OK)
                            {
                                svgNew.FILENAME = dlgnew.TextInput;
                            }
                            else
                            {
                                return;
                            }

                            Services.BaseService.Create<SVGFILE>(svgNew);
                            PSPDIR pspDir = new PSPDIR();
                            pspDir.CreateTime = System.DateTime.Now.ToString();
                            pspDir.FileGUID = svgNew.SUID;
                            pspDir.FileName = svgNew.FILENAME;
                            pspDir.FileType = dlgOpenFile.FileType;
                            Services.BaseService.Create<PSPDIR>(pspDir);
                            PSPDEV pspDev = new PSPDEV();
                            pspDev.SvgUID = svgFile.SUID;
                            IList pspList = Services.BaseService.GetList("SelectPSPDEVBySvgUID", pspDev);
                            foreach (PSPDEV dev in pspList)
                            {
                                dev.SvgUID = svgNew.SUID;
                                dev.SUID = Guid.NewGuid().ToString();
                                Services.BaseService.Create<PSPDEV>(dev);
                            }
                            Open(svgNew.SUID);
                            PSPDEV psp = new PSPDEV();
                            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                            foreach (PSPDEV dev in list1)
                            {
                                if (dev.Type != "Power" && dev.Type != "TransformLine" && dev.Type != "GNDLine")
                                {
                                    XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                    if (temp == null)
                                    {
                                        Services.BaseService.Delete<PSPDEV>(dev);
                                    }
                                }
                            }
                            if (dlgOpenFile.FileType == "短路")
                            {
                                fileType = false;
                                LoadShape("symbol21.xml");
                                jxtbar(0);
                            }
                            else
                            {
                                fileType = true;
                                LoadShape("symbol20.xml");
                                jxtbar(1);
                            }
                        }
                    }
                }
                else
                {
                    return;
                }
            }
    
        }
        private void dotNetBarManager1_ItemClick(object sender, EventArgs e)
        {
            FileStream dh;
            StreamReader readLine;
            char[] charSplit;
            string strLine;
            string[] array1;
            string output = null;
            string[] array2;

            string strLine2;

            char[] charSplit2 = new char[] { ' ' };
            FileStream op;
            StreamWriter str1;
            FileStream dh2;
            StreamReader readLine2;
            Excel.Application ex;
            Excel.Worksheet xSheet;
            Excel.Application result1;
            Excel.Worksheet tempSheet;
            Excel.Worksheet newWorksheet;
            DevComponents.DotNetBar.ButtonItem btItem = sender as DevComponents.DotNetBar.ButtonItem;
            //Layer layer1 = (Layer)LayerBox.ComboBoxEx.SelectedItem;
            if (btItem != null)
            {
                switch (btItem.Name)
                {
                    #region 文件操作
                    case "mNew":
                        //tlVectorControl1.NewFile();
                        //start gugu=new start();
                        //gugu.ShowDialog();
                        //if (fileType == true)
                        //{
                        //    LoadShape("symbol20.xml");
                        //}
                        //else
                        //{
                        //    LoadShape("symbol21.xml");
                        //}
                        //tlVectorControl1.SVGDocument.SvgdataUid = Guid.NewGuid().ToString();
                        //SvgDocument.currentLayer = Layer.CreateNew("默认层", tlVectorControl1.SVGDocument).ID;
                        //tlVectorControl1.IsModified = false;
                        //frmElementName dlgnew = new frmElementName();
                        //dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                        //if (dlgnew.ShowDialog() == DialogResult.OK)
                        //{
                        //    tlVectorControl1.SVGDocument.FileName = dlgnew.TextInput;
                        //    Save();
                        //}
                        //bool type = true;
                        NewFile(fileType,this.Text);
                        break;
                    case "mOpen":
                        if (tlVectorControl1.IsModified==true)
                        {
                            DialogResult a;
                            a = MessageBox.Show("图形已修改，是否保存?", "提示", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Information);
                            
                            if (a==DialogResult.Yes)
                            {
                                Save();
                            } 
                            else if (a==DialogResult.No)
                            {
                            }
                            else if (a==DialogResult.Cancel)
                            {
                                return;
                            }                           
                           
                        }
                        if (Relaflag)
                        {
                            RelFormdialog reldialog = new RelFormdialog();
                            // reldialog.Parent = this;
                            reldialog.ShowDialog();
                            if (reldialog.DialogResult == DialogResult.OK)
                            {
                                jxtbar2(3);
                                NewFile(fileType);
                                tlVectorControl1.PropertyGrid = propertyGrid;
                                tlVectorControl1.ContextMenuStrip = contextMenuStrip1;
                            }
                            else if (reldialog.DialogResult == DialogResult.Ignore)
                            {
                                this.Visible = false;
                                //进行变压器检验
                                FrmLayoutSubstationInfo layoutSubstation = new FrmLayoutSubstationInfo();
                                layoutSubstation.Biandianzhan();

                            }
                            else if (reldialog.DialogResult == DialogResult.Cancel)
                            {
                                this.Visible = false;
                            }
                            break;
                        }
                        //NewFile(fileType);
                        OpenFile dlgOpenFile = new OpenFile(fileType?0:1);
                        if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                        {
                            if (dlgOpenFile.FileGUID != null)
                            {
                                Open(dlgOpenFile.FileGUID);
                                PSPDEV psp = new PSPDEV();
                                psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                                foreach (PSPDEV dev in list1)
                                {
                                    if (dev.Type != "Power" && dev.Type != "TransformLine"&&dev.Type!="GNDLine")
                                    {
                                        XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                        if (temp == null)
                                        {
                                            Services.BaseService.Delete<PSPDEV>(dev);
                                        }
                                    }
                                }
                                XmlNodeList list2 = tlVectorControl1.SVGDocument.SelectNodes("svg/use");
                                foreach (XmlNode node in list2)
                                {
                                    PSPDEV dev = new PSPDEV();
                                    //(node as Text).InnerText = dev.Name;
                                    //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");
                                    
                                    PSPDEV dlg = new PSPDEV();
                                    XmlElement element = node as XmlElement;
                                    dev.EleID = element.GetAttribute("id");
                                    dev.SvgUID = psp.SvgUID;
                                    dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                                    if (dlg == null)
                                    {
                                        SvgElement element2 = node as SvgElement;
                                        tlVectorControl1.SVGDocument.CurrentElement = element2;
                                        tlVectorControl1.Delete();
                                    }
                                }
                                XmlNodeList list3 = tlVectorControl1.SVGDocument.SelectNodes("svg/polyline");
                                foreach (XmlNode node in list3)
                                 {
                                    
                                    PSPDEV dev = new PSPDEV();
                                    //(node as Text).InnerText = dev.Name;
                                    //XmlNodeList element = tlVectorControl1.SVGDocument.GetElementsByTagName("text");

                                    PSPDEV dlg = new PSPDEV();
                                    XmlElement element = node as XmlElement;

                                    dev.EleID = element.GetAttribute("id");
                                    if (element.GetAttribute("flag") == "1")
                                    { }
                                    else
                                    {
                                        dev.SvgUID = psp.SvgUID;
                                        dlg = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", dev);
                                        if (dlg == null)
                                        {
                                            SvgElement element2 = node as SvgElement;
                                            tlVectorControl1.SVGDocument.CurrentElement = element2;
                                            tlVectorControl1.Delete();
                                        }
                                    }
                                }
                                    
                            }
                            if (dlgOpenFile.FileType == "短路")
                            {
                                fileType = false;
                                jxtbar(0);
                                LoadShape("symbol21.xml");   
                            }
                            else
                            {
                                fileType = true;                                
                                this.Show();
                                jxtbar(1);
                                LoadShape("symbol20.xml");
                                
                           
                            }
                        }
                        break;
                    case "btExSymbol":
                        tlVectorControl1.ExportSymbol();
                        break;
                    case "mjxt"://导入接线图
                        ImportJxt jxt = new ImportJxt(tlVectorControl1);
                        jxt.Import();
                        break;
                    case "mSave":
                        Save();
                        //tlVectorControl1.Save();
                        //frmElementName dlg = new frmElementName();
                        //dlg.TextInput = tlVectorControl1.SVGDocument.FileName;
                        //if (dlg.ShowDialog() == DialogResult.OK)
                        //{
                        //    tlVectorControl1.SVGDocument.FileName = dlg.TextInput;
                        //    Save();
                        //}
                        break;
                    case "mExit":
                        this.Close();
                        break;
                    case "bt1":
                        //InitTK();
                        break;
                    case "bt2":
                        break;
                    case "mPriSet":
                        this.tlVectorControl1.Operation = ToolOperation.InterEnclosurePrint;
                        break;
                    case "mPrint":
                        tlVectorControl1.Print();
                        break;
                    case "mImport":
                        ExportImage();
                        break;
                    case "mView":
                        //frmSvgView fView = new frmSvgView();
                        //fView.Open(tlVectorControl1.SVGDocument.SvgdataUid);
                        //fView.Show();

                        break;


                    //case "mIncreaseView":
                    //    tlVectorControl1.Operation = ToolOperation.IncreaseView;
                    //    break;
                    case "mRzb":
                        frmRatio fRat = new frmRatio();
                        string viewRat = tlVectorControl1.SVGDocument.getRZBRatio();
                        if (viewRat != "")
                        {
                            fRat.InitData(viewRat);
                        }
                        if (fRat.ShowDialog() == DialogResult.OK)
                        {
                            viewRat = fRat.ViewScale;
                            tlVectorControl1.SVGDocument.setRZBRatio(viewRat);
                        }
                        break;

                    case "mAbout":

                        frmAbout frma = new frmAbout();
                        frma.ShowDialog();
                        break;

                    case "ButtonItem10":
                        int temp411 = 10;
                        frmConvert frmc = new frmConvert();
                        frmc.ShowDialog();
                        temp411++;
                        break;
                    case "Dlqibutt":
                        string svgid = tlVectorControl1.SVGDocument.SvgdataUid;
                        DlqiparamForm dpfrm = new DlqiparamForm(svgid);
                        dpfrm.ShowDialog();
                        break;
                        //MessageBox.Show("请选中母线点，然后点击右键输入断路器属性" "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //duluqiflag=true;
                    //基础操作
                    case "mFreeTransform":
                        tlVectorControl1.Operation = ToolOperation.FreeTransform;

                        break;
                    case "mCJ":
                        tlVectorControl1.Operation = ToolOperation.PolyLine;
                        csOperation = CustomOperation.OP_MeasureDistance;
                        break;
                    //case "ButtonItem2":
                    //    break;
                    #endregion
                    #region 无功优化参数维护
                    case "VoltLimit":
                        frmVoltLimit frmV = new frmVoltLimit(tlVectorControl1.SVGDocument.SvgdataUid);
                        frmV.ShowDialog();
                        break;
                    case "GeneratorLimit":
                        frmGeneratorLimit frmG = new frmGeneratorLimit(tlVectorControl1.SVGDocument.SvgdataUid);
                        frmG.ShowDialog();
                        break;
                    case "TransformLimit":
                        frmTranK frmK = new frmTranK(tlVectorControl1.SVGDocument.SvgdataUid);
                        frmK.ShowDialog();
                        break;
                    case "SVC":
                        frmGNDLimit frmGND = new frmGNDLimit(tlVectorControl1.SVGDocument.SvgdataUid);
                        frmGND.ShowDialog();
                        break;
                    #endregion
                    #region 基础图元
                    case "mLayer":
                        tlVectorControl1.LayerManager();
                        break;
                    case "mDecreaseView":
                        tlVectorControl1.Operation = ToolOperation.DecreaseView;

                        break;
                    case "mIncreaseView":

                        tlVectorControl1.Operation = ToolOperation.IncreaseView;
                        break;
                    case "mRoam":
                        tlVectorControl1.Operation = ToolOperation.Roam;

                        break;
                    case "mSelect":
                        tlVectorControl1.Operation = ToolOperation.Select;
                        break;
                    case "mSel":
                        
                        tlVectorControl1.Operation = ToolOperation.FreeTransform;
                        break;
                    //case "mFreeTransform":
                    //    tlVectorControl1.Operation = ToolOperation.FreeTransform;

                    //    break;
                    case "mFreeLines"://锁套
                        tlVectorControl1.Operation = ToolOperation.FreeLines;

                        break;
                    case "mFreePath":
                        tlVectorControl1.Operation = ToolOperation.FreePath;

                        break;                     
                    case "mShapeTransform":
                        tlVectorControl1.Operation = ToolOperation.ShapeTransform;

                        break;
                    case "mAngleRectangle":
                        tlVectorControl1.Operation = ToolOperation.AngleRectangle;

                        break;
                    case "mEllipse":
                        tlVectorControl1.Operation = ToolOperation.Ellipse;

                        break;
                    case "mLine":
                        tlVectorControl1.Operation = ToolOperation.ConnectLine_Polyline;

                        break;
                    case "mPolyline":
                        tlVectorControl1.Operation = ToolOperation.PolyLine;

                        break;
                    case "mConnectLine":
                        tlVectorControl1.Operation = ToolOperation.ConnectLine;
                        break;
                        
                    case "mPolygon":
                        tlVectorControl1.Operation = ToolOperation.Polygon;

                        break;
                    case "mImage":
                        tlVectorControl1.Operation = ToolOperation.Image;
                        break;
                    case "mText":
                        tlVectorControl1.Operation = ToolOperation.Text;
                        break;
                    case "mBezier":
                        tlVectorControl1.Operation = ToolOperation.Bezier;

                        break;
                    case "ButtonItem2":
                        fileType = true;
                        if (fileType == true)
                        {
                            LoadShape("symbol20.xml");
                            //jxtbar(1);
                        }
                        else
                        {
                            LoadShape("symbol21.xml");
                            //jxtbar(0);
                        }
                        tlVectorControl1.SVGDocument.SvgdataUid = Guid.NewGuid().ToString();
                        SvgDocument.currentLayer = Layer.CreateNew("默认层", tlVectorControl1.SVGDocument).ID;
                        tlVectorControl1.IsModified = false;
                        frmElementName dlgnew2 = new frmElementName();
                        dlgnew2.TextInput = tlVectorControl1.SVGDocument.FileName;
                        if (dlgnew2.ShowDialog() == DialogResult.OK)
                        {
                            tlVectorControl1.SVGDocument.FileName = dlgnew2.TextInput;
                            Save();
                        }
                        //NewFile(fileType);
                        break;
                    case "ButtonItem8":
                        fileType = false;
                        //NewFile(fileType);
                        tlVectorControl1.NewFile();
                if (fileType == true)
                {
                    LoadShape("symbol20.xml");
                    //jxtbar(1);
                }
                else
                {
                    LoadShape("symbol21.xml");
                    //jxtbar(0);
                }
                tlVectorControl1.SVGDocument.SvgdataUid = Guid.NewGuid().ToString();
                SvgDocument.currentLayer = Layer.CreateNew("默认层", tlVectorControl1.SVGDocument).ID;
                tlVectorControl1.IsModified = false;
                frmElementName dlgnew3 = new frmElementName();
                dlgnew3.TextInput = tlVectorControl1.SVGDocument.FileName;
                if (dlgnew3.ShowDialog() == DialogResult.OK)
                {
                    tlVectorControl1.SVGDocument.FileName = dlgnew3.TextInput;
                    Save();
                }
                
                        break;
                    case "mCheck":
                        Check();
                        break;
                    case "niula":
                        //MessageBox.Show(Directory.GetCurrentDirectory());
                        //frmTLpsp el = new frmTLpsp();
                        PspNIULA();
                        //oThread = new Thread(new ThreadStart(el.PspNIULA));
                        //oThread.Start();                        
                        //try
                        //{
                        //    time = new System.Threading.Timer(new TimerCallback(method), null, 50000, 60000);
                        //}
                        //catch { }
                        break;
                    case "pq":
                        //frmTLpsp e2 = new frmTLpsp();
                        PspPQ();
                        break;                        
                    //case "ShortCut":
                    //    ShortCutCheck();
                    //    break;
                    case "GaussSeidel":
                        PspGaussSeidel();
                        break;
                    case "PowerLossCal":
                        PspPowerLossCal();
                        break;
                    case "N_RZYz":
                        PspN_RZYz();
                        break;
                    case "WebRela":                        //进行网络N-1检验
                        WebCalAndPrint();
                        break;
                    case "TransRela":                       //进行变压器N-1检验
                        break;
                    case "Shortibut":
                        int n3 = 0;
                        ShortTform shorttype = new ShortTform();
                        shorttype.ShowDialog();
                        if (shorttype.DialogResult==DialogResult.OK)
                        {
                            switch (shorttype.DuanluType)
                            {
                                case "单相接地":
                                    n3 = 1;
                                    break;

                                case "两相接地":
                                    n3 = 3;
                                    break;
                                case "两相故障":
                                    n3 = 2;
                                    break;
                                case "三相故障":
                                    n3 = 0;
                                    break;
                                default:
                                    n3 = 1;
                                    break;
                            }
                            Allshort(n3);
                        }
                        
                        break;
                    case "dd":
                        //SubPrint = true;
                        tlVectorControl1.Operation = ToolOperation.InterEnclosurePrint;
                        break;

                    case "NiulaResult":
                        try
                        {
                        //{
                            if (!Check())
                            {
                                return;
                            }
                            NIULA pspniula = new NIULA();
                            pspniula.CurrentCal();
                          
                            try
                            {        
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "牛拉法计算结果.xls"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "牛拉法计算结果.xls");
                                    //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                                }
                            }
                            catch (System.Exception ex1)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }


                            double yinzi = 0, capability = 0, volt = 0, current = 0, standvolt = 0, Rad_to_Deg = 57.29577951;
                            PSPDEV benchmark = new PSPDEV();
                            benchmark.Type = "power";
                            benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                            if (list3 == null)
                            {
                                MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            foreach (PSPDEV dev in list3)
                            {
                                yinzi = Convert.ToDouble(dev.PowerFactor);
                                capability = Convert.ToDouble(dev.StandardCurrent);
                                volt = Convert.ToDouble(dev.StandardVolt);
                                TLPSPVmin = dev.iV;
                                TLPSPVmax = dev.jV;
                                if (dev.PowerFactor == 0)
                                {
                                    yinzi = 1;
                                }
                                if (dev.StandardCurrent == 0)
                                {
                                    capability = 1;
                                }
                                if (dev.StandardVolt == 0)
                                {
                                    volt = 1;
                                }
                                standvolt = volt;
                                current = capability / (Math.Sqrt(3) * volt);
                                
                            }
                            capability = 100;

                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF1.txt"))
                            {
                            }
                            else
                            {
                                return;
                            }
                            dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF1.txt", FileMode.Open);
                            readLine = new StreamReader(dh);

                            charSplit = new char[] { ' ' };
                            strLine = readLine.ReadLine();

                            output += ("全网母线(发电、负荷)结果报表 " + "\r\n" + "\r\n");
                            output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                            output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                            output += ("母线名" + "," + "电压幅值" + "," + "电压相角" + "," + "有功发电" + "," + "无功发电" + "," + "有功负荷" + "," + "无功负荷" + "," + "越限标志" + "," + "过载标志" + "\r\n");
                            int count = 0;
                            while (strLine != null && strLine != "")
                            {
                                array1 = strLine.Split(charSplit);
                                string[] dev = new string[9];
                                dev.Initialize();
                                int i = 0;
                                count++;
                                PSPDEV CR = new PSPDEV();
                                CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                foreach (string str in array1)
                                {
                                    if (str != "")
                                    {
                                        if (str != "NaN")
                                        {
                                            dev[i++] = Convert.ToDouble(str).ToString();
                                        }
                                        else
                                        {
                                            dev[i++] = str;
                                        }

                                    }

                                }

                                CR.Number = Convert.ToInt32(dev[0]);
                                CR.Type = "Use";
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                                if (CR != null && CR.ReferenceVolt != 0)
                                {
                                    volt = CR.ReferenceVolt;
                                }
                                else
                                    volt = standvolt;
                                if (CR.ReferenceVolt==0)
                                {
                                    CR.ReferenceVolt=1;
                                }
                                current = capability / (Math.Sqrt(3) * volt);
                                double vTemp = Convert.ToDouble(dev[1]) * volt;
                                double vTemp1 = volt * TLPSPVmin*getVolt(CR.ReferenceVolt)/CR.ReferenceVolt;
                                double vTemp2 = volt * TLPSPVmax *getVolt(CR.ReferenceVolt)/CR.ReferenceVolt;

                                if (vTemp >= vTemp1 && vTemp <= vTemp2)
                                {
                                    dev[5] = "0";
                                }
                                else
                                {
                                    dev[5] = "1";
                                }
                                if (Convert.ToDouble(dev[3]) * capability > Convert.ToDouble(CR.Burthen))
                                {
                                    dev[6] = "1";
                                }
                                else
                                {
                                    dev[6] = "0";
                                }

                                if (Convert.ToDouble(dev[3]) < 0)
                                {
                                    output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2]) * Rad_to_Deg).ToString() + "," + "0" + "," + "0" + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + dev[5] + "," + dev[6] + "\r\n";
                                }
                                else
                                {
                                    output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2]) * Rad_to_Deg).ToString() + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + "0" + "," + "0" + "," + dev[5] + "," + dev[6] + "\r\n";
                                }
                                strLine = readLine.ReadLine();
                            }
                            PSPDEV ct = new PSPDEV();
                            ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            ct.Type = "Use";
                            IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                            if (count < cont.Count)
                            {
                                MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                readLine.Close();
                                return;

                            }
                            readLine.Close();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                }
                            }
                            catch (System.Exception ex2)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                            str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                            str1.Write(output);
                            str1.Close();

                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt"))
                            {
                            }
                            else
                            {
                                return;
                            }
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                            {
                            }
                            else
                            {
                                return;
                            }
                            dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH1.txt", FileMode.Open);
                            dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH1.txt", FileMode.Open);
                            readLine2 = new StreamReader(dh2);
                            readLine = new StreamReader(dh);
                            charSplit = new char[] { ' ' };
                            strLine = readLine.ReadLine();
                            strLine2 = readLine2.ReadLine();

                            output = null;

                            output += ("全网交流线结果报表" + "\r\n" + "\r\n");
                            output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                            output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                            output += ("支路名称" + "," + "支路有功" + "," + "支路无功" + "," + "有功损耗" + "," + "无功损耗" + "," + "电流幅值" + "," + "电流相角" + "," + "越限标志" + "," + "\r\n");
                            while (strLine != null && strLine2 != null && strLine != "" && strLine2 != "")
                            {
                                array1 = strLine.Split(charSplit);
                                array2 = strLine2.Split(charSplit2);

                                string[] dev = new string[20];
                                dev.Initialize();
                                int i = 0;
                                PSPDEV CR = new PSPDEV();
                                CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                foreach (string str in array1)
                                {
                                    if (str != "")
                                    {
                                        if (i == 0)
                                        {
                                            dev[i++] = str.ToString();
                                        }
                                        else
                                        {
                                            if (str != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(str).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = str;
                                            }

                                        }
                                    }

                                }
                                i = 7;
                                for (int j = 3; j < 5; j++)
                                {
                                    if (array2[j] != "")
                                    {
                                        if (array2[j] != "NaN")
                                        {
                                            dev[i++] = Convert.ToDouble(array2[j]).ToString();
                                        }
                                        else
                                        {
                                            dev[i++] = array2[j];
                                        }
                                    }

                                }
                                CR.Name = dev[0];
                                CR.Type = "Polyline";
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                if (CR != null && CR.ReferenceVolt != 0)
                                {
                                    volt = CR.ReferenceVolt;
                                }
                                else
                                    volt = standvolt;
                                current = capability / (Math.Sqrt(3) * volt);
                                if (CR != null)
                                {
                                    if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                    {
                                        dev[11] = "1";
                                    }
                                    else
                                    {
                                        dev[11] = "0";
                                    }
                                    output += "'" + CR.Name.ToString() + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                }
                                else
                                {
                                    CR = new PSPDEV();
                                    CR.Name = dev[0];
                                    CR.Type = "TransformLine";
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                    if (CR != null)
                                    {
                                        if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                        {
                                            dev[11] = "1";
                                        }
                                        else
                                        {
                                            dev[11] = "0";
                                        }
                                        output += "'"+CR.Name.ToString() + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                    }
                                }

                                strLine = readLine.ReadLine();
                                strLine2 = readLine2.ReadLine();
                            }
                            readLine.Close();
                            readLine2.Close();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                }
                            }
                            catch (System.Exception ex3)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                            str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                            str1.Write(output);
                            str1.Close();


                            ex = new Excel.Application();
                            ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                            xSheet = (Excel.Worksheet)ex.Worksheets[1];
                            ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);

                            result1 = new Excel.Application();
                            result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                            tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                            newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
                            newWorksheet.Name = "线路电流";
                            xSheet.Name = "母线潮流";
                            ex.Visible = true;

                            tempSheet.Cells.Select();
                            tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                            newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 9]).MergeCells = true;
                            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
                            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                            xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[5, 9]).Interior.ColorIndex = 45;
                            xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                            xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                            xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";
                            //xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).NumberFormatLocal = "@";

                            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 9]).MergeCells = true;
                            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                            newWorksheet.get_Range(newWorksheet.Cells[5, 1], newWorksheet.Cells[5, 8]).Interior.ColorIndex = 45;
                            newWorksheet.get_Range(newWorksheet.Cells[6, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                           // newWorksheet.get_Range(newWorksheet.Cells[6, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).NumberFormatLocal = "@";
                            newWorksheet.get_Range(newWorksheet.Cells[6, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                            newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                            //op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fck.excel"), FileMode.OpenOrCreate);
                            //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                            xSheet.Rows.AutoFit();
                            xSheet.Columns.AutoFit();
                            newWorksheet.Rows.AutoFit();
                            newWorksheet.Columns.AutoFit();
                            string fn = tlVectorControl1.SVGDocument.FileName;

                            //result1.Save(System.Windows.Forms.Application.StartupPath + "\\fck.xls");

                            newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "牛拉法计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);



                            //str1.Write();
                            //op.Close();



                            System.Windows.Forms.Clipboard.Clear();
                            result1.Workbooks.Close();
                            result1.Quit();


                        }
                            catch (System.Exception e1)
                            {
                                MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        //}
                        break;
                    case "GaussSeidelResult":
                        try
                        {
                                  
                            if (!Check())
                            {
                                return;
                            }
                            Gauss pspgauss = new Gauss();
                            pspgauss.CurrentCal();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "高斯-赛德尔计算结果.xls"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "高斯-赛德尔计算结果.xls");
                                    //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                                }
                         
                            }
                            catch (System.Exception ex4)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0, Rad_to_Deg = 57.29577951;
                                PSPDEV benchmark = new PSPDEV();
                                benchmark.Type = "power";
                                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                                if (list3 == null)
                                {
                                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }
                                foreach (PSPDEV dev in list3)
                                {
                                    yinzi = Convert.ToDouble(dev.PowerFactor);
                                    capability = Convert.ToDouble(dev.StandardCurrent);
                                    volt = Convert.ToDouble(dev.StandardVolt);
                                    TLPSPVmin = dev.iV;
                                    TLPSPVmax = dev.jV;
                                    if (dev.PowerFactor == 0)
                                    {
                                        yinzi = 1;
                                    }
                                    if (dev.StandardCurrent == 0)
                                    {
                                        capability = 1;
                                    }
                                    if (dev.StandardVolt == 0)
                                    {
                                        volt = 1;
                                    }
                                    standvolt = volt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    
                                };
                                capability = 100;
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF3.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF3.txt", FileMode.Open);
                                readLine = new StreamReader(dh);

                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();

                                output += ("全网母线(发电、负荷)结果报表 " + "\r\n" + "\r\n");
                                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("母线名" + "," + "电压幅值" + "," + "电压相角" + "," + "有功发电" + "," + "无功发电" + "," + "有功负荷" + "," + "无功负荷" + "," + "越限标志" + "," + "过载标志" + "\r\n");
                                int count = 0;
                                while (strLine != null && strLine != "")
                                {
                                    array1 = strLine.Split(charSplit);
                                    string[] dev = new string[9];
                                    dev.Initialize();
                                    int i = 0;
                                    count++;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (str != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(str).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = str;
                                            }

                                        }

                                    }

                                    CR.Number = Convert.ToInt32(dev[0]);
                                    CR.Type = "Use";
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                                    if (CR!= null && CR.ReferenceVolt != 0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    else
                                        volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    double vTemp = Convert.ToDouble(dev[1]) * volt;
                                    double vTemp1 = volt * TLPSPVmin * getVolt(CR.ReferenceVolt) / CR.ReferenceVolt;
                                    double vTemp2 = volt * TLPSPVmax * getVolt(CR.ReferenceVolt) / CR.ReferenceVolt;

                                    if (vTemp >= vTemp1 && vTemp <= vTemp2)
                                    {
                                        dev[5] = "0";
                                    }
                                    else
                                    {
                                        dev[5] = "1";
                                    }
                                    if (Convert.ToDouble(dev[3]) * capability > Convert.ToDouble(CR.Burthen))
                                    {
                                        dev[6] = "1";
                                    }
                                    else
                                    {
                                        dev[6] = "0";
                                    }

                                    if (Convert.ToDouble(dev[3]) < 0)
                                    {

                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2]) * Rad_to_Deg).ToString() + "," + "0" + "," + "0" + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + dev[5] + "," + dev[6] + "\r\n";
                                    }
                                    else
                                    {

                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2]) * Rad_to_Deg).ToString() + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + "0" + "," + "0" + "," + dev[5] + "," + dev[6] + "\r\n";
                                    }
                                    strLine = readLine.ReadLine();
                                }
                                PSPDEV ct = new PSPDEV();
                                ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                ct.Type = "Use";
                                IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                                if (count < cont.Count)
                                {
                                    MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    readLine.Close();
                                    return;

                                }
                                readLine.Close();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                }
                            }
                            catch (System.Exception ex5)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();

                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH3.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH3.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH3.txt", FileMode.Open);
                                dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH3.txt", FileMode.Open);
                                readLine2 = new StreamReader(dh2);
                                readLine = new StreamReader(dh);
                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();
                                strLine2 = readLine2.ReadLine();

                                output = null;

                                output += ("全网交流线结果报表" + "\r\n" + "\r\n");
                                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("支路名称" + "," + "支路有功" + "," + "支路无功" + "," + "有功损耗" + "," + "无功损耗" + "," + "电流幅值" + "," + "电流相角" + "," + "越限标志" + "," + "\r\n");
                                while (strLine != null && strLine2 != null && strLine != "" && strLine2 != "")
                                {
                                    array1 = strLine.Split(charSplit);
                                    array2 = strLine2.Split(charSplit2);

                                    string[] dev = new string[20];
                                    dev.Initialize();
                                    int i = 0;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (i == 0)
                                            {
                                                dev[i++] = str.ToString();
                                            }
                                            else
                                            {
                                                if (str != "NaN")
                                                {
                                                    dev[i++] = Convert.ToDouble(str).ToString();
                                                }
                                                else
                                                {
                                                    dev[i++] = str;
                                                }

                                            }
                                        }

                                    }
                                                                       i = 7;
                                    for (int j = 3; j < 5; j++)
                                    {
                                        if (array2[j] != "")
                                        {
                                            if (array2[j] != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(array2[j]).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = array2[j];
                                            }
                                        }

                                    }
                                    CR.Name = dev[0];
                                    CR.Type = "Polyline";                                    
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                    if (CR != null && CR.ReferenceVolt != 0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    else
                                        volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    if (CR!=null)
                                    {
                                        if (Convert.ToDouble(dev[7]) * current*1000>CR.LineChange)
                                        {
                                            dev[11] = "1";
                                        } 
                                        else
                                        {
                                            dev[11] = "0";
                                        }
                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                    }
                                    else
                                    {
                                        CR = new PSPDEV();
                                        CR.Name = dev[0];
                                        CR.Type = "TransformLine";
                                        CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                        CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                        if (CR!=null)
                                        {
                                            if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                            {
                                                dev[11] = "1";
                                            }
                                            else
                                            {
                                                dev[11] = "0";
                                            }
                                            output += "'" + CR.Name + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                        }
                                    }
                                   
                                    strLine = readLine.ReadLine();
                                    strLine2 = readLine2.ReadLine();
                                }                                
                                readLine.Close();
                                readLine2.Close();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                }
                            }
                            catch (System.Exception ex6)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();


                                ex = new Excel.Application();
                                ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                xSheet = (Excel.Worksheet)ex.Worksheets[1];
                                ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);

                                result1 = new Excel.Application();
                                result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                                newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
                                newWorksheet.Name = "线路电流";
                                xSheet.Name = "母线潮流";
                                ex.Visible = true;

                                tempSheet.Cells.Select();
                                tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                                newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);
 
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 9]).MergeCells = true;
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[5, 9]).Interior.ColorIndex = 45;
                                xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 9]).MergeCells = true;
                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                newWorksheet.get_Range(newWorksheet.Cells[5, 1], newWorksheet.Cells[5, 8]).Interior.ColorIndex = 45;
                                newWorksheet.get_Range(newWorksheet.Cells[6, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                newWorksheet.get_Range(newWorksheet.Cells[6, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                                //op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fck.excel"), FileMode.OpenOrCreate);
                                //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                xSheet.Rows.AutoFit();
                                xSheet.Columns.AutoFit();
                                newWorksheet.Rows.AutoFit();
                                newWorksheet.Columns.AutoFit();
                                string fn = tlVectorControl1.SVGDocument.FileName;

                                //result1.Save(System.Windows.Forms.Application.StartupPath + "\\fck.xls");

                                newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "高斯-赛德尔计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);



                                //str1.Write();
                                //op.Close();



                                System.Windows.Forms.Clipboard.Clear();
                                result1.Workbooks.Close();
                                result1.Quit();
                           
                        }
                        catch (System.Exception e1)
                        {
                            MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        break;
                    case "N_RZYzResult":
                        try
                        {
                            if (!Check())
                            {
                                return;
                            }
                            ZYZ zyz = new ZYZ();
                            zyz.CurrentCal();
                            try
                            {           
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "最优乘子法计算结果.xls"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "最优乘子法计算结果.xls");
                                    //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                                }
                            }
                            catch (System.Exception ex7)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                      

                                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0, Rad_to_Deg = 57.29577951;
                                PSPDEV benchmark = new PSPDEV();
                                benchmark.Type = "power";
                                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                                if (list3 == null)
                                {
                                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }
                                foreach (PSPDEV dev in list3)
                                {
                                    yinzi = Convert.ToDouble(dev.PowerFactor);
                                    capability = Convert.ToDouble(dev.StandardCurrent);
                                    volt = Convert.ToDouble(dev.StandardVolt);
                                    TLPSPVmin = dev.iV;
                                    TLPSPVmax = dev.jV;
                                    if (dev.PowerFactor == 0)
                                    {
                                        yinzi = 1;
                                    }
                                    if ( dev.StandardCurrent == 0)
                                    {
                                        capability = 1;
                                    }
                                    if (dev.StandardVolt == 0)
                                    {
                                        volt = 1;
                                    }
                                    standvolt = volt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    
                                }
                                capability = 100;
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF4.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF4.txt", FileMode.Open);
                                readLine = new StreamReader(dh);

                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();

                                output += ("全网母线(发电、负荷)结果报表 " + "\r\n" + "\r\n");
                                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("母线名" + "," + "电压幅值" + "," + "电压相角" + "," + "有功发电" + "," + "无功发电" + "," + "有功负荷" + "," + "无功负荷" + "," + "越限标志" + "," + "过载标志" + "\r\n");
                                int count = 0;
                                while (strLine != null && strLine != "")
                                {
                                    array1 = strLine.Split(charSplit);
                                    string[] dev = new string[9];
                                    dev.Initialize();
                                    int i = 0;
                                    count++;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (str != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(str).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = str;
                                            }

                                        }

                                    }

                                    CR.Number = Convert.ToInt32(dev[0]);
                                    CR.Type = "Use";
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                                    if (CR != null && CR.ReferenceVolt != 0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    else
                                        volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    double vTemp = Convert.ToDouble(dev[1]) * volt;
                                    double vTemp1 = volt * TLPSPVmin * getVolt(CR.ReferenceVolt) / CR.ReferenceVolt;
                                    double vTemp2 = volt * TLPSPVmax * getVolt(CR.ReferenceVolt) / CR.ReferenceVolt;

                                    if (vTemp >= vTemp1 && vTemp <= vTemp2)
                                    {
                                        dev[5] = "0";
                                    }
                                    else
                                    {
                                        dev[5] = "1";
                                    }
                                    if (Convert.ToDouble(dev[3]) * capability > Convert.ToDouble(CR.Burthen))
                                    {
                                        dev[6] = "1";
                                    }
                                    else
                                    {
                                        dev[6] = "0";
                                    }
                                    if (Convert.ToDouble(dev[3]) < 0)
                                    {

                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2]) * Rad_to_Deg).ToString() + "," + "0" + "," + "0" + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + dev[5] + "," + dev[6] + "\r\n";
                                    }
                                    else
                                    {

                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2]) * Rad_to_Deg).ToString() + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + "0" + "," + "0" + "," + dev[5] + "," + dev[6] + "\r\n";
                                    }
                                    strLine = readLine.ReadLine();
                                }
                                PSPDEV ct = new PSPDEV();
                                ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                ct.Type = "Use";
                                IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                                if (count < cont.Count)
                                {
                                    MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    readLine.Close();
                                    return;

                                }
                                readLine.Close();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                }
                            }
                            catch (System.Exception ex8)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();

                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH4.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH4.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH4.txt", FileMode.Open);
                                dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH4.txt", FileMode.Open);
                                readLine2 = new StreamReader(dh2);
                                readLine = new StreamReader(dh);
                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();
                                strLine2 = readLine2.ReadLine();

                                output = null;

                                output += ("全网交流线结果报表" + "\r\n" + "\r\n");
                                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("支路名称" + "," + "支路有功" + "," + "支路无功" + "," + "有功损耗" + "," + "无功损耗" + "," + "电流幅值" + "," + "电流相角" + "," + "越限标志" + "," + "\r\n");
                                while (strLine != null && strLine2 != null && strLine != "" && strLine2 != "")
                                {
                                    array1 = strLine.Split(charSplit);
                                    array2 = strLine2.Split(charSplit2);

                                    string[] dev = new string[20];
                                    dev.Initialize();
                                    int i = 0;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (i == 0)
                                            {
                                                dev[i++] = str.ToString();
                                            }
                                            else
                                            {
                                                if (str != "NaN")
                                                {
                                                    dev[i++] = Convert.ToDouble(str).ToString();
                                                }
                                                else
                                                {
                                                    dev[i++] = str;
                                                }

                                            }
                                        }

                                    }
                                    i = 7;
                                    for (int j = 3; j < 5; j++)
                                    {
                                        if (array2[j] != "")
                                        {
                                            if (array2[j] != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(array2[j]).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = array2[j];
                                            }
                                        }

                                    }
                                    CR.Name = dev[0];
                                    CR.Type = "Polyline";
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                    if (CR != null&&CR.ReferenceVolt!=0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    else
                                    volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    if (CR != null)
                                    {
                                        if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                        {
                                            dev[11] = "1";
                                        }
                                        else
                                        {
                                            dev[11] = "0";
                                        }
                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                    }
                                    else
                                    {
                                        CR = new PSPDEV();
                                        CR.Name = dev[0];
                                        CR.Type = "TransformLine";
                                        CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                        CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                        if (CR != null)
                                        {
                                            if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                            {
                                                dev[11] = "1";
                                            }
                                            else
                                            {
                                                dev[11] = "0";
                                            }
                                            output += "'" + CR.Name + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                        }
                                    }

                                    strLine = readLine.ReadLine();
                                    strLine2 = readLine2.ReadLine();
                                }
                                readLine.Close();
                                readLine2.Close();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                }
                            }
                            catch (System.Exception ex9)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();


                                ex = new Excel.Application();
                                ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                xSheet = (Excel.Worksheet)ex.Worksheets[1];
                                ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);

                                result1 = new Excel.Application();
                                result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                                newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
                                newWorksheet.Name = "线路电流";
                                xSheet.Name = "母线潮流";
                                ex.Visible = true;

                                tempSheet.Cells.Select();
                                tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                                newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 9]).MergeCells = true;
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[5, 9]).Interior.ColorIndex = 45;
                                xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 9]).MergeCells = true;
                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                newWorksheet.get_Range(newWorksheet.Cells[5, 1], newWorksheet.Cells[5, 8]).Interior.ColorIndex = 45;
                                newWorksheet.get_Range(newWorksheet.Cells[6, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                newWorksheet.get_Range(newWorksheet.Cells[6, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                                //op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fck.excel"), FileMode.OpenOrCreate);
                                //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                xSheet.Rows.AutoFit();
                                xSheet.Columns.AutoFit();
                                newWorksheet.Rows.AutoFit();
                                newWorksheet.Columns.AutoFit();
                                string fn = tlVectorControl1.SVGDocument.FileName;

                                //result1.Save(System.Windows.Forms.Application.StartupPath + "\\fck.xls");

                                newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "最优乘子法计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);



                                //str1.Write();
                                //op.Close();



                                System.Windows.Forms.Clipboard.Clear();
                                result1.Workbooks.Close();
                                result1.Quit();
                          
                        }
                        catch (System.Exception e1)
                        {
                            MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        break;
                    case "VoltEvaluation":
                        PspVoltEvaluation();
                        break;
                    case "PowerLoss":
                        try
                        {
                            PspPowerLossCal();
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "线损计算结果.xls"))
                            {
                                //System.Diagnostics.Process.Start(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "线损计算结果.xls");
                                File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "线损计算结果.xls");
                                //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                            }
                            //else
                            //{
                            PSPDEV pspUse = new PSPDEV();
                            pspUse.Type = "Use";
                            pspUse.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspUse);
                            double tempAD = 0;
                            foreach (PSPDEV devAD in list1)
                            {
                                tempAD += devAD.OutP;
                            }
                                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0, Rad_to_Deg = 57.29577951;
                                PSPDEV benchmark = new PSPDEV();
                                benchmark.Type = "power";
                                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                                if (list3 == null)
                                {
                                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }    
                                foreach (PSPDEV dev in list3)
                                {
                                    yinzi = Convert.ToDouble(dev.PowerFactor);
                                    capability = Convert.ToDouble(dev.StandardCurrent);
                                    volt = Convert.ToDouble(dev.StandardVolt);
                                    TLPSPVmin = dev.iV;
                                    TLPSPVmax = dev.jV;
                                    if (dev.PowerFactor == 0)
                                    {
                                        yinzi = 1;
                                    }
                                    if (dev.StandardCurrent == 0)
                                    {
                                        capability = 1;
                                    }
                                    if (dev.StandardVolt == 0)
                                    {
                                        volt = 1;
                                    }
                                    volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                   
                                }
                                capability = 100;

                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH1.txt", FileMode.Open);
                                readLine = new StreamReader(dh);
                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();
                                double temp1 = 0;
                                double temp2 = 0;
                                output = null;

                                output += ("全网线损结果报表" + "\r\n" + "\r\n");
                                output += ("单位：MW" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("支路名称" + "," + "支路类型" + "," +"导线型号"+","+"导线长度"+"," + "有功损耗" + "," + "无功损耗" +"," + "线损率"+"\r\n");
                                while (strLine != null&& strLine != "" )
                                {
                                    array1 = strLine.Split(charSplit);


                                    string[] dev = new string[20];
                                    dev.Initialize();
                                    int i = 0;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    
                  
                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (i == 0)
                                            {
                                                dev[i++] = str.ToString();
                                            }
                                            else
                                            {
                                                if (str != "NaN")
                                                {
                                                    dev[i++] = Convert.ToDouble(str).ToString();
                                                }
                                                else
                                                {
                                                    dev[i++] = str;
                                                }

                                            }
                                        }

                                    }
                              
                                    CR.Name = dev[0];
                                    CR.Type = "Polyline";
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                    if (CR != null && CR.ReferenceVolt != 0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    else
                                        volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    if (CR != null)
                                    {
                                        output += "'" + CR.Name + "," + "普通线路" + "," + CR.LineType + "," + CR.LineLength + "," + (Convert.ToDouble(dev[5]) * capability + Convert.ToDouble(dev[9]) * volt * volt * capability / 1000000).ToString() + "," + (Convert.ToDouble(dev[6]) * capability + Convert.ToDouble(dev[10]) * volt * volt * capability / 1000000).ToString() + "," +Math.Abs(((Convert.ToDouble(dev[5]) * capability + Convert.ToDouble(dev[9]) * volt * volt * capability / 1000000) / (Convert.ToDouble(dev[3]) * capability))).ToString() + "\r\n";
                                        temp1+=Convert.ToDouble(dev[5]) * capability + Convert.ToDouble(dev[9]) * volt * volt * capability/1000000;
                                        temp2+=Convert.ToDouble(dev[6]) * capability + Convert.ToDouble(dev[10]) * volt * volt * capability/1000000;
                                    }
                                    else
                                    {
                                        CR = new PSPDEV();
                                        CR.Name = dev[0];
                                        CR.Type = "TransformLine";
                                        CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                        CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                        if (CR != null)
                                        {
                                            output += "'" + CR.Name + "," + "变压器支路" + "," + CR.LineType + "," + CR.LineLength + "," + (Convert.ToDouble(dev[5]) * capability + Convert.ToDouble(dev[9]) * volt * volt * capability / 1000000).ToString() + "," + (Convert.ToDouble(dev[6]) * capability + Convert.ToDouble(dev[10]) * volt * volt * capability / 1000000).ToString() + "," + Math.Abs(((Convert.ToDouble(dev[5]) * capability + Convert.ToDouble(dev[9]) * volt * volt * capability / 1000000) /( Convert.ToDouble(dev[3]) * capability))).ToString() + "\r\n";
                                            temp1+=Convert.ToDouble(dev[5]) * capability + Convert.ToDouble(dev[9]) * volt * volt * capability/1000000;
                                            temp2+=Convert.ToDouble(dev[6]) * capability + Convert.ToDouble(dev[10]) * volt * volt * capability/1000000;
                                        }
                                    }

                                    strLine = readLine.ReadLine();                                   
                                }
                                readLine.Close();
                                output += ("总损耗" + "," + "线路 " + "," + "" + "," + "" + "," + temp1 + "," + temp2 + "," + temp1 / tempAD + "\r\n");
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                }
                            }
                            catch (System.Exception ex10)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();


                                ex = new Excel.Application();
                                ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                xSheet = (Excel.Worksheet)ex.Worksheets[1];
                                //ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);

                                //result1 = new Excel.Application();
                                //result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                //tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                                //newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(1);
                                //newWorksheet.Name = "线损结果";
                                xSheet.Name = "线损结果";
                                ex.Visible = true;

                                //tempSheet.Cells.Select();
                                //tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                                //newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 7]).MergeCells = true;
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[5, 7]).Interior.ColorIndex = 45;
                                xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                //xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 2]).ColumnWidth = 12;
                                xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 2]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 7]).NumberFormat = "0.0000_ ";
                                xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 7]).Font.Name = "楷体_GB2312";
                                xSheet.get_Range(xSheet.Cells[6, 7], xSheet.Cells[xSheet.UsedRange.Rows.Count, 7]).NumberFormatLocal = "0.0000%";
                                //newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 9]).MergeCells = true;
                                //newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                                //newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                                //newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                //newWorksheet.get_Range(newWorksheet.Cells[5, 1], newWorksheet.Cells[5, 8]).Interior.ColorIndex = 45;
                                //newWorksheet.get_Range(newWorksheet.Cells[6, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                //newWorksheet.get_Range(newWorksheet.Cells[6, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                //newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                                //op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fck.excel"), FileMode.OpenOrCreate);
                                //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                xSheet.Rows.AutoFit();
                                xSheet.Columns.AutoFit();
                                string fn = tlVectorControl1.SVGDocument.FileName;

                                //result1.Save(System.Windows.Forms.Application.StartupPath + "\\fck.xls");

                                //newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "线损计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);
                                
                                //str1.Write();
                                //op.Close();

                                xSheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "线损计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);

                                System.Windows.Forms.Clipboard.Clear();
                                //result1.Workbooks.Close();
                                //result1.Quit();
                                //ex.Workbooks.Close();
                                //ex.Quit();                
                            }
                        //}
                        catch (System.Exception e1)
                        {
                            MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        break;                   
                    case "ZLPResult1":                     
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt"))
                        {
                        }
                        else
                        {
                            return;
                        }
                        dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH1.txt", FileMode.Open);
                        readLine = new StreamReader(dh);
                        charSplit = new char[] { ' ' };
                        strLine = readLine.ReadLine();
                        output = null;
                        output += ("全网交流线结果报表" + "\r\n" + "\r\n");
                        output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                        output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                        output += ("支路名称" + "," + "支路有功" + "," + "支路无功" + "," + "有功损耗" + "," + "无功损耗"+ "\r\n");
                        while (strLine != null)
                        {
                            array1 = strLine.Split(charSplit);
                            string[] dev = new string[9];
                            dev.Initialize();
                            int i = 0;
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                            foreach (string str in array1)
                            {
                                if (str != "")
                                {
                                    if (str != "NaN")
                                    {
                                        dev[i++] = Convert.ToDouble(str).ToString();
                                    }
                                    else
                                    {
                                        dev[i++] = str;
                                    }

                                }

                            }
                            CR.Number = Convert.ToInt32(dev[0]);
                            CR.Type = "Polyline";
                            CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                            output += "'" + CR.Name + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "\r\n";
                            strLine = readLine.ReadLine();
                        }
                        readLine.Close();
                        try
                        {
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                            {
                                File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                            }
                        }
                        catch (System.Exception ex11)
                        {
                            MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                        str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                        str1.Write(output);
                        str1.Close();

                        ex = new Excel.Application();
                        ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                        ex.Visible = true;

                        break;

                    case "ZLAResult1":

                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                        {
                        }
                        else
                        {
                            return;
                        }
                        dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH1.txt", FileMode.Open);
                        readLine = new StreamReader(dh);
                        charSplit = new char[] { ' ' };
                        strLine = readLine.ReadLine();
                        output = null;

                        output += ("支路名称" + "," + "电流幅值" + "," + "电流相角" + "," + "越限标志"+ "\r\n");
                        while (strLine != null)
                        {
                            array1 = strLine.Split(charSplit);
                            string[] dev = new string[9];
                            dev.Initialize();
                            int i = 0;
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                            foreach (string str in array1)
                            {
                                if (str != "")
                                {
                                    if (str != "NaN")
                                    {
                                        dev[i++] = Convert.ToDouble(str).ToString();
                                    }
                                    else
                                    {
                                        dev[i++] = str;
                                    }

                                }

                            }
                            CR.Number = Convert.ToInt32(dev[0]);
                            CR.Type = "Polyline";
                            CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                            output += "'" + CR.Name + "," + dev[3] + "," + dev[4] + "," + dev[5] + "\r\n";
                            strLine = readLine.ReadLine();
                        }
                        readLine.Close();
                        try
                        {
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                            {
                                File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                            }
                        }
                        catch (System.Exception ex12)
                        {
                            MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                        str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                        str1.Write(output);
                        str1.Close();

                        ex = new Excel.Application();
                        ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                        ex.Visible = true;

                        break;

                    case "PQResult":
                        try
                        {
                            if (!CheckPQ())
                            {
                                return;
                            }
                            PQ_PowerFlowCalClass pq = new PQ_PowerFlowCalClass();
                            pq.CurrentCal();
                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "PQ法计算结果.xls"))
                                {
                                    //System.Diagnostics.Process.Start(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "PQ法计算结果.xls");
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "PQ法计算结果.xls");

                                }     
                            }
                            catch (System.Exception ex13)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                  
                                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0, Rad_to_Deg = 57.29577951;
                                PSPDEV benchmark = new PSPDEV();
                                benchmark.Type = "power";
                                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                                if (list3 == null)
                                {
                                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }
                                foreach (PSPDEV dev in list3)
                                {
                                    yinzi = Convert.ToDouble(dev.PowerFactor);
                                    capability = Convert.ToDouble(dev.StandardCurrent);
                                    volt = Convert.ToDouble(dev.StandardVolt);
                                    TLPSPVmin = dev.iV;
                                    TLPSPVmax = dev.jV;
                                    if (dev.PowerFactor == 0)
                                    {
                                        yinzi = 1;
                                    }
                                    if (dev.StandardCurrent == 0)
                                    {
                                        capability = 1;
                                    }
                                    if (dev.StandardVolt == 0)
                                    {
                                        volt = 1;
                                    }
                                    standvolt = volt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                   

                                }
                                capability = 100;
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF2.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF2.txt", FileMode.Open);
                                readLine = new StreamReader(dh);

                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();
                                output = null;
                                int count = 0;
                                output += ("全网母线(发电、负荷)结果报表 " + "\r\n" + "\r\n");
                                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("母线名" + "," + "电压幅值" + "," + "电压相角" + "," + "有功发电" + "," + "无功发电" + "," + "有功负荷" + "," + "无功负荷" + "," + "越限标志" + "," + "过载标志" + "\r\n");
                                while (strLine != null && strLine != "")
                                {
                                    array1 = strLine.Split(charSplit);
                                    string[] dev = new string[9];
                                    dev.Initialize();
                                    int i = 0;
                                    count++;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (str != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(str).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = str;
                                            }

                                        }

                                    }

                                    CR.Number = Convert.ToInt32(dev[0]);
                                    CR.Type = "Use";
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                                    if (CR != null && CR.ReferenceVolt != 0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    else
                                        volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    double vTemp = Convert.ToDouble(dev[1]) * volt;
                                    double vTemp1 = volt * TLPSPVmin * getVolt(CR.ReferenceVolt) / CR.ReferenceVolt;
                                    double vTemp2 = volt * TLPSPVmax * getVolt(CR.ReferenceVolt) / CR.ReferenceVolt;

                                    if (vTemp >= vTemp1 && vTemp <= vTemp2)
                                    {
                                        dev[5] = "0";
                                    }
                                    else
                                    {
                                        dev[5] = "1";
                                    }
                                    if (Convert.ToDouble(dev[3]) * capability > Convert.ToDouble(CR.Burthen))
                                    {
                                        dev[6] = "1";
                                    }
                                    else
                                    {
                                        dev[6] = "0";
                                    }
                                    if (Convert.ToDouble(dev[3]) < 0)
                                    {

                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2])).ToString() + "," + "0" + "," + "0" + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + dev[5] + "," + dev[6] + "\r\n";
                                    }
                                    else
                                    {

                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[1]) * volt).ToString() + "," + (Convert.ToDouble(dev[2])).ToString() + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + "0" + "," + "0" + "," + dev[5] + "," + dev[6] + "\r\n";
                                    }
                                    strLine = readLine.ReadLine();
                                }
                                PSPDEV ct = new PSPDEV();
                                ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                ct.Type = "Use";
                                IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                                if (count < cont.Count)
                                {
                                    MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    readLine.Close();
                                    return;

                                }
                                readLine.Close();

                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                }
                            }
                            catch (System.Exception ex14)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
    
                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();

                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH2.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH2.txt"))
                                {
                                }
                                else
                                {
                                    return;
                                }
                                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH2.txt", FileMode.Open);
                                dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH2.txt", FileMode.Open);
                                readLine2 = new StreamReader(dh2);

                                readLine = new StreamReader(dh);
                                charSplit = new char[] { ' ' };
                                strLine = readLine.ReadLine();
                                charSplit2 = new char[] { ' ' };
                                strLine2 = readLine2.ReadLine();
                                output = null;
                                output += ("全网交流线结果报表" + "\r\n" + "\r\n");
                                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                                output += ("支路名称" + "," + "支路有功" + "," + "支路无功" + "," + "有功损耗" + "," + "无功损耗" + "," + "电流幅值" + "," + "电流相角" + "," + "越限标志" + "," + "\r\n");
                                while (strLine != null && strLine2 != null && strLine != "" && strLine2 != "")
                                {
                                    array1 = strLine.Split(charSplit);
                                    array2 = strLine2.Split(charSplit2);

                                    string[] dev = new string[20];
                                    dev.Initialize();
                                    int i = 0;
                                    PSPDEV CR = new PSPDEV();
                                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                                    foreach (string str in array1)
                                    {
                                        if (str != "")
                                        {
                                            if (i == 0)
                                            {
                                                dev[i++] = str.ToString();
                                            }
                                            else
                                            {
                                                if (str != "NaN")
                                                {
                                                    dev[i++] = Convert.ToDouble(str).ToString();
                                                }
                                                else
                                                {
                                                    dev[i++] = str;
                                                }

                                            }
                                        }

                                    }
                                    i = 7;
                                    for (int j = 3; j < 5; j++)
                                    {
                                        if (array2[j] != "")
                                        {
                                            if (array2[j] != "NaN")
                                            {
                                                dev[i++] = Convert.ToDouble(array2[j]).ToString();
                                            }
                                            else
                                            {
                                                dev[i++] = array2[j];
                                            }
                                        }

                                    }
                                    CR.Name = dev[0];
                                    CR.Type = "Polyline";
                                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                    if (CR != null&&CR.ReferenceVolt!=0)
                                    {
                                        volt = CR.ReferenceVolt;
                                    }
                                    volt = standvolt;
                                    current = capability / (Math.Sqrt(3) * volt);
                                    if (CR != null)
                                    {
                                        if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                        {
                                            dev[11] = "1";
                                        }
                                        else
                                        {
                                            dev[11] = "0";
                                        }
                                        output += "'" + CR.Name + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                    }
                                    else
                                    {
                                        CR = new PSPDEV();
                                        CR.Name = dev[0];
                                        CR.Type = "TransformLine";
                                        CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                        CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                                        if (CR != null)
                                        {
                                            if (Convert.ToDouble(dev[7]) * current * 1000 > CR.LineChange)
                                            {
                                                dev[11] = "1";
                                            }
                                            else
                                            {
                                                dev[11] = "0";
                                            }
                                            output += "'" + CR.Name + "," + (Convert.ToDouble(dev[3]) * capability).ToString() + "," + (Convert.ToDouble(dev[4]) * capability).ToString() + "," + (Convert.ToDouble(dev[5]) * capability).ToString() + "," + (Convert.ToDouble(dev[6]) * capability).ToString() + "," + (Convert.ToDouble(dev[7]) * current).ToString() + "," + (Convert.ToDouble(dev[8]) * Rad_to_Deg).ToString() + "," + dev[11] + "," + "\r\n";
                                        }
                                    }

                                    strLine = readLine.ReadLine();
                                    strLine2 = readLine2.ReadLine();
                                }
                                readLine.Close();
                                readLine2.Close();

                            try
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                                {
                                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                }
                            }
                            catch (System.Exception ex15)
                            {
                                MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                                str1.Write(output);
                                str1.Close();

                                Excel.Application ex2 = new Excel.Application();
                                ex2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                                Excel.Worksheet xSheet2 = (Excel.Worksheet)ex2.Worksheets[1];
                                ex2.Worksheets.Add(System.Reflection.Missing.Value, xSheet2, 1, System.Reflection.Missing.Value);

                                Excel.Application result11 = new Excel.Application();
                                result11.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                                Excel.Application result12 = new Excel.Application();

                                Excel.Worksheet tempSheet11 = (Excel.Worksheet)result11.Worksheets.get_Item(1);

                                Excel.Worksheet newWorksheet11 = (Excel.Worksheet)ex2.Worksheets.get_Item(2);

                                newWorksheet11.Name = "线路电流";
                                xSheet2.Name = "母线潮流";

                                ex2.Visible = true;
                                tempSheet11.Cells.Select();
                                tempSheet11.Cells.Copy(System.Reflection.Missing.Value);
                                newWorksheet11.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);


                                xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 9]).MergeCells = true;
                                xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 1]).Font.Size = 20;
                                xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 1]).Font.Name = "黑体";
                                xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                xSheet2.get_Range(xSheet2.Cells[5, 1], xSheet2.Cells[5, 9]).Interior.ColorIndex = 45;
                                xSheet2.get_Range(xSheet2.Cells[6, 1], xSheet2.Cells[xSheet2.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                xSheet2.get_Range(xSheet2.Cells[6, 2], xSheet2.Cells[xSheet2.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                xSheet2.get_Range(xSheet2.Cells[3, 1], xSheet2.Cells[xSheet2.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                                newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 9]).MergeCells = true;
                                newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 1]).Font.Size = 20;
                                newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 1]).Font.Name = "黑体";
                                newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                                newWorksheet11.get_Range(newWorksheet11.Cells[5, 1], newWorksheet11.Cells[5, 8]).Interior.ColorIndex = 45;
                                newWorksheet11.get_Range(newWorksheet11.Cells[6, 1], newWorksheet11.Cells[newWorksheet11.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                                newWorksheet11.get_Range(newWorksheet11.Cells[6, 2], newWorksheet11.Cells[newWorksheet11.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                                newWorksheet11.get_Range(newWorksheet11.Cells[3, 1], newWorksheet11.Cells[newWorksheet11.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";
                                xSheet2.Rows.AutoFit();
                                xSheet2.Columns.AutoFit();
                                newWorksheet11.Rows.AutoFit();
                                newWorksheet11.Columns.AutoFit();
                                string fn = tlVectorControl1.SVGDocument.FileName;

                                //result1.Save(System.Windows.Forms.Application.StartupPath + "\\fck.xls");

                                newWorksheet11.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "PQ法计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);


                                System.Windows.Forms.Clipboard.Clear();

                                result11.Workbooks.Close();
                                result11.Quit();
                           
                        }
                        catch (System.Exception e3)
                        {
                            MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                       
                        break;


                    case "mDLR":


                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.txt"))
                        {
                        }
                        else
                        {
                            return;
                        }
                        int ij = 1;
                        dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\result.txt", FileMode.Open);
                        readLine = new StreamReader(dh);
                        
                        charSplit = new char[] { ' ' };
                        strLine = readLine.ReadLine();
                        output = null;

                        FileStream dh5 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\dlb.txt", FileMode.Open);
                        StreamReader readLine5 = new StreamReader(dh5);
                        string strLine5;
                        string[] array5;
                        char[] charSplit5 = new char[] { ' ' };
                        strLine5 = readLine5.ReadLine();
                        array5 = strLine5.Split(charSplit5);

                        output += ("全网短路计算结果报表" + "\r\n" + "\r\n");

                        PSPDEV CR235 = new PSPDEV();
                        CR235.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        CR235.Number = Convert.ToInt32(array5[0]);
                        CR235.Type = array5[1];
                        double ibb=0;
                    double temp11=0;
                        CR235 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR235);

                          if (CR235 == null)
                            {
                                MessageBox.Show("错误！当前图元与结果报表不符！");
                                readLine.Close();
                                readLine5.Close();
                                return;
                            }
                        output += ("短路点"+":"+" "+CR235.Name+"   "+"故障类型"+":"+ " "+array5[2] + "\r\n" + "\r\n");

                        output += ("名称" + ","+"零序电流" + "," + "正序电流" + "," + "负序电流" + "," + "A相电流" + "," + "B相电流" + "," + "C相电流" + ","+ "短路电流"+","+"短路容量"+","+"\r\n");
                        while (strLine != null)
                        {
                            array1 = strLine.Split(charSplit);
                            string[] dev = new string[9];
                            dev.Initialize();
                            int i = 0;
                             PSPDEV CR2 = new PSPDEV();
                            CR2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            foreach (string str in array1)
                            {
                                if (str != "")
                                {
                                    if (str != "NaN")
                                    {
                                        dev[i++] = Convert.ToDouble(str).ToString();
                                    }
                                    else
                                    {
                                        dev[i++] = str;
                                    }

                                }

                            }

                            //CR2.Number = Convert.ToInt32(dev[2]);
                            //CR2.Type = "Use";
                            //CR2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR2);
                              CR2.Number = Convert.ToInt32(array5[0]);
                        CR2.Type = array5[1];
                        string nodeName = CR2.Name;

                        
                        CR2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR2);
                        int vr = Convert.ToInt32(CR2.VoltR);

                        switch (vr)
                        {
                            case 220:
                                {
                                    ibb = 251.03;
                                    for (int j = 3; j < 9; j++)
                                    {
                                        temp11 = Convert.ToDouble(dev[j]) * ibb * 0.001;
                                        dev[j] = temp11.ToString();
                                    }
                                    ibb = Convert.ToDouble(dev[4])*3;
                                    temp11 = 1.732 * ibb * 230;

                                }
                                break;
                            case 500:
                                {
                                    ibb = 104.98;
                                    for (int j = 3; j < 9; j++)
                                    {
                                        temp11 = Convert.ToDouble(dev[j]) * ibb * 0.001;
                                        dev[j] = temp11.ToString();
                                    }
                                    ibb = Convert.ToDouble(dev[4])*3;
                                    temp11 = 1.732 * ibb * 550;

                                }
                                break;
                            default:
                                { }
                                break;
                        }
                        if (ij == 1)
                        {
                            output += CR2.Name + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] +","+ibb.ToString()+","+temp11.ToString()+","+ "\r\n";
                        }
                        else
                        {
                            CR2.Number = Convert.ToInt32(dev[2]);
                           
                            CR2.Type = "Polyline";
                            CR2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR2);
                            
                           
                            //output += CR2.Name + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "\r\n";
                            if (CR2 != null)
                            {
                                output += CR2.Name + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "\r\n";
                            }
                            else if (dev[2]=="500")
                            {
                                output += nodeName+"故障生成线路" + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "\r\n";
                            }
                        } 
                        ij = 0;
                            strLine = readLine.ReadLine();
                        }
                        readLine.Close();
                        readLine5.Close();
                        try
                        {
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                            {
                                File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                            }
                        }
                        catch (System.Exception ex16)
                        {
                            MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                        op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                        str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                        str1.Write(output);
                        str1.Close();

                        ex = new Excel.Application();
                        ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                        //ex.Visible = true;

                        //Excel.Application ex = new Excel.Application();



                        ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                        xSheet = (Excel.Worksheet)ex.Worksheets[1];
                        //ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);

                        //result1 = new Excel.Application();
                        //result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                       //tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                        //Excel.Worksheet newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
                        //newWorksheet.Name = "线路电流";
                        xSheet.Name = "短路计算";
                       
                        //tempSheet.Cells.Select();
                        //tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                        //newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                        xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 9]).MergeCells = true;
                    xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
                    xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                    xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;

                    xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[3,1]).Font.Name = "楷体_GB2312";

                    xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[5, 9]).Interior.ColorIndex = 45;

                    xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex =6;
                    xSheet.get_Range(xSheet.Cells[8, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                    xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                       
                        System.Windows.Forms.Clipboard.Clear();
                        //result1.Workbooks.Close();
                        //result1.Quit();
                        ex.Visible = true;
                        break;

                    case "mEnclosure":
                        tlVectorControl1.Operation = ToolOperation.Enclosure;
                        
                        break;

                    case "mGroup":
                        tlVectorControl1.Group();
                        break;
                    case "mUnGroup":
                        tlVectorControl1.UnGroup();
                        break;
                    case "mlinelx":
                        tlVectorControl1.Operation = ToolOperation.ConnectLine_Line;
                        break;
                    case "mzxlx":
                        tlVectorControl1.Operation = ToolOperation.ConnectLine_Rightangle;
                        break;
                    case "mqxlx":
                        tlVectorControl1.Operation = ToolOperation.ConnectLine_Spline;
                        break;
                    case "mqzlx":
                        tlVectorControl1.Operation = ToolOperation.ConnectLine_Polyline;
                        break;
                    case "mCJ1":
                        tlVectorControl1.Operation = ToolOperation.PolyLine;
                        csOperation = CustomOperation.OP_MeasureDistance;
                        break;
                    case "powerFactor":
                        PSPDEV pspDev2 = new PSPDEV();

                      
                        //pspDev2.SUID = Guid.NewGuid().ToString();
                        pspDev2.Type = "Power";
                        pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pspDev2);
                        if(pspDev2 != null)
                        {
                        }
                        else
                        {
                            pspDev2 = new PSPDEV();
                            pspDev2.SUID = Guid.NewGuid().ToString();
                            pspDev2.Type = "Power";
                            pspDev2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            pspDev2.iV = 0.95;
                            pspDev2.jV = 1.05;
                            Services.BaseService.Create<PSPDEV>(pspDev2);
                        }
                        powerf pp = new powerf(pspDev2);
                        if (pp.ShowDialog() == DialogResult.OK)
                        {
                            pspDev2.PowerFactor = Convert.ToDouble(pp.powerfactor);
                            pspDev2.StandardVolt = Convert.ToDouble(pp.standardvolt);
                            pspDev2.StandardCurrent = Convert.ToDouble(pp.standardcurrent);
                            pspDev2.BigP = Convert.ToDouble(pp.bigP);
                            pspDev2.iV = Convert.ToDouble(pp.Vmin);
                            pspDev2.jV = Convert.ToDouble(pp.Vmax);
                            Services.BaseService.Update<PSPDEV>(pspDev2);
                            PSPDEV voltall=new PSPDEV();
                            voltall.Type="Use";
                            voltall.Lable="电厂";
                            voltall.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.OutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.OutQ = dev.OutP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }
                            voltall.Lable = "变电站";
                            allvolt = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", voltall);
                            foreach (PSPDEV dev in allvolt)
                            {
                                dev.InPutP = Convert.ToDouble(dev.Burthen) * pspDev2.BigP;
                                //dev.InPutP=dev.Burthen*pspDev2.BigP;
                                dev.InPutQ = dev.InPutP * pspDev2.BigP * Math.Tan(Math.Acos(pspDev2.PowerFactor));
                                Services.BaseService.Update<PSPDEV>(dev);
                            }

                        }
                        break;
                    //if (=null)
                    //{
                    //case "Allcheck":
                    //    Allshortcheck(1);
                    //    dotNetBarManager1.Bars["bar2"].GetItem("Allcheck").Enabled = false;
                    //    dotNetBarManager1.Bars["bar2"].GetItem("Indivcheck").Enabled = true;
                    //    break;
                    //case "Indivcheck":
                    //     Allshortcheck(2);
                    //     dotNetBarManager1.Bars["bar2"].GetItem("Indivcheck").Enabled = false;
                    //    dotNetBarManager1.Bars["bar2"].GetItem("ZLcheck").Enabled = true;
                    //    break;
                    case "ZLcheck":
                        Allshortcheck(3);
                        dotNetBarManager1.Bars["bar2"].GetItem("ZLcheck").Enabled = false;
                        dotNetBarManager1.Bars["bar2"].GetItem("Jiaoliucheck").Enabled = true;
                        //dotNetBarManager1.Bars["bar2"].GetItem("DLqiOutResult").Enabled =true;
                        break;
                    case"Jiaoliucheck":
                        Allshortcheck(2);
                        dotNetBarManager1.Bars["bar2"].GetItem("Jiaoliucheck").Enabled = false;
                        dotNetBarManager1.Bars["bar2"].GetItem("ZLcheck").Enabled = true;
                     
                        break;
                    #endregion

                    #region 视图
                    case "mOption":
                        tlVectorControl1.SetOption();
                        break;
                    case "mAirscape":
                        frmAirscape fAir = new frmAirscape();
                        fAir.InitData(tlVectorControl1);
                        fAir.Owner = this;
                        fAir.ShowInTaskbar = false;
                        fAir.Top = Screen.PrimaryScreen.WorkingArea.Height - 250;
                        fAir.Left = Screen.PrimaryScreen.WorkingArea.Width - 300;
                        fAir.Show();
                        break;
                    case "btTL":
                        frmGlebeTypeList fgle = new frmGlebeTypeList();
                        fgle.Show();
                        break;
                    #endregion

                    #region 布局，对齐，顺序
                    case "mRotate":
                        if (btItem.Tag is ButtonItem)
                        {
                            btItem = btItem.Tag as ButtonItem;
                            tlVectorControl1.FlipX();


                        }
                        else
                        {
                            tlVectorControl1.FlipX();
                        }
                        break;
                    case "mToH":

                        tlVectorControl1.FlipX();
                        //this.rotateButton.Tag = btItem;
                        //this.rotateButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mToV":
                        tlVectorControl1.FlipY();
                        //this.rotateButton.Tag = btItem;
                        //this.rotateButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mToLeft":
                        tlVectorControl1.RotateSelection(-90f);
                        ////this.rotateButton.Tag = btItem;
                        ////this.rotateButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mToRight":
                        tlVectorControl1.RotateSelection(90f);
                        //this.rotateButton.Tag = btItem;
                        //this.rotateButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mAlign":
                        if (btItem.Tag is ButtonItem)
                        {
                            btItem = btItem.Tag as ButtonItem;
                            tlVectorControl1.Align(AlignType.Left);

                        }
                        else
                        {
                            tlVectorControl1.Align(AlignType.Left);

                        }
                        tlVectorControl1.Refresh();
                        break;
                    case "mAlignLeft":
                        tlVectorControl1.Align(AlignType.Left);
                        this.alignButton.ImageIndex = btItem.ImageIndex;
                        this.alignButton.Tag = btItem;
                        tlVectorControl1.Refresh();
                        break;
                    case "mAlignRight":
                        tlVectorControl1.Align(AlignType.Right);
                        this.alignButton.ImageIndex = btItem.ImageIndex;
                        this.alignButton.Tag = btItem;
                        tlVectorControl1.Refresh();
                        break;
                    case "mAlignTop":
                        tlVectorControl1.Align(AlignType.Top);
                        this.alignButton.ImageIndex = btItem.ImageIndex;
                        this.alignButton.Tag = btItem;
                        tlVectorControl1.Refresh();
                        break;
                    case "mAlignBottom":
                        tlVectorControl1.Align(AlignType.Bottom);
                        this.alignButton.ImageIndex = btItem.ImageIndex;
                        this.alignButton.Tag = btItem;
                        tlVectorControl1.Refresh();
                        break;
                    case "mAlignHorizontalCenter":
                        tlVectorControl1.Align(AlignType.HorizontalCenter);
                        this.alignButton.ImageIndex = btItem.ImageIndex;
                        this.alignButton.Tag = btItem;
                        tlVectorControl1.Refresh();
                        break;
                    case "mAlignVerticalCenter":
                        tlVectorControl1.Align(AlignType.VerticalCenter);
                        this.alignButton.ImageIndex = btItem.ImageIndex;
                        this.alignButton.Tag = btItem;
                        tlVectorControl1.Refresh();
                        break;
                    case "mOrder":
                        if (btItem.Tag is ButtonItem)
                        {
                            btItem = btItem.Tag as ButtonItem;
                            tlVectorControl1.ChangeLevel(LevelType.Top);

                        }
                        else
                        {
                            tlVectorControl1.ChangeLevel(LevelType.Top);
                        }

                        break;
                    case "mGoTop":
                        tlVectorControl1.ChangeLevel(LevelType.Top);
                        this.orderButton.Tag = btItem;
                        this.orderButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mGoUp":
                        tlVectorControl1.ChangeLevel(LevelType.Up);
                        this.orderButton.Tag = btItem;
                        this.orderButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mGoDown":
                        tlVectorControl1.ChangeLevel(LevelType.Down);
                        this.orderButton.Tag = btItem;
                        this.orderButton.ImageIndex = btItem.ImageIndex;
                        break;
                    case "mGoBottom":
                        tlVectorControl1.ChangeLevel(LevelType.Bottom);
                        this.orderButton.Tag = btItem;
                        this.orderButton.ImageIndex = btItem.ImageIndex;
                        break;
                    #endregion
                    #region 图元操作
                    case "mCopy":
                        tlVectorControl1.Copy();
                        break;
                    case "mCut":
                        tlVectorControl1.Cut();
                        break;
                    case "mPaste":
                        tlVectorControl1.Paste();
                        break;
                    case "mDelete":
                        if (tlVectorControl1.SVGDocument.CurrentElement is SVG)
                        {
                        }
                        else
                        {
                            if (MessageBox.Show("确定要删除么?", "提示", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                SvgElementCollection collection = tlVectorControl1.SVGDocument.SelectCollection;
                                foreach (XmlElement element in collection)
                                {
                                    PSPDEV pspDev = new PSPDEV();
                                    pspDev.EleID = element.GetAttribute("id");
                                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                                    Services.BaseService.Delete<PSPDEV>(pspDev);
                                }
                                tlVectorControl1.Delete();
                            }

                        }                       
                        break;
                    case "mUodo":
                        tlVectorControl1.Undo();
                        break;
                    case "mRedo":
                        tlVectorControl1.Redo();
                        break;
                    #endregion
                    #region 业务操作

                    case "mXLine":
                        tlVectorControl1.Operation = ToolOperation.Select;
                        tlVectorControl1.Operation = ToolOperation.XPolyLine;
                        break;
                    case "mYLine":
                        tlVectorControl1.Operation = ToolOperation.Select;
                        tlVectorControl1.Operation = ToolOperation.YPolyLine;
                        break;

                    case "mSaveGroup":
                        if (tlVectorControl1.SVGDocument.SelectCollection.Count > 1)
                        {
                            string content = "<svg>";
                            SvgElementCollection col = tlVectorControl1.SVGDocument.SelectCollection;
                            for (int i = 0; i < col.Count; i++)
                            {
                                SvgElement _e = (SvgElement)col[i];
                                if (_e.ID != "svg")
                                {
                                    content = content + _e.OuterXml;
                                }
                            }
                            RectangleF rect = tlVectorControl1.DrawArea.viewer.SelectedViewRectangle;

                            content = content + "</svg>";
                            frmSaveGroup fm = new frmSaveGroup();
                            fm.rect = rect;
                            fm.Content = content;
                            fm.ShowDialog();
                        }
                        else
                        {
                            MessageBox.Show("请至少选择2个图元。", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        break;

                    case "mInsert":
                        frmUseGroup fg = new frmUseGroup();
                        if (fg.ShowDialog() == DialogResult.OK)
                        {
                            UseGroup u = fg.SelectedUseGroup;
                            if (u != null)
                            {
                                frmXY xy = new frmXY();
                                if (xy.ShowDialog() == DialogResult.OK)
                                {
                                    decimal x = xy.GetX();
                                    decimal y = xy.GetY();
                                    string content = u.Content;
                                    XmlDocument doc = new XmlDocument();
                                    doc.LoadXml(u.Content);
                                    XmlNodeList list = doc.ChildNodes;
                                    XmlNode _node = list[0];
                                    XmlNodeList sonlist = _node.ChildNodes;
                                    XmlElement ele = tlVectorControl1.SVGDocument.CreateElement("g");
                                    ele.SetAttribute("layer", SvgDocument.currentLayer);
                                    for (int i = 0; i < sonlist.Count; i++)
                                    {
                                        XmlNode _sonnode = sonlist[i];
                                        //string str = _sonnode.OuterXml;
                                        if (_sonnode.Name == "use")
                                        {
                                            string sid = ((XmlElement)_sonnode).GetAttribute("xlink:href");
                                            XmlNode _snode = symbolSelector.SymbolDoc.SelectSingleNode("//*[@id='" + sid.Substring(1) + "']");
                                            tlVectorControl1.SVGDocument.AddDefsElement((SvgElement)_snode);
                                        }
                                        ele.AppendChild(_sonnode);
                                        string ss = ele.OuterXml;
                                    }
                                    //RectangleF r=((Group)ele).GetBounds();
                                    string tr = "matrix(1,0,0,1,";

                                    tr = tr + Convert.ToString(x - Convert.ToDecimal(u.X)) + ",";
                                    tr = tr + Convert.ToString(y - Convert.ToDecimal(u.Y)) + ")";

                                    ele.SetAttribute("transform", tr);
                                    // transform="matrix(1,0,0,1,2558.82,-352.94)"
                                    tlVectorControl1.SVGDocument.RootElement.AppendChild(ele);
                                    tlVectorControl1.SVGDocument.SelectCollection.Clear();
                                    tlVectorControl1.SVGDocument.SelectCollection.Add((SvgElement)ele);
                                    tlVectorControl1.UnGroup();
                                    // tlVectorControl1.Refresh();
                                }
                            }
                        }
                        break;
                    case "PSPIdleOptimize":
                        PSPIdleOptimize();
                        break;
                    #endregion
                    #region 参数维护
                    case "mNodeParam":
                        frmNodeParam dlgNodeParam = new frmNodeParam(tlVectorControl1.SVGDocument.SvgdataUid);                        
                        dlgNodeParam.ShowDialog();
                        break;
                    case "mLineParam":
                        frmLineParam dlgLineParam = new frmLineParam(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgLineParam.ShowDialog();
                        break;
                    case "mWire":
                        wireTypeParam wirewire = new wireTypeParam();
                        wirewire.ShowDialog();                        
                        break;
                    case "nTransformLineParam":
                        frmTransformLineParam frmTransfor = new frmTransformLineParam(tlVectorControl1.SVGDocument.SvgdataUid);
                        frmTransfor.ShowDialog();
                        break;
                    case "nGNDLineParam":
                        frmGNDLineParam frmGNDLine = new frmGNDLineParam(tlVectorControl1.SVGDocument.SvgdataUid);
                        frmGNDLine.ShowDialog();
                        break;
                    case "mLineDL":
                        frmLineParamDL dlgLineParamDL = new frmLineParamDL(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgLineParamDL.ShowDialog();                       
                        break;
                    case "mFadianDL":
                        frmFadejieDL dlgFadeDL = new frmFadejieDL(tlVectorControl1.SVGDocument.SvgdataUid);
                        dlgFadeDL.ShowDialog();
                        break;
                    case "mConvert":
                            PSPDEV dl = new PSPDEV();
                            dl.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            dl.Type = "Polyline";
                            dl.Lable = "支路";
                            //IList listnew = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", dl);
                            OpenFile dlgOpenFile1 = new OpenFile(0);
                            dlgOpenFile1.button2Visble = false;
                            dlgOpenFile1.Refresh();
                            dlgOpenFile1.Column3Visble = false;
                            dlgOpenFile1.fuu = false;
                             if (dlgOpenFile1.ShowDialog() == DialogResult.OK)
                             {
                                 if (dlgOpenFile1.FileGUID != null)
                                 {
                                     PSPDEV psp=new PSPDEV();
                                     psp.SvgUID=dlgOpenFile1.FileGUID;
                                     psp.Type="Polyline";
                                     psp.Lable="支路";
                                     dl.Type = "Polyline";
                                     dl.Lable = "支路";
                                     IList listnew = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", dl);
                                     IList listold = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                                     //IList listest=Services.BaseService.GetList("SelectPSPDEVBySvgUID,dl
                                     foreach (PSPDEV dev in listold)
                                     {
                                         foreach (PSPDEV devdl in listnew)
                                         {
                                             if (dev.Name == devdl.Name)
                                             {
                                                 devdl.LineLength = dev.LineLength;
                                                 devdl.LineType = dev.LineType;
                                                 devdl.PositiveTQ = dev.LineTQ;
                                                 devdl.ZeroTQ = 3 * devdl.PositiveTQ;
                                                 Services.BaseService.Update<PSPDEV>(devdl);
                                             }
                                         }
                                     }
                                 }
                             }
                             dlgOpenFile1.button2Visble = true;
                             dlgOpenFile1.Column3Visble = true;
                             dlgOpenFile1.fuu = true;
                            //IList listdl=
                            /*OpenFile dlgOpenFile = new OpenFile();
                             * OpenFile dlgOpenFile = new OpenFile();
                if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                             * Open(dlgOpenFile.FileGUID);
                        PSPDEV psp = new PSPDEV();
                        psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                        foreach (PSPDEV dev in list1)
                        {
                            if (dev.Type != "Power")
                            {
                                XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                if (temp == null)
                                {
                                    Services.BaseService.Delete<PSPDEV>(dev);
                                }
                            }
                        }
                    }
                    if (dlgOpenFile.FileType == "短路")
                    {
                        fileType = false;
                        LoadShape("symbol21.xml");
                    }
                    else
                    {
                        fileType = true;
                        LoadShape("symbol20.xml");
                    }////////
                if (dlgOpenFile.ShowDialog() == DialogResult.OK)
                {
                    if (dlgOpenFile.FileGUID != null)
                    {
                        SVGFILE svgFile = new SVGFILE();
                        svgFile.SUID = dlgOpenFile.FileGUID;
                        IList svgList = Services.BaseService.GetList("SelectSVGFILEByKey", svgFile);
                        if (svgList.Count > 0)
                        {
                            svgFile = (SVGFILE)svgList[0];
                            SVGFILE svgNew = new SVGFILE();
                            svgNew.SVGDATA = svgFile.SVGDATA;
                            svgNew.PARENTID = svgFile.PARENTID;
                            svgNew.SUID = Guid.NewGuid().ToString();
                            frmElementName dlgnew = new frmElementName();
                            
                            dlgnew.TextInput = tlVectorControl1.SVGDocument.FileName;
                            if (dlgnew.ShowDialog() == DialogResult.OK)
                            {
                                svgNew.FILENAME = dlgnew.TextInput;
                            }

                            Services.BaseService.Create<SVGFILE>(svgNew);
                            PSPDIR pspDir = new PSPDIR();
                            pspDir.CreateTime = System.DateTime.Now.ToString();
                            pspDir.FileGUID = svgNew.SUID;
                            pspDir.FileName = svgNew.FILENAME;
                            pspDir.FileType = dlgOpenFile.FileType;
                            Services.BaseService.Create<PSPDIR>(pspDir);
                            PSPDEV pspDev = new PSPDEV();
                            pspDev.SvgUID = svgFile.SUID;
                            IList pspList = Services.BaseService.GetList("SelectPSPDEVBySvgUID", pspDev);
                            foreach (PSPDEV dev in pspList)
                            {
                                dev.SvgUID = svgNew.SUID;
                                dev.SUID = Guid.NewGuid().ToString();
                                Services.BaseService.Create<PSPDEV>(dev);
                            }
                            Open(svgNew.SUID);
                            PSPDEV psp = new PSPDEV();
                            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
                            foreach (PSPDEV dev in list1)
                            {
                                if (dev.Type != "Power")
                                {
                                    XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']");
                                    if (temp == null)
                                    {
                                        Services.BaseService.Delete<PSPDEV>(dev);
                                    }
                                }
                            }
                            if (dlgOpenFile.FileType == "短路")
                            {
                                fileType = false;
                                LoadShape("symbol21.xml");
                            }
                            else
                            {
                                fileType = true;
                                LoadShape("symbol20.xml");
                            }
                        }
                    }
                }*/
                        
                        break;

                    #endregion
                }
            }
        }
        void ComboBoxScaleBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            string text1 = this.scaleBox.SelectedItem.ToString();
            tlVectorControl1.ScaleRatio = ItopVector.Core.Func.Number.ParseFloatStr(text1);
            
        }
        void tlVectorControl1_ScaleChanged(object sender, EventArgs e)
        {
            string text1 = (((ItopVector.ItopVectorControl)sender).ScaleRatio * 100) + "%";
            scaleBox.ComboBoxEx.SelectedIndexChanged -= new EventHandler(ComboBoxScaleBox_SelectedIndexChanged);
            this.scaleBox.ComboBoxEx.Text = text1;
            scaleBox.ComboBoxEx.SelectedIndexChanged += new EventHandler(ComboBoxScaleBox_SelectedIndexChanged);
            if (tlVectorControl1.ScaleRatio < 0.006f)
            {
                tlVectorControl1.ScaleRatio = 0.006f;
                scaleBox.ComboBoxEx.Text = "0.6%";
                //scaleBox.SelectedText = "10%";
            }
        }
        private void AddCombolScale()
        {
            //缩放大小
            scaleBox = this.dotNetBarManager1.GetItem("ScaleBox") as DevComponents.DotNetBar.ComboBoxItem;
            if (scaleBox != null)
            {
                scaleBox.Items.AddRange(ScaleRange());
                scaleBox.ComboBoxEx.Text = "100%";
                scaleBox.ComboBoxEx.SelectedIndexChanged += new EventHandler(ComboBoxScaleBox_SelectedIndexChanged);

            }
        }
        public string[] ScaleRange()
        {
            string[] range1 = new string[] { "400%", "200%", "100%", "40%", "20%", "10%", "4%", "2%", "1%" };
            return range1;
        }
        private void tlVectorControl1_Load(object sender, EventArgs e)
        {
            AddCombolScale();
            LoadShape("symbol20.xml");
            //Topology2();
            
        }

        public void theout(object source, System.Timers.ElapsedEventArgs e)
        {
            Process[] ps = Process.GetProcessesByName("ChaoLiu");
            if (ps.Length>0)
            {
                foreach (Process pre in ps)
                {
                    pre.Kill();
                }                
            }
        }  
        private void PspGaussSeidel()
        {
            if (!Check())
            {
                return;
            }
            try
            {
                XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");

                foreach (XmlNode node in list)
                {
                    SvgElement element = node as SvgElement;
                    if ((element.GetAttribute("textn1id") == null || element.GetAttribute("textn1id") == "") && (element.GetAttribute("textn2id") == null || element.GetAttribute("textn2id") == ""))
                    {
                        tlVectorControl1.SVGDocument.CurrentElement = element;
                        tlVectorControl1.Delete();
                    }
                }

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF3.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\PF3.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH3.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\DH3.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH3.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\IH3.txt");
                }


                Gauss niulaP = new Gauss();

                niulaP.CurrentCal();

                double yinzi = 0, capability = 0, volt = 0, standvolt = 0, current = 0;
                PSPDEV benchmark = new PSPDEV();
                benchmark.Type = "power";
                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                if (list3 == null)
                {
                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (PSPDEV dev in list3)
                {
                    yinzi = Convert.ToDouble(dev.PowerFactor);
                    capability = Convert.ToDouble(dev.StandardCurrent);
                    volt = Convert.ToDouble(dev.StandardVolt);
                    TLPSPVmin = dev.iV;
                    TLPSPVmax = dev.jV;
                    if (dev.PowerFactor == 0)
                    {
                        yinzi = 1;
                    }
                    if (dev.StandardCurrent == 0)
                    {
                        capability = 1;
                    }
                    if (dev.StandardVolt == 0)
                    {
                        volt = 1;
                    }
                    standvolt = volt;
                    current = capability / (Math.Sqrt(3) * volt);
                };
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF3.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH3.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH3.txt"))
                {
                }
                else
                {
                    MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                FileStream dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF3.txt", FileMode.Open);
                StreamReader readLine = new StreamReader(dh);
                string strLine;
                string[] array1;
                char[] charSplit = new char[] { ' ' };
                strLine = readLine.ReadLine();
                string octor = "节点电压 ";
                tlVectorControl1.SVGDocument.AcceptChanges = true;
                while (strLine != null)
                {
                    array1 = strLine.Split(charSplit);
                    string[] dev = new string[8];
                    dev.Initialize();
                    int i = 0;
                    foreach (string str in array1)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("线路和节点参数错误，输入的数据形成的导纳矩阵没有逆矩阵，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[0]));
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Use";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);

                    if (pspDev != null)
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        current = capability / (Math.Sqrt(3) * volt);
                        if (pspDev.Name.Substring(0, 2) == "T_")//如果容量为０当作T接点跳过
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            RectangleF bound = ((IGraph)element).GetBounds();
                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;
                            if (n1 == null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(bound.X));
                                n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                //MessageBox.Show(Convert.ToString(n1.InnerText));
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            }


                            n1.InnerText = (Convert.ToDouble(dev[1]) * volt).ToString("N2");
                            octor += " ";
                            octor += Convert.ToString(n1.InnerText);

                            if (Convert.ToDouble(dev[1]) > TLPSPVmax * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt || Convert.ToDouble(dev[1]) < TLPSPVmin * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt)//电压越限，需修改
                                n1.SetAttribute("stroke", "#FF0000");
                            if (pspDev.NodeType == "0")
                            {
                                if (Convert.ToDouble(dev[4]) >= 0)
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2 == null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 20));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = ((Convert.ToDouble(dev[3]) * capability).ToString("N2") + "  + " + "j" + (Convert.ToDouble(dev[4]) * capability).ToString("N2"));

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }
                                else
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2 == null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 15));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = (Convert.ToDouble(dev[3]) * capability).ToString("N2") + " - " + "j" + (Math.Abs(Convert.ToDouble(dev[4]) * capability)).ToString("N2");

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }

                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            tlVectorControl1.Refresh();

                        }

                    }

                    strLine = readLine.ReadLine();
                }
                readLine.Close();

                //MessageBox.Show(octor);
                octor = "线路电流 ";

                FileStream ih = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH3.txt", FileMode.Open);
                StreamReader ihLine = new StreamReader(ih);
                FileStream dhdh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH3.txt", FileMode.Open);
                StreamReader dhLine = new StreamReader(dhdh);
                string strIH;
                string strDH;
                string[] array2;
                string[] array3;
                strIH = ihLine.ReadLine();
                strDH = dhLine.ReadLine();
                while (strIH != null && strDH != null)
                {

                    array2 = strIH.Split(charSplit);
                    array3 = strDH.Split(charSplit);
                    string[] dev = new string[8];
                    string[] devDH = new string[13];
                    dev.Initialize();
                    devDH.Initialize();
                    int i = 0;
                    foreach (string str in array2)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    int j = 0;
                    foreach (string str in array3)
                    {
                        if (str != "")
                        {
                            devDH[j++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Name = dev[0];
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Polyline";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);

                    if (pspDev != null && pspDev.LineStatus == "运行")
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;

                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strIH = ihLine.ReadLine();
                            strDH = dhLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            PointF[] t = ((Polyline)element).Points;

                            PointF[] t2 = ((Polyline)element).FirstTwoPoint;
                            t = t2;

                            PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                            float angel = 0f;
                            angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                            string l3 = Convert.ToString(midt.X);
                            string l4 = Convert.ToString(midt.Y);

                            string tran = ((Polyline)element).Transform.ToString();

                            PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));

                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            //XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;


                            //XmlElement n3 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;

                            PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                            PointF pStart2 = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                            PSPDEV psp = new PSPDEV();
                            psp.FirstNode = pspDev.FirstNode;
                            psp.LastNode = pspDev.LastNode;
                            psp.SvgUID = pspDev.SvgUID;
                            PSPDEV tempss = new PSPDEV();
                            IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                            foreach (PSPDEV devP in listParallel)
                            {
                                if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                {
                                    if (((devP.X1) > (pspDev.X1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }

                                //if ((Math.Abs(angel) > 90))
                                //{

                                //    if (((devP.X1 + devP.Y1) > (pspDev.X1 + pspDev.Y1)))
                                //    {
                                //        pStart = new PointF(center.X - (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                //    }
                                //    else
                                //    {
                                //        pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));

                                //    }
                                //}
                            }

                            PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                            if (n1 == null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(pStart.X));
                                n1.SetAttribute("y", Convert.ToString(pStart.Y));
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;
                                tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;
                                tlVectorControl1.RotateSelection(angel, pStart);
                                if (Math.Abs(angel) > 90)
                                    tlVectorControl1.RotateSelection(180, pStart);
                            }

                            //n3.SetAttribute("x", Convert.ToString(pStart2.X));
                            //n3.SetAttribute("y", Convert.ToString(pStart2.Y));
                            //double temp=(Convert.ToDouble(devDH[6])+Convert.ToDouble(devDH[10])*volt*volt/1000000)*capability;
                            //if (temp>=0)
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() + " + "+"j"+temp.ToString();
                            //}
                            //else
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() +" - "+"j"+ (Math.Abs(temp)).ToString();
                            //}

                            //n3.SetAttribute("layer", SvgDocument.currentLayer);
                            //n3.SetAttribute("flag", "1");
                            //n3.SetAttribute("stroke", "#0000FF");
                            //n1.SetAttribute("x", Convert.ToString(t[0].X + (t[1].X - t[0].X) / 2));
                            //n1.SetAttribute("y", Convert.ToString(t[0].Y + (t[1].Y - t[0].Y) / 2));
                            if (Convert.ToDouble(devDH[4]) >= 0)
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " + j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }
                            else
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " - j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }

                            if (listParallel != null)
                            {
                                if (Convert.ToDouble(dev[3]) > ((PSPDEV)listParallel[0]).LineChange)//电流越限，需修改。
                                    n1.SetAttribute("stroke", "#FF0000");
                            }


                            PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 10) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 10) * Math.PI / 180)));
                            PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 350) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 350) * Math.PI / 180)));

                            if (Convert.ToDouble(devDH[3]) < 0)
                            {
                                p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 170) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 170) * Math.PI / 180)));
                                p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 190) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 190) * Math.PI / 180)));
                            }

                            string l1 = Convert.ToString(p1.X);
                            string l2 = Convert.ToString(p1.Y);
                            string l5 = Convert.ToString(p2.X);
                            string l6 = Convert.ToString(p2.Y);

                            XmlElement n2 = tlVectorControl1.SVGDocument.CreateElement("polygon") as Polygon;
                            n2.SetAttribute("fill-opacity", "1");
                            n2.SetAttribute("layer", SvgDocument.currentLayer);
                            n2.SetAttribute("flag", "1");
                            n2.SetAttribute("font-size", "6");
                            n2.SetAttribute("font-family", "楷体_GB2312");
                            n2.SetAttribute("style", "fill:#000000");
                            //n2.SetAttribute("textn2id", pspDev.EleID);
                            n2.SetAttribute("points", l1 + " " + l2 + "," + l3 + " " + l4 + "," + l5 + " " + l6);
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                            //tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;








                            //if (Convert.ToDouble(dev[3]) <= 0)
                            RectangleF ttt = ((Polyline)element).GetBounds();

                            //tlVectorControl1.RotateSelection(angel, pStart);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(180, pStart);
                            //tlVectorControl1.RotateSelection((float)(Math.Atan((t[1].Y - t[0].Y) / (t[1].X - t[0].X)) * 180 / Math.PI), pt4[0]);
                            //tlVectorControl1.RotateSelection(-10, (new PointF(center.X+10,center.Y+10)));
                            //tlVectorControl1.SVGDocument.RootElement.AppendChild(n3);
                            //tlVectorControl1.Operation = ToolOperation.Select;
                            //tlVectorControl1.SVGDocument.CurrentElement = n3 as SvgElement;
                            //tlVectorControl1.RotateSelection(360+angel, pStart2);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(-180, pStart2);

                            PointF newp = new PointF(center.X + 10, center.Y + 10);


                            tlVectorControl1.Refresh();

                        }

                    }
                    strIH = ihLine.ReadLine();
                    strDH = dhLine.ReadLine();
                }

                ihLine.Close();
                dhLine.Close();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
        }
        private void PspN_RZYz()
        {
            if (!Check())
            {
                return;
            }
            try
            {
                XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");

                foreach (XmlNode node in list)
                {
                    SvgElement element = node as SvgElement;
                    if ((element.GetAttribute("textn1id") == null || element.GetAttribute("textn1id") == "") && (element.GetAttribute("textn2id") == null || element.GetAttribute("textn2id") == ""))
                    {
                        tlVectorControl1.SVGDocument.CurrentElement = element;
                        tlVectorControl1.Delete();
                    }
                }

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF4.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\PF4.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH4.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\DH4.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH4.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\IH4.txt");
                }


                ZYZ niulaP = new ZYZ();

                niulaP.CurrentCal();

                double yinzi = 0, capability = 0, volt = 0, standvolt = 0, current = 0;
                PSPDEV benchmark = new PSPDEV();
                benchmark.Type = "power";
                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                if (list3 == null)
                {
                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (PSPDEV dev in list3)
                {
                    yinzi = Convert.ToDouble(dev.PowerFactor);
                    capability = Convert.ToDouble(dev.StandardCurrent);
                    volt = Convert.ToDouble(dev.StandardVolt);
                    TLPSPVmin = dev.iV;
                    TLPSPVmax = dev.jV;
                    if (dev.PowerFactor == 0)
                    {
                        yinzi = 1;
                    }
                    if (dev.StandardCurrent == 0)
                    {
                        capability = 1;
                    }
                    if (dev.StandardVolt == 0)
                    {
                        volt = 1;
                    }
                    standvolt = volt;
                    current = capability / (Math.Sqrt(3) * volt);
                };
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF4.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH4.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH4.txt"))
                {
                }
                else
                {
                    MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                FileStream dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF4.txt", FileMode.Open);
                StreamReader readLine = new StreamReader(dh);
                string strLine;
                string[] array1;
                char[] charSplit = new char[] { ' ' };
                strLine = readLine.ReadLine();
                string octor = "节点电压 ";
                tlVectorControl1.SVGDocument.AcceptChanges = true;
                while (strLine != null)
                {
                    array1 = strLine.Split(charSplit);
                    string[] dev = new string[8];
                    dev.Initialize();
                    int i = 0;
                    foreach (string str in array1)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("线路和节点参数错误，输入的数据形成的导纳矩阵没有逆矩阵，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[0]));
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Use";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);

                    if (pspDev != null)
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        current = capability / (Math.Sqrt(3) * volt);
                        if (pspDev.Name.Substring(0, 2) == "T_")//如果容量为０当作T接点跳过
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            RectangleF bound = ((IGraph)element).GetBounds();
                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;
                            if (n1 == null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(bound.X));
                                n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                //MessageBox.Show(Convert.ToString(n1.InnerText));
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            }


                            n1.InnerText = (Convert.ToDouble(dev[1]) * volt).ToString("N2");
                            octor += " ";
                            octor += Convert.ToString(n1.InnerText);

                            if (Convert.ToDouble(dev[1]) > TLPSPVmax * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt || Convert.ToDouble(dev[1]) < TLPSPVmin * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt)//电压越限，需修改
                                n1.SetAttribute("stroke", "#FF0000");
                            if (pspDev.NodeType == "0")
                            {
                                if (Convert.ToDouble(dev[4]) >= 0)
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2 == null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 20));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = ((Convert.ToDouble(dev[3]) * capability).ToString("N2") + "  + " + "j" + (Convert.ToDouble(dev[4]) * capability).ToString("N2"));

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }
                                else
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2 == null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 15));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = (Convert.ToDouble(dev[3]) * capability).ToString("N2") + " - " + "j" + (Math.Abs(Convert.ToDouble(dev[4]) * capability)).ToString("N2");

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }

                            }

                            tlVectorControl1.Operation = ToolOperation.Select;
                            tlVectorControl1.Refresh();

                        }

                    }

                    strLine = readLine.ReadLine();
                }
                readLine.Close();

                //MessageBox.Show(octor);
                octor = "线路电流 ";

                FileStream ih = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH4.txt", FileMode.Open);
                StreamReader ihLine = new StreamReader(ih);
                FileStream dhdh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH4.txt", FileMode.Open);
                StreamReader dhLine = new StreamReader(dhdh);
                string strIH;
                string strDH;
                string[] array2;
                string[] array3;
                strIH = ihLine.ReadLine();
                strDH = dhLine.ReadLine();
                while (strIH != null && strDH != null)
                {

                    array2 = strIH.Split(charSplit);
                    array3 = strDH.Split(charSplit);
                    string[] dev = new string[8];
                    string[] devDH = new string[13];
                    dev.Initialize();
                    devDH.Initialize();
                    int i = 0;
                    foreach (string str in array2)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    int j = 0;
                    foreach (string str in array3)
                    {
                        if (str != "")
                        {
                            devDH[j++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Name = dev[0];
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Polyline";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);

                    if (pspDev != null && pspDev.LineStatus == "运行")
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;

                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strIH = ihLine.ReadLine();
                            strDH = dhLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            PointF[] t = ((Polyline)element).Points;

                            PointF[] t2 = ((Polyline)element).FirstTwoPoint;
                            t = t2;

                            PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                            float angel = 0f;
                            angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                            string l3 = Convert.ToString(midt.X);
                            string l4 = Convert.ToString(midt.Y);

                            string tran = ((Polyline)element).Transform.ToString();

                            PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));

                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            //XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;


                            //XmlElement n3 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;

                            PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                            PointF pStart2 = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                            PSPDEV psp = new PSPDEV();
                            psp.FirstNode = pspDev.FirstNode;
                            psp.LastNode = pspDev.LastNode;
                            psp.SvgUID = pspDev.SvgUID;
                            PSPDEV tempss = new PSPDEV();
                            IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                            foreach (PSPDEV devP in listParallel)
                            {
                                if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                {
                                    if (((devP.X1) > (pspDev.X1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }

                                //if ((Math.Abs(angel) > 90))
                                //{

                                //    if (((devP.X1 + devP.Y1) > (pspDev.X1 + pspDev.Y1)))
                                //    {
                                //        pStart = new PointF(center.X - (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                //    }
                                //    else
                                //    {
                                //        pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));

                                //    }
                                //}
                            }

                            PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                            if (n1 == null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(pStart.X));
                                n1.SetAttribute("y", Convert.ToString(pStart.Y));
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;
                                tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;
                                tlVectorControl1.RotateSelection(angel, pStart);
                                if (Math.Abs(angel) > 90)
                                    tlVectorControl1.RotateSelection(180, pStart);
                            }

                            //n3.SetAttribute("x", Convert.ToString(pStart2.X));
                            //n3.SetAttribute("y", Convert.ToString(pStart2.Y));
                            //double temp=(Convert.ToDouble(devDH[6])+Convert.ToDouble(devDH[10])*volt*volt/1000000)*capability;
                            //if (temp>=0)
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() + " + "+"j"+temp.ToString();
                            //}
                            //else
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() +" - "+"j"+ (Math.Abs(temp)).ToString();
                            //}

                            //n3.SetAttribute("layer", SvgDocument.currentLayer);
                            //n3.SetAttribute("flag", "1");
                            //n3.SetAttribute("stroke", "#0000FF");
                            //n1.SetAttribute("x", Convert.ToString(t[0].X + (t[1].X - t[0].X) / 2));
                            //n1.SetAttribute("y", Convert.ToString(t[0].Y + (t[1].Y - t[0].Y) / 2));
                            if (Convert.ToDouble(devDH[4]) >= 0)
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " + j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }
                            else
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " - j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }

                            if (listParallel != null)
                            {
                                if (Convert.ToDouble(dev[3]) > ((PSPDEV)listParallel[0]).LineChange)//电流越限，需修改。
                                    n1.SetAttribute("stroke", "#FF0000");
                            }


                            PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 10) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 10) * Math.PI / 180)));
                            PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 350) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 350) * Math.PI / 180)));

                            if (Convert.ToDouble(devDH[3]) < 0)
                            {
                                p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 170) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 170) * Math.PI / 180)));
                                p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 190) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 190) * Math.PI / 180)));
                            }

                            string l1 = Convert.ToString(p1.X);
                            string l2 = Convert.ToString(p1.Y);
                            string l5 = Convert.ToString(p2.X);
                            string l6 = Convert.ToString(p2.Y);

                            XmlElement n2 = tlVectorControl1.SVGDocument.CreateElement("polygon") as Polygon;
                            n2.SetAttribute("fill-opacity", "1");
                            n2.SetAttribute("layer", SvgDocument.currentLayer);
                            n2.SetAttribute("flag", "1");
                            n2.SetAttribute("font-size", "6");
                            n2.SetAttribute("font-family", "楷体_GB2312");
                            n2.SetAttribute("style", "fill:#000000");
                            //n2.SetAttribute("textn2id", pspDev.EleID);
                            n2.SetAttribute("points", l1 + " " + l2 + "," + l3 + " " + l4 + "," + l5 + " " + l6);
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                            //tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;








                            //if (Convert.ToDouble(dev[3]) <= 0)
                            RectangleF ttt = ((Polyline)element).GetBounds();

                            //tlVectorControl1.RotateSelection(angel, pStart);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(180, pStart);
                            //tlVectorControl1.RotateSelection((float)(Math.Atan((t[1].Y - t[0].Y) / (t[1].X - t[0].X)) * 180 / Math.PI), pt4[0]);
                            //tlVectorControl1.RotateSelection(-10, (new PointF(center.X+10,center.Y+10)));
                            //tlVectorControl1.SVGDocument.RootElement.AppendChild(n3);
                            //tlVectorControl1.Operation = ToolOperation.Select;
                            //tlVectorControl1.SVGDocument.CurrentElement = n3 as SvgElement;
                            //tlVectorControl1.RotateSelection(360+angel, pStart2);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(-180, pStart2);

                            PointF newp = new PointF(center.X + 10, center.Y + 10);


                            tlVectorControl1.Refresh();

                        }

                    }
                    strIH = ihLine.ReadLine();
                    strDH = dhLine.ReadLine();
                }

                ihLine.Close();
                dhLine.Close();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
         
        }
        private void PspPowerLossCal()
        {
            if (!Check())
            {
                return;
            }
            try
            {
                XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");

                foreach (XmlNode node in list)
                {
                    SvgElement element = node as SvgElement;
                    if ((element.GetAttribute("textn1id") == null || element.GetAttribute("textn1id") == "") && (element.GetAttribute("textn2id") == null || element.GetAttribute("textn2id") == ""))
                    {
                        tlVectorControl1.SVGDocument.CurrentElement = element;
                        tlVectorControl1.Delete();
                    }
                }
                try
                {
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF1.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\PF1.txt");
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\DH1.txt");
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\IH1.txt");
                    }
                }
                catch (System.Exception ex)
                {
                   // MessageBox.Show("请关闭相关文件后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }



                NIULA niulaP = new NIULA();

                niulaP.CurrentCal();

                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0;
                PSPDEV benchmark = new PSPDEV();
                benchmark.Type = "power";
                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                if (list3 == null)
                {
                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (PSPDEV dev in list3)
                {
                    yinzi = Convert.ToDouble(dev.PowerFactor);
                    capability = Convert.ToDouble(dev.StandardCurrent);
                    volt = Convert.ToDouble(dev.StandardVolt);
                    TLPSPVmin = dev.iV;
                    TLPSPVmax = dev.jV;
                    if (dev.PowerFactor == 0)
                    {
                        yinzi = 1;
                    }
                    if (dev.StandardCurrent == 0)
                    {
                        capability = 1;
                    }
                    if (dev.StandardVolt == 0)
                    {
                        volt = 1;
                    }
                    standvolt = volt;
                    current = capability / (Math.Sqrt(3) * volt);
                    
                };
                capability = 100;
                //if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF1.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                //{
                //}
                //else
                //{
                //    MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                //FileStream dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF1.txt", FileMode.Open);
                //StreamReader readLine = new StreamReader(dh);
                //string strLine;
                //string[] array1;
                char[] charSplit = new char[] { ' ' };
                //strLine = readLine.ReadLine();
                //string octor = "节点电压 ";

                //while (strLine != null)
                //{
                //    array1 = strLine.Split(charSplit);
                //    string[] dev = new string[8];
                //    dev.Initialize();
                //    int i = 0;
                //    foreach (string str in array1)
                //    {
                //        if (str != "")
                //        {
                //            dev[i++] = str;
                //        }
                //        if (str.Contains("NAN"))
                //        {
                //            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //            return;
                //        }
                //    }
                //    PSPDEV pspDev = new PSPDEV();
                //    pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[0]));
                //    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //    pspDev.Type = "Use";
                //    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                //    if (pspDev != null)
                //    {
                //        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                //        if (element != null)
                //        {
                //            RectangleF bound = ((IGraph)element).GetBounds();
                //            XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                //            XmlElement n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                //            n1.SetAttribute("x", Convert.ToString(bound.X));
                //            n1.SetAttribute("y", Convert.ToString(bound.Y - 20));

                //            n1.InnerText = (Convert.ToDouble(dev[1]) * volt).ToString("N2");
                //            octor += " ";
                //            octor += Convert.ToString(n1.InnerText);
                //            n1.SetAttribute("layer", SvgDocument.currentLayer);
                //            //MessageBox.Show(Convert.ToString(n1.InnerText));
                //            n1.SetAttribute("flag", "1");

                //            if (Convert.ToDouble(dev[1]) > 1.05 || Convert.ToDouble(dev[1]) < 0.95)//电压越限，需修改
                //                n1.SetAttribute("stroke", "#FF0000");
                //            if (pspDev.NodeType == "0")
                //            {
                //                if (Convert.ToDouble(dev[4]) >= 0)
                //                {
                //                    double tempb = Convert.ToDouble(pspDev.Burthen);
                //                    n2.SetAttribute("x", Convert.ToString(bound.X));
                //                    n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 20));
                //                    n2.InnerText = ((Convert.ToDouble(dev[3]) * capability).ToString("N2") + "  + " + "j" + (Convert.ToDouble(dev[4]) * capability).ToString("N2"));
                //                    n2.SetAttribute("layer", SvgDocument.currentLayer);
                //                    n2.SetAttribute("flag", "1");
                //                    double tempi = Convert.ToDouble(dev[3]) * capability;
                //                    double tempj = Convert.ToDouble(dev[4]) * capability;
                //                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                //                    if (temptotal * capability > tempb)
                //                    {
                //                        n2.SetAttribute("stroke", "#FF0000");
                //                    }
                //                }
                //                else
                //                {
                //                    double tempb = Convert.ToDouble(pspDev.Burthen);
                //                    n2.SetAttribute("x", Convert.ToString(bound.X));
                //                    n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 15));
                //                    n2.InnerText = (Convert.ToDouble(dev[3]) * capability).ToString("N2") + " - " + "j" + (Math.Abs(Convert.ToDouble(dev[4]) * capability)).ToString("N2");
                //                    n2.SetAttribute("layer", SvgDocument.currentLayer);
                //                    n2.SetAttribute("flag", "1");
                //                    double tempi = Convert.ToDouble(dev[3]) * capability;
                //                    double tempj = Convert.ToDouble(dev[4]) * capability;
                //                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                //                    if (temptotal * capability > tempb)
                //                    {
                //                        n2.SetAttribute("stroke", "#FF0000");
                //                    }
                //                }
                //                tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                //            }
                //            tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                //            tlVectorControl1.Operation = ToolOperation.Select;
                //            tlVectorControl1.Refresh();

                //        }

                //    }

                //    strLine = readLine.ReadLine();
                //}
                //readLine.Close();

                //MessageBox.Show(octor);
                //octor = "线路电流 ";
                tlVectorControl1.SVGDocument.AcceptChanges = true;
                FileStream ih = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH1.txt", FileMode.Open);
                StreamReader ihLine = new StreamReader(ih);
                FileStream dhdh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH1.txt", FileMode.Open);
                StreamReader dhLine = new StreamReader(dhdh);
                string strIH;
                string strDH;
                string[] array2;
                string[] array3;
                strIH = ihLine.ReadLine();
                strDH = dhLine.ReadLine();
                while (strDH != null)
                {

                    array2 = strIH.Split(charSplit);
                    array3 = strDH.Split(charSplit);
                    string[] dev = new string[8];
                    string[] devDH = new string[13];
                    dev.Initialize();
                    devDH.Initialize();
                    int i = 0;
                    foreach (string str in array2)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    int j = 0;
                    foreach (string str in array3)
                    {
                        if (str != "")
                        {
                            devDH[j++] = str;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Name = devDH[0];
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Polyline";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);
                   
                    if (pspDev != null && pspDev.LineStatus == "运行")
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        current = capability / (Math.Sqrt(3) * volt);
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strIH = ihLine.ReadLine();
                            strDH = dhLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            PointF[] t = ((Polyline)element).Points;

                            PointF[] t2 = ((Polyline)element).FirstTwoPoint;
                            t = t2;

                            PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                            float angel = 0f;
                            angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                            string l3 = Convert.ToString(midt.X);
                            string l4 = Convert.ToString(midt.Y);

                            string tran = ((Polyline)element).Transform.ToString();

                            PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));
                            //XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                            XmlElement n2 = tlVectorControl1.SVGDocument.CreateElement("polygon") as Polygon;
                           // XmlElement n3 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                            PointF pStart2 = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                            PSPDEV psp = new PSPDEV();
                            psp.FirstNode = pspDev.FirstNode;
                            psp.LastNode = pspDev.LastNode;
                            psp.SvgUID = pspDev.SvgUID;
                            PSPDEV tempss = new PSPDEV();
                            IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                            foreach (PSPDEV devP in listParallel)
                            {
                                if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                {
                                    if (((devP.X1) > (pspDev.X1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }

                                //if ((Math.Abs(angel) > 90))
                                //{

                                //    if (((devP.X1 + devP.Y1) > (pspDev.X1 + pspDev.Y1)))
                                //    {
                                //        pStart = new PointF(center.X - (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                //    }
                                //    else
                                //    {
                                //        pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));

                                //    }
                                //}
                            }

                            PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                            //n1.SetAttribute("x", Convert.ToString(pStart.X));
                            //n1.SetAttribute("y", Convert.ToString(pStart.Y));
                            if (n1==null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(pStart2.X));
                                n1.SetAttribute("y", Convert.ToString(pStart2.Y));
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("stroke", "#0000FF");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;
                                tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;
                                tlVectorControl1.RotateSelection(360 + angel, pStart2);
                                if (Math.Abs(angel) > 90)
                                    tlVectorControl1.RotateSelection(-180, pStart2);

                                PointF newp = new PointF(center.X + 10, center.Y + 10);
                            }
                            double temp = (Convert.ToDouble(devDH[6]) + Convert.ToDouble(devDH[10]) * volt * volt / 1000000) * capability;
                            if (temp >= 0)
                            {
                                n1.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt / 1000000) * capability).ToString() + " + " + "j" + temp.ToString();
                            }
                            else
                            {
                                n1.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt / 1000000) * capability).ToString() + " - " + "j" + (Math.Abs(temp)).ToString();
                            }


                            //n1.SetAttribute("x", Convert.ToString(t[0].X + (t[1].X - t[0].X) / 2));
                            //n1.SetAttribute("y", Convert.ToString(t[0].Y + (t[1].Y - t[0].Y) / 2));
                            //if (Convert.ToDouble(dev[4]) >= 0)
                            //{
                            //    n1.InnerText = (Math.Abs(Convert.ToDouble(dev[3]) * current)).ToString("N2") + " + j" + (Math.Abs(Convert.ToDouble(dev[4]) * current)).ToString("N2");
                            //}
                            //else
                            //{
                            //    n1.InnerText = (Math.Abs(Convert.ToDouble(dev[3]) * current)).ToString("N2") + " - j" + (Math.Abs(Convert.ToDouble(dev[4]) * current)).ToString("N2");
                            //}
                            //n1.SetAttribute("layer", SvgDocument.currentLayer);
                            //n1.SetAttribute("flag", "1");
                            //if (listParallel != null)
                            //{
                            //    if (Convert.ToDouble(dev[3]) > ((PSPDEV)listParallel[0]).LineChange)//电流越限，需修改。
                            //        n1.SetAttribute("stroke", "#FF0000");
                            //}


                            PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 10) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 10) * Math.PI / 180)));
                            PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 350) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 350) * Math.PI / 180)));

                            if (Convert.ToDouble(dev[3]) < 0)
                            {
                                p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 170) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 170) * Math.PI / 180)));
                                p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 190) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 190) * Math.PI / 180)));
                            }

                            string l1 = Convert.ToString(p1.X);
                            string l2 = Convert.ToString(p1.Y);
                            string l5 = Convert.ToString(p2.X);
                            string l6 = Convert.ToString(p2.Y);

                            //n2.SetAttribute("stroke", "#FF0000");
                            n2.SetAttribute("points", l1 + " " + l2 + "," + l3 + " " + l4 + "," + l5 + " " + l6);
                            n2.SetAttribute("fill-opacity", "1");
                            n2.SetAttribute("layer", SvgDocument.currentLayer);
                            n2.SetAttribute("flag", "1");
                            n2.SetAttribute("font-size", "6");
                            n2.SetAttribute("font-family", "楷体_GB2312");
                            n2.SetAttribute("style", "fill:#000000");
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                            tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;

                            //tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            //tlVectorControl1.Operation = ToolOperation.Select;

                            //tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;

                            //if (Convert.ToDouble(dev[3]) <= 0)
                            RectangleF ttt = ((Polyline)element).GetBounds();

                            //tlVectorControl1.RotateSelection(angel, pStart);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(180, pStart);
                            //tlVectorControl1.RotateSelection((float)(Math.Atan((t[1].Y - t[0].Y) / (t[1].X - t[0].X)) * 180 / Math.PI), pt4[0]);
                            //tlVectorControl1.RotateSelection(-10, (new PointF(center.X+10,center.Y+10)));
                            
      


                            tlVectorControl1.Refresh();

                        }

                    }
                    strIH = ihLine.ReadLine();
                    strDH = dhLine.ReadLine();
                }

                ihLine.Close();
                dhLine.Close();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
         
        }

        private void PspVoltEvaluation()
        {
            FileStream dh;
            StreamReader readLine;
            char[] charSplit;
            string strLine;
            string[] array1;
            string output = null;
            string[] array2;

            string strLine2;

            char[] charSplit2 = new char[] { ' ' };
            FileStream op;
            StreamWriter str1;
            FileStream dh2;
            StreamReader readLine2;
            Excel.Application ex;
            Excel.Worksheet xSheet;
            Excel.Application result1;
            Excel.Worksheet tempSheet;
            Excel.Worksheet newWorksheet;
            try
            {
                if (!Check())
                {
                    return;
                }
                NIULA pspniula = new NIULA();
                pspniula.CurrentCal();
                try
                {
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "电压质量评估.xls"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "电压质量评估.xls");
                        //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                    }
                }
                catch (System.Exception ex17)
                {
                    MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }


                double yinzi = 0, capability = 0, volt = 0, current = 0,standvolt=0, Rad_to_Deg = 57.29577951;
                PSPDEV benchmark = new PSPDEV();
                benchmark.Type = "power";
                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                if (list3 == null)
                {
                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (PSPDEV dev in list3)
                {
                    yinzi = Convert.ToDouble(dev.PowerFactor);
                    capability = Convert.ToDouble(dev.StandardCurrent);
                    volt = Convert.ToDouble(dev.StandardVolt);
                    TLPSPVmin = dev.iV;
                    TLPSPVmax = dev.jV;
                    if (dev.PowerFactor == 0)
                    {
                        yinzi = 1;
                    }
                    if (dev.StandardCurrent == 0)
                    {
                        capability = 1;
                    }
                    if (dev.StandardVolt == 0)
                    {
                        volt = 1;
                    }
                    standvolt = volt;
                    current = capability / (Math.Sqrt(3) * volt);
                  

                }
                capability = 100;
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF1.txt"))
                {
                }
                else
                {
                    return;
                }
                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF1.txt", FileMode.Open);
                readLine = new StreamReader(dh);

                charSplit = new char[] { ' ' };
                strLine = readLine.ReadLine();

                output += ("全网母线(发电、负荷)电压质量评估 " + "\r\n" + "\r\n");
                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                output += ("母线名" + "," + "电压偏移" + "," + "是否合格" + "\r\n");
                int count = 0;
                int n1 = 0;
                while (strLine != null && strLine != "")
                {
                    array1 = strLine.Split(charSplit);
                    string[] dev = new string[20];
                    dev.Initialize();
                    int i = 0;
                    count++;
                    PSPDEV CR = new PSPDEV();
                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                    foreach (string str in array1)
                    {
                        if (str != "")
                        {
                            if (str != "NaN")
                            {
                                dev[i++] = Convert.ToDouble(str).ToString();
                            }
                            else
                            {
                                dev[i++] = str;
                            }

                        }

                    }

                    CR.Number = Convert.ToInt32(dev[0]);
                    CR.Type = "Use";
                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                    if (CR!= null && CR.ReferenceVolt != 0)
                    {
                        volt = CR.ReferenceVolt;
                    }
                    else
                        volt = standvolt;
                    current = capability / (Math.Sqrt(3) * volt);
                    double vTemp = Convert.ToDouble(dev[1]) * volt;
                    double vTemp1 = volt * 95 / 100;
                    double vTemp2 = volt * 105 / 100;
                    double Vreference=1;
                    if ( CR.ReferenceVolt == 10.5)
                    {
                        Vreference= 10;
                        if (Math.Abs((((Convert.ToDouble(dev[1]) * volt) - Vreference)) / Vreference) > 0.07)
                        {
                            dev[6] = "不合格";
                            n1++;
                        }
                        else
                        {
                            dev[6] = "合格";
                        }
                    }
                    else if (CR.ReferenceVolt == 37)
                    {
                        Vreference = 35;
                        if (Math.Abs((((Convert.ToDouble(dev[1]) * volt) - Vreference)) / Vreference) > 0.05)
                        {
                            dev[6] = "不合格";
                            n1++;
                        }
                        else
                        {
                            dev[6] = "合格";
                        }
                    }
                    else if (CR.ReferenceVolt == 115)
                    {
                        Vreference = 110;
                        if (Math.Abs((((Convert.ToDouble(dev[1]) * volt) - Vreference)) / Vreference) > 0.05)
                        {
                            dev[6] = "不合格";
                            n1++;
                        }
                        else
                        {
                            dev[6] = "合格";
                        }
                    }
                   else  if (CR.ReferenceVolt == 230)
                    {
                        Vreference = 220;
                        if (Math.Abs((((Convert.ToDouble(dev[1]) * volt) - Vreference)) / Vreference) > 0.05)
                        {
                            dev[6] = "不合格";
                            n1++;
                        }
                        else
                        {
                            dev[6] = "合格";
                        }
                    }
                    else if (CR.ReferenceVolt == 525)
                    {
                        Vreference = 500;
                        if (Math.Abs((((Convert.ToDouble(dev[1]) * volt) - Vreference)) / Vreference) > 0.05)
                        {
                            dev[6] = "不合格";
                            n1++;
                        }
                        else
                        {
                            dev[6] = "合格";
                        }
                    }
                    else
                    {
                        Vreference = 220;
                        if (Math.Abs((((Convert.ToDouble(dev[1]) * volt) - Vreference)) / Vreference) > 0.05)
                        {
                            dev[6] = "不合格";
                            n1++;
                        }
                        else
                        {
                            dev[6] = "合格";
                        }
                    }

                    output += "'" + CR.Name + "," + (((Convert.ToDouble(dev[1]) * volt) - Vreference) / Vreference).ToString() + "," + dev[6].ToString() + "\r\n";

                    strLine = readLine.ReadLine();
                }
                PSPDEV ct = new PSPDEV();
                ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                ct.Type = "Use";
                IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                if (count < cont.Count)
                {
                    MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    readLine.Close();
                    return;

                }
                readLine.Close();
                output += "电压合格率" + "," + ((((double)(cont.Count-n1)) /((double)cont.Count))).ToString() + "\r\n";
                try
                {
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                    }
                }
                catch (System.Exception ex18)
                {
                    MessageBox.Show("请关闭相关Excel后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                str1.Write(output);
                str1.Close();

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt"))
                {
                }
                else
                {
                    return;
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                {
                }
                else
                {
                    return;
                }
                dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH1.txt", FileMode.Open);
                dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH1.txt", FileMode.Open);
                readLine2 = new StreamReader(dh2);
                readLine = new StreamReader(dh);
                charSplit = new char[] { ' ' };
                strLine = readLine.ReadLine();
                strLine2 = readLine2.ReadLine();

                output = null;

                output += ("全网交流线电压质量评估" + "\r\n" + "\r\n");
                output += ("单位：kA\\kV\\MW\\Mvar" + "\r\n");
                output += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n");
                output += ("支路名称" + "," + "电压损失" + "," + "是否合格" + "\r\n");
                while (strLine != null && strLine2 != null && strLine != "" && strLine2 != "")
                {
                    array1 = strLine.Split(charSplit);
                    array2 = strLine2.Split(charSplit2);

                    string[] dev = new string[20];
                    dev.Initialize();
                    int i = 0;
                    PSPDEV CR = new PSPDEV();
                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                    foreach (string str in array1)
                    {
                        if (str != "")
                        {
                            if (i == 0)
                            {
                                dev[i++] = str.ToString();
                            }
                            else
                            {
                                if (str != "NaN")
                                {
                                    dev[i++] = Convert.ToDouble(str).ToString();
                                }
                                else
                                {
                                    dev[i++] = str;
                                }

                            }
                        }

                    }
                    i = 7;
                    for (int j = 3; j < 5; j++)
                    {
                        if (array2[j] != "")
                        {
                            if (array2[j] != "NaN")
                            {
                                dev[i++] = Convert.ToDouble(array2[j]).ToString();
                            }
                            else
                            {
                                dev[i++] = array2[j];
                            }
                        }

                    }
                    CR.Name = dev[0];
                    CR.Type = "Polyline";
                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                    if (CR != null && CR.ReferenceVolt != 0)
                    {
                        volt = CR.ReferenceVolt;
                    }
                    else
                        volt = standvolt;
                    current = capability / (Math.Sqrt(3) * volt);
                    if (CR != null)
                    {
                        switch (CR.Type)
                        {
                            case "Polyline":
                                if (CR.VoltR >= 220)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.03)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                else if (CR.VoltR >= 66 && CR.VoltR < 220)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.075)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                else if (CR.VoltR >= 35 && CR.VoltR < 66)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.05)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                else if (CR.VoltR < 35)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.1)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                break;
                            case "TransformLine":
                                if (CR.VoltR >= 220)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.02)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                else if (CR.VoltR >= 66 && CR.VoltR < 220)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.05)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                else if (CR.VoltR >= 35 && CR.VoltR < 66)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.045)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                else if (CR.VoltR < 35)
                                {
                                    if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.04)
                                    {
                                        dev[13] = "不合格";
                                    }
                                    else
                                    {
                                        dev[13] = "合格";
                                    }
                                }
                                break;
                            default:
                                dev[13] = "不合格";
                                break;
                        }

                        output += "'" + CR.Name + "," + ((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR).ToString() + "," + dev[13] + "\r\n";
                    }
                    else
                    {
                        CR = new PSPDEV();
                        CR.Name = dev[0];
                        CR.Type = "TransformLine";
                        CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                        if (CR != null)
                        {
                            switch (CR.Type)
                            {
                                case "Polyline":
                                    if (CR.VoltR >= 220)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.03)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    else if (CR.VoltR >= 66 && CR.VoltR < 220)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.075)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    else if (CR.VoltR >= 35 && CR.VoltR < 66)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.05)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    else if (CR.VoltR < 35)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.1)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    break;
                                case "TransformLine":
                                    if (CR.VoltR >= 220)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.02)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    else if (CR.VoltR >= 66 && CR.VoltR < 220)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.05)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    else if (CR.VoltR >= 35 && CR.VoltR < 66)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.045)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    else if (CR.VoltR < 35)
                                    {
                                        if (Math.Abs((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR) > 0.04)
                                        {
                                            dev[13] = "不合格";
                                        }
                                        else
                                        {
                                            dev[13] = "合格";
                                        }
                                    }
                                    break;
                                default:
                                    dev[13] = "不合格";
                                    break;
                            }

                            output += "'" + CR.Name + "," + ((Convert.ToDouble(dev[11]) * volt - Convert.ToDouble(dev[12]) * volt) / CR.VoltR).ToString() + "," + dev[13] + "\r\n";
                        }
                    }

                    strLine = readLine.ReadLine();
                    strLine2 = readLine2.ReadLine();
                }
                readLine.Close();
                readLine2.Close();
                try
                {
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                    }
                }
                catch (System.Exception ex19)
                {
                    MessageBox.Show("请关闭相关文件后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                str1.Write(output);
                str1.Close();


                ex = new Excel.Application();
                ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                xSheet = (Excel.Worksheet)ex.Worksheets[1];
                ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);

                result1 = new Excel.Application();
                result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
                newWorksheet.Name = "支路电压质量评估";
                xSheet.Name = "母线电压质量评估";
                ex.Visible = true;

                tempSheet.Cells.Select();
                tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 3]).MergeCells = true;
                xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[3, 2]).MergeCells = true;
                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 16;
                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                xSheet.get_Range(xSheet.Cells[5, 1], xSheet.Cells[5, 3]).Interior.ColorIndex = 45;
                xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;

                xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 3]).NumberFormat = "0.0000_ ";
                xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 3]).Font.Name = "楷体_GB2312";
                xSheet.get_Range(xSheet.Cells[6, 2], xSheet.Cells[xSheet.UsedRange.Rows.Count, 2]).NumberFormatLocal = "0.0000%";


                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 3]).MergeCells = true;
                newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[3, 2]).MergeCells = true;
                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 16;
                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                newWorksheet.get_Range(newWorksheet.Cells[5, 1], newWorksheet.Cells[5, 3]).Interior.ColorIndex = 45;
                newWorksheet.get_Range(newWorksheet.Cells[6, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;

                newWorksheet.get_Range(newWorksheet.Cells[6, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 3]).NumberFormat = "0.0000_ ";
                newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 3]).Font.Name = "楷体_GB2312";
                newWorksheet.get_Range(newWorksheet.Cells[6, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 2]).NumberFormatLocal = "0.0000%";
                //op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fck.excel"), FileMode.OpenOrCreate);
                //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                newWorksheet.Columns.AutoFit();
                newWorksheet.Rows.AutoFit();
                xSheet.Rows.AutoFit();
                xSheet.Columns.AutoFit();
                string fn = tlVectorControl1.SVGDocument.FileName;

                //result1.Save(System.Windows.Forms.Application.StartupPath + "\\fck.xls");

                newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + fn + "电压质量评估.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);



                //str1.Write();
                //op.Close();



                System.Windows.Forms.Clipboard.Clear();
                result1.Workbooks.Close();
                result1.Quit();

            }
            catch (System.Exception e1)
            {
                MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }


        }
        private void PSPIdleOptimize()
        {
            if (!CheckIdleOptimize())
            {
                return;
            }
            try
            {
                if (File.Exists(System.Windows.Forms.Application.StartupPath +"\\"+ tlVectorControl1.SVGDocument.FileName + "无功优化.xls"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "无功优化.xls");
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("请关闭Execl后再进行计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
          
            try
            {
                NiuLaIdle niulaidle = new NiuLaIdle();
                niulaidle.CurrentCal();
                IdleOptimize idlOptimize = new IdleOptimize();
                idlOptimize.Optimize();
                string outV = null;
                string outT = null;
                string outG = null;
                string outQC = null;
                FileStream dhoutV = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Volt.txt", FileMode.Open);
                StreamReader readLineoutV = new StreamReader(dhoutV);

                FileStream dhoutT = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Transformer.txt", FileMode.Open);
                StreamReader readLineoutT = new StreamReader(dhoutT);

                FileStream dhoutG = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Generator.txt", FileMode.Open);
                StreamReader readLineoutG = new StreamReader(dhoutG);

                FileStream dhoutQC = new FileStream(System.Windows.Forms.Application.StartupPath + "\\GND.txt", FileMode.Open);
                StreamReader readLineoutQC = new StreamReader(dhoutQC);

                char[] charSplit = new char[] { ' ' };
                string strLine = readLineoutV.ReadLine();
                string[] arry;
                outV += ("电压调整表" + "\r\n" + "\r\n");
                outV += ("计算日期：" +System.DateTime.Now.ToString()+ "\r\n" + "\r\n");
                outV += ("单位：KV" + "\r\n" + "\r\n");
                outV += ("母线名" + "," +"调整后电压"+","+"调整前电压"+","+"电压下限"+","+"电压上限"+ "\r\n");
                PSPDEV CR;
                while (strLine!=null)
                {
                    arry = strLine.Split(charSplit);
                    CR = new PSPDEV();
                    CR.Name = arry[0];
                    CR.Type = "Use";
                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                    outV += arry[0] + "," + Convert.ToDouble(arry[1]) * CR.ReferenceVolt + "," + Convert.ToDouble(arry[2]) * CR.ReferenceVolt + "," + Convert.ToDouble(arry[3]) * CR.ReferenceVolt + "," + Convert.ToDouble(arry[4]) * CR.ReferenceVolt + "\r\n";
                    strLine = readLineoutV.ReadLine();
                }
                readLineoutV.Close();
            
                string strLineT = readLineoutT.ReadLine();
                string[] arryT;
                outT += ("变压器调整表" + "\r\n" + "\r\n");
                outT += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n" + "\r\n");
                outT += ("单位：p.u." + "\r\n" + "\r\n");
                outT += ("I侧母线" + "," + "J侧母线" + "," + "支路名" + "," + "调整后变比" + "," + "调整前变比" + "," + "变比下限" + "," + "变比上限" + "\r\n");

                while (strLineT != null)
                {
                    arryT = strLineT.Split(charSplit);                   
                    outT += arryT[0] + "," + arryT[1] + "," + arryT[2] + "," + arryT[3] + "," + arryT[4] + "," + arryT[5] + "," + arryT[6] + "\r\n";
                    strLineT = readLineoutT.ReadLine();
                }
                readLineoutT.Close();

                string strLineG = readLineoutG.ReadLine();
                string[] arryG;
                outG += ("发电调整表" + "\r\n" + "\r\n");
                outG += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n" + "\r\n");
                outG += ("单位：KV/MW/Mvar" + "\r\n" + "\r\n");
                outG += ("母线名" + "," +"控制类型"+","+ "调整后电压" + "," + "调整后有功" + "," + "调整后无功" + "," + "调整前电压" + "," + "调整前有功" + "," + "调整前无功" + "\r\n");
                
                while (strLineG != null)
                {
                    arryG = strLineG.Split(charSplit);
                    CR = new PSPDEV();
                    CR.Name = arryG[0];
                    CR.Type = "Use";
                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                    outG += arryG[0] + "," + arryG[1] + "," + Convert.ToDouble(arryG[2]) * CR.ReferenceVolt + "," + Convert.ToDouble(arryG[3]) * 100 + "," + Convert.ToDouble(arryG[4]) * 100 + "," + Convert.ToDouble(arryG[5]) * CR.ReferenceVolt + "," + Convert.ToDouble(arryG[6])*100 +","+Convert.ToDouble(arryG[7])*100+ "\r\n";
                    strLineG = readLineoutG.ReadLine();
                }
                readLineoutG.Close();

                string strLineQC = readLineoutQC.ReadLine();
                string[] arryQC;
                outQC += ("无功补偿调整表" + "\r\n" + "\r\n");
                outQC += ("计算日期：" + System.DateTime.Now.ToString() + "\r\n" + "\r\n");
                outQC += ("单位：KV/Mvar" + "\r\n" + "\r\n");
                outQC += ("母线名" + "," + "支路名" + "," + "调整后电压" + "," + "补偿的电容" + "," + "补偿的电抗" + "," + "调整前电压" + "\r\n");

                while (strLineQC != null)
                {
                    arryQC = strLineQC.Split(charSplit);
                    CR = new PSPDEV();
                    CR.Name = arryQC[0];
                    CR.Type = "Use";
                    CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", CR);
                    outQC += arryQC[0] + "," + arryQC[1] + "," + Convert.ToDouble(arryQC[2]) * CR.ReferenceVolt + "," + Convert.ToDouble(arryQC[3]) * 100 + "," + Convert.ToDouble(arryQC[4]) * 100 + "," + Convert.ToDouble(arryQC[5]) * CR.ReferenceVolt  + "\r\n";
                    strLineQC = readLineoutQC.ReadLine();
                }
                readLineoutQC.Close();

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                }
                FileStream temp1 = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                StreamWriter str1 = new StreamWriter(temp1, Encoding.GetEncoding("GB2312"));
                str1.Write(outV);
                str1.Close();

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result2.csv"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
                }
                FileStream temp2 = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result2.csv"), FileMode.OpenOrCreate);
                StreamWriter str2 = new StreamWriter(temp2, Encoding.GetEncoding("GB2312"));
                str2.Write(outT);
                str2.Close();
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result3.csv"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result3.csv");
                }
                FileStream temp3 = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result3.csv"), FileMode.OpenOrCreate);
                StreamWriter str3 = new StreamWriter(temp3, Encoding.GetEncoding("GB2312"));
                str3.Write(outG);
                str3.Close();

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result4.csv"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\result4.csv");
                }
                FileStream temp4 = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result4.csv"), FileMode.OpenOrCreate);
                StreamWriter str4 = new StreamWriter(temp4, Encoding.GetEncoding("GB2312"));
                str4.Write(outQC);
                str4.Close();

                Excel.Application result1 = new Excel.Application();
                result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                Excel.Worksheet xSheet1 = (Excel.Worksheet)result1.Worksheets[1];
                result1.Worksheets.Add(System.Reflection.Missing.Value, xSheet1, 3, System.Reflection.Missing.Value);

                Excel.Application result2 = new Excel.Application();
                result2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
                Excel.Worksheet tempSheet2 = (Excel.Worksheet)result2.Worksheets.get_Item(1);
                Excel.Application result3 = new Excel.Application();
                result3.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result3.csv");
                Excel.Worksheet tempSheet3 = (Excel.Worksheet)result3.Worksheets.get_Item(1);
                Excel.Application result4 = new Excel.Application();
                result4.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result4.csv");
                Excel.Worksheet tempSheet4 = (Excel.Worksheet)result4.Worksheets.get_Item(1);
                Excel.Worksheet newWorksheet2 = (Excel.Worksheet)result1.Worksheets.get_Item(2);
                Excel.Worksheet newWorksheet3 = (Excel.Worksheet)result1.Worksheets.get_Item(3);
                Excel.Worksheet newWorksheet4 = (Excel.Worksheet)result1.Worksheets.get_Item(4);
                newWorksheet2.Name = "变压器调整表";
                newWorksheet3.Name = "发电机调整表";
                newWorksheet4.Name = "无功补偿调整表";
                xSheet1.Name = "电压调整表";
                result1.Visible = true;

                tempSheet2.Cells.Select();
                tempSheet2.Cells.Copy(System.Reflection.Missing.Value);
                newWorksheet2.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                tempSheet3.Cells.Select();
                tempSheet3.Cells.Copy(System.Reflection.Missing.Value);
                newWorksheet3.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                tempSheet4.Cells.Select();
                tempSheet4.Cells.Copy(System.Reflection.Missing.Value);
                newWorksheet4.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                System.Windows.Forms.Clipboard.Clear();

                xSheet1.get_Range(xSheet1.Cells[1, 1], xSheet1.Cells[1, 5]).MergeCells = true;
                xSheet1.get_Range(xSheet1.Cells[3, 1], xSheet1.Cells[3, 5]).MergeCells = true;
                xSheet1.get_Range(xSheet1.Cells[5, 1], xSheet1.Cells[5, 5]).MergeCells = true;
                xSheet1.get_Range(xSheet1.Cells[1, 1], xSheet1.Cells[1, 1]).Font.Size = 16;
                xSheet1.get_Range(xSheet1.Cells[1, 1], xSheet1.Cells[7, 5]).Font.Name = "黑体";
                xSheet1.get_Range(xSheet1.Cells[1, 1], xSheet1.Cells[1, 1]).Font.ColorIndex = 3;
                //xSheet1.get_Range(xSheet1.Cells[1, 1], xSheet1.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                //xSheet1.get_Range(xSheet1.Cells[1, 1], xSheet1.Cells[1, 1]).Interior.ColorIndex = 3;
                //xSheet1.get_Range(xSheet1.Cells[6, 1], xSheet1.Cells[xSheet1.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;

                newWorksheet2.get_Range(newWorksheet2.Cells[1, 1], newWorksheet2.Cells[1, 7]).MergeCells = true;
                newWorksheet2.get_Range(newWorksheet2.Cells[3, 1], newWorksheet2.Cells[3, 7]).MergeCells = true;
                newWorksheet2.get_Range(newWorksheet2.Cells[5, 1], newWorksheet2.Cells[5, 7]).MergeCells = true;
                newWorksheet2.get_Range(newWorksheet2.Cells[1, 1], newWorksheet2.Cells[1, 1]).Font.Size = 16;
                newWorksheet2.get_Range(newWorksheet2.Cells[1, 1], newWorksheet2.Cells[7, 7]).Font.Name = "黑体";
                newWorksheet2.get_Range(newWorksheet2.Cells[1, 1], newWorksheet2.Cells[1, 1]).Font.ColorIndex = 3;

                newWorksheet3.get_Range(newWorksheet3.Cells[1, 1], newWorksheet3.Cells[1, 8]).MergeCells = true;
                newWorksheet3.get_Range(newWorksheet3.Cells[3, 1], newWorksheet3.Cells[3, 8]).MergeCells = true;
                newWorksheet3.get_Range(newWorksheet3.Cells[5, 1], newWorksheet3.Cells[5, 8]).MergeCells = true;
                newWorksheet3.get_Range(newWorksheet3.Cells[1, 1], newWorksheet3.Cells[1, 1]).Font.Size = 16;
                newWorksheet3.get_Range(newWorksheet3.Cells[1, 1], newWorksheet3.Cells[7, 8]).Font.Name = "黑体";
                newWorksheet3.get_Range(newWorksheet3.Cells[1, 1], newWorksheet3.Cells[1, 1]).Font.ColorIndex = 3;

                newWorksheet4.get_Range(newWorksheet4.Cells[1, 1], newWorksheet4.Cells[1, 6]).MergeCells = true;
                newWorksheet4.get_Range(newWorksheet4.Cells[3, 1], newWorksheet4.Cells[3, 6]).MergeCells = true;
                newWorksheet4.get_Range(newWorksheet4.Cells[5, 1], newWorksheet4.Cells[5, 6]).MergeCells = true;
                newWorksheet4.get_Range(newWorksheet4.Cells[1, 1], newWorksheet4.Cells[1, 1]).Font.Size = 16;
                newWorksheet4.get_Range(newWorksheet4.Cells[1, 1], newWorksheet4.Cells[7, 6]).Font.Name = "黑体";
                newWorksheet4.get_Range(newWorksheet4.Cells[1, 1], newWorksheet4.Cells[1, 1]).Font.ColorIndex = 3;

                xSheet1.Rows.AutoFit();
                xSheet1.Columns.AutoFit();
                newWorksheet2.Rows.AutoFit();
                newWorksheet2.Columns.AutoFit();
                newWorksheet3.Rows.AutoFit();
                newWorksheet3.Columns.AutoFit();
                newWorksheet4.Rows.AutoFit();
                newWorksheet4.Columns.AutoFit();

                xSheet1.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "无功优化.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);

                result2.Workbooks.Close();                
                result2.Quit();
                result3.Workbooks.Close();
                result3.Quit();
                result4.Workbooks.Close();
                result4.Quit();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("计算出错，请检查数据！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }
        private void PspNIULA()
        {
            if (!Check())
            {
                return;
            }
            try
            {
                XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");

                foreach (XmlNode node in list)
                {
                    SvgElement element = node as SvgElement;
                    if ((element.GetAttribute("textn1id") == null || element.GetAttribute("textn1id") == "") && (element.GetAttribute("textn2id") == null || element.GetAttribute("textn2id") == ""))
                    {
                        tlVectorControl1.SVGDocument.CurrentElement = element;
                        tlVectorControl1.Delete();
                    }
                }

                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF1.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\PF1.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\DH1.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\IH1.txt");
                }


                NIULA niulaP = new NIULA();

                niulaP.CurrentCal();
                
                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0;
                PSPDEV benchmark = new PSPDEV();
                benchmark.Type = "power";
                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                if (list3 == null)
                {
                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (PSPDEV dev in list3)
                {
                    yinzi = Convert.ToDouble(dev.PowerFactor);
                    capability = Convert.ToDouble(dev.StandardCurrent);
                    volt = Convert.ToDouble(dev.StandardVolt);
                    TLPSPVmin = dev.iV;
                    TLPSPVmax = dev.jV;
                    if (dev.PowerFactor == 0)
                    {
                        yinzi = 1;
                    }
                    if (dev.StandardCurrent == 0)
                    {
                        capability = 1;
                    }
                    if (dev.StandardVolt == 0)
                    {
                        volt = 1;
                    }
                    standvolt = volt;
                    current = capability / (Math.Sqrt(3) * volt);
                };
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF1.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH1.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH1.txt"))
                {
                }
                else
                {
                    MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                FileStream dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF1.txt", FileMode.Open);
                StreamReader readLine = new StreamReader(dh);
                string strLine;
                string[] array1;
                char[] charSplit = new char[] { ' ' };
                strLine = readLine.ReadLine();
                string octor = "节点电压 ";
                tlVectorControl1.SVGDocument.AcceptChanges = true;
                while (strLine != null)
                {
                    array1 = strLine.Split(charSplit);
                    string[] dev = new string[8];
                    dev.Initialize();
                    int i = 0;
                    foreach (string str in array1)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("线路和节点参数错误，输入的数据形成的导纳矩阵没有逆矩阵，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[0]));
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Use";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                    
                    if (pspDev != null)
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        current = capability / (Math.Sqrt(3) * volt);
                        if (pspDev.Name.Substring(0, 2) == "T_")//如果容量为０当作T接点跳过
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer") );
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            RectangleF bound = ((IGraph)element).GetBounds();                   
                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;
                            if (n1==null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(bound.X));
                                n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                //MessageBox.Show(Convert.ToString(n1.InnerText));
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            }                            
                            
                            (n1 as Text).TextString=(Convert.ToDouble(dev[1]) * volt).ToString("N2");
                            //n1.InnerText = (Convert.ToDouble(dev[1]) * volt).ToString("N2");
                            octor += " ";
                            octor += Convert.ToString(n1.InnerText);
                            
                            if (Convert.ToDouble(dev[1]) > TLPSPVmax * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt || Convert.ToDouble(dev[1]) < TLPSPVmin * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt)//电压越限，需修改
                                n1.SetAttribute("stroke", "#FF0000");
                            if (pspDev.NodeType == "0")
                            {
                                if (Convert.ToDouble(dev[4]) >= 0)
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2==null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 20));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    //(n2 as Text).TextString =((Convert.ToDouble(dev[3]) * capability).ToString("N2") + "  + " + "j" + (Convert.ToDouble(dev[4]) * capability).ToString("N2"));
                                    n2.InnerText = ((Convert.ToDouble(dev[3]) * capability).ToString("N2") + "  + " + "j" + (Convert.ToDouble(dev[4]) * capability).ToString("N2"));

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }
                                else
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2==null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 15));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = (Convert.ToDouble(dev[3]) * capability).ToString("N2") + " - " + "j" + (Math.Abs(Convert.ToDouble(dev[4]) * capability)).ToString("N2");
                                    //(n2 as Text).TextString=(Convert.ToDouble(dev[3]) * capability).ToString("N2") + " - " + "j" + (Math.Abs(Convert.ToDouble(dev[4]) * capability)).ToString("N2");
                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }
                                
                            }
                            
                            tlVectorControl1.Operation = ToolOperation.Select;
                            tlVectorControl1.Refresh();

                        }

                    }

                    strLine = readLine.ReadLine();
                }
                readLine.Close();

                //MessageBox.Show(octor);
                octor = "线路电流 ";

                FileStream ih = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH1.txt", FileMode.Open);
                StreamReader ihLine = new StreamReader(ih);
                FileStream dhdh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH1.txt", FileMode.Open);
                StreamReader dhLine = new StreamReader(dhdh);
                string strIH;
                string strDH;
                string[] array2;
                string[] array3;
                strIH = ihLine.ReadLine();
                strDH = dhLine.ReadLine();
                while (strIH != null && strDH != null)
                {

                    array2 = strIH.Split(charSplit);
                    array3 = strDH.Split(charSplit);
                    string[] dev = new string[8];
                    string[] devDH = new string[13];
                    dev.Initialize();
                    devDH.Initialize();
                    int i = 0;
                    foreach (string str in array2)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    int j = 0;
                    foreach (string str in array3)
                    {
                        if (str != "")
                        {
                            devDH[j++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Name = dev[0];
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Polyline";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);

                    if (pspDev != null && pspDev.LineStatus == "运行")
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;

                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strIH = ihLine.ReadLine();
                            strDH = dhLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            PointF[] t = ((Polyline)element).Points;

                            PointF[] t2 = ((Polyline)element).FirstTwoPoint;
                            t = t2;

                            PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                            float angel = 0f;
                            angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                            string l3 = Convert.ToString(midt.X);
                            string l4 = Convert.ToString(midt.Y);

                            string tran = ((Polyline)element).Transform.ToString();

                            PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));

                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            //XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;
                          
                           
                            //XmlElement n3 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;

                            PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                            PointF pStart2 = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                            PSPDEV psp = new PSPDEV();
                            psp.FirstNode = pspDev.FirstNode;
                            psp.LastNode = pspDev.LastNode;
                            psp.SvgUID = pspDev.SvgUID;
                            PSPDEV tempss = new PSPDEV();
                            IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                            foreach (PSPDEV devP in listParallel)
                            {
                                if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                {
                                    if (((devP.X1) > (pspDev.X1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }

                                //if ((Math.Abs(angel) > 90))
                                //{

                                //    if (((devP.X1 + devP.Y1) > (pspDev.X1 + pspDev.Y1)))
                                //    {
                                //        pStart = new PointF(center.X - (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                //    }
                                //    else
                                //    {
                                //        pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));

                                //    }
                                //}
                            }

                            PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));
                             
                            if (n1==null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(pStart.X));
                                n1.SetAttribute("y", Convert.ToString(pStart.Y));
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;
                                tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;
                                tlVectorControl1.RotateSelection(angel, pStart);
                                if (Math.Abs(angel) > 90)
                                    tlVectorControl1.RotateSelection(180, pStart);
                            }

                            //n3.SetAttribute("x", Convert.ToString(pStart2.X));
                            //n3.SetAttribute("y", Convert.ToString(pStart2.Y));
                            //double temp=(Convert.ToDouble(devDH[6])+Convert.ToDouble(devDH[10])*volt*volt/1000000)*capability;
                            //if (temp>=0)
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() + " + "+"j"+temp.ToString();
                            //}
                            //else
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() +" - "+"j"+ (Math.Abs(temp)).ToString();
                            //}

                            //n3.SetAttribute("layer", SvgDocument.currentLayer);
                            //n3.SetAttribute("flag", "1");
                            //n3.SetAttribute("stroke", "#0000FF");
                            //n1.SetAttribute("x", Convert.ToString(t[0].X + (t[1].X - t[0].X) / 2));
                            //n1.SetAttribute("y", Convert.ToString(t[0].Y + (t[1].Y - t[0].Y) / 2));
                            if (Convert.ToDouble(devDH[4]) >= 0)
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " + j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }
                            else
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " - j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }

                            if (listParallel != null)
                            {
                                if (Convert.ToDouble(dev[3]) > ((PSPDEV)listParallel[0]).LineChange)//电流越限，需修改。
                                    n1.SetAttribute("stroke", "#FF0000");
                            }


                            PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 10) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 10) * Math.PI / 180)));
                            PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 350) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 350) * Math.PI / 180)));

                            if (Convert.ToDouble(devDH[3]) < 0)
                            {
                                p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 170) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 170) * Math.PI / 180)));
                                p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 190) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 190) * Math.PI / 180)));
                            }

                            string l1 = Convert.ToString(p1.X);
                            string l2 = Convert.ToString(p1.Y);
                            string l5 = Convert.ToString(p2.X);
                            string l6 = Convert.ToString(p2.Y);

                            XmlElement n2 = tlVectorControl1.SVGDocument.CreateElement("polygon") as Polygon;
                            n2.SetAttribute("fill-opacity", "1");
                            n2.SetAttribute("layer", SvgDocument.currentLayer);
                            n2.SetAttribute("flag", "1");
                            n2.SetAttribute("font-size", "6");
                            n2.SetAttribute("font-family", "楷体_GB2312");
                            n2.SetAttribute("style", "fill:#000000");
                            //n2.SetAttribute("textn2id", pspDev.EleID);
                            n2.SetAttribute("points", l1 + " " + l2 + "," + l3 + " " + l4 + "," + l5 + " " + l6);
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                //tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;
             
                            
                            



 

                            //if (Convert.ToDouble(dev[3]) <= 0)
                            RectangleF ttt = ((Polyline)element).GetBounds();

                            //tlVectorControl1.RotateSelection((float)(Math.Atan((t[1].Y - t[0].Y) / (t[1].X - t[0].X)) * 180 / Math.PI), pt4[0]);
                            //tlVectorControl1.RotateSelection(-10, (new PointF(center.X+10,center.Y+10)));
                            //tlVectorControl1.SVGDocument.RootElement.AppendChild(n3);
                            //tlVectorControl1.Operation = ToolOperation.Select;
                            //tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;
                            //tlVectorControl1.RotateSelection(360 + angel, pStart2);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(-180, pStart2);

                            PointF newp = new PointF(center.X + 10, center.Y + 10);


                            tlVectorControl1.Refresh();

                        }

                    }
                    strIH = ihLine.ReadLine();
                    strDH = dhLine.ReadLine();
                }

                ihLine.Close();
                dhLine.Close();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
         
            
        }
        private void Biubiu()
        {

        }
        private void PspPQ()
        {
            if (!CheckPQ())
            {
                return;
            }
            try
            {
                XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");

                foreach (XmlNode node in list)
                {
                    SvgElement element = node as SvgElement;
                    if ((element.GetAttribute("textn1id") == null || element.GetAttribute("textn1id") == "") && (element.GetAttribute("textn2id") == null || element.GetAttribute("textn2id") == ""))
                    {
                        tlVectorControl1.SVGDocument.CurrentElement = element;
                        tlVectorControl1.Delete();
                    }
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF2.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\PF2.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH2.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\DH2.txt");
                }
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH2.txt"))
                {
                    File.Delete(System.Windows.Forms.Application.StartupPath + "\\IH2.txt");
                }

                PQ_PowerFlowCalClass pq = new PQ_PowerFlowCalClass();
                pq.CurrentCal();

                double yinzi = 0, capability = 0, volt = 0,standvolt=0, current = 0;
                PSPDEV benchmark = new PSPDEV();
                benchmark.Type = "power";
                benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                if (list3 == null)
                {
                    MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (PSPDEV dev in list3)
                {
                    yinzi = Convert.ToDouble(dev.PowerFactor);
                    capability = Convert.ToDouble(dev.StandardCurrent);
                    volt = Convert.ToDouble(dev.StandardVolt);
                    TLPSPVmin = dev.iV;
                    TLPSPVmax = dev.jV;
                    if (dev.PowerFactor == 0)
                    {
                        yinzi = 1;
                    }
                    if ( dev.StandardCurrent == 0)
                    {
                        capability = 1;
                    }
                    if (dev.StandardVolt == 0)
                    {
                        volt = 1;
                    }
                    standvolt = volt;
                    current = capability / (Math.Sqrt(3) * volt);
                   
                };
                capability = 100;
                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\PF2.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\DH2.txt") && File.Exists(System.Windows.Forms.Application.StartupPath + "\\IH2.txt"))
                {
                }
                else
                {
                    MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                FileStream dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\PF2.txt", FileMode.Open);
                StreamReader readLine = new StreamReader(dh);
                string strLine;
                string[] array1;
                char[] charSplit = new char[] { ' ' };
                strLine = readLine.ReadLine();
                string octor = "节点电压 ";
                tlVectorControl1.SVGDocument.AcceptChanges = true;
                while (strLine != null)
                {
                    array1 = strLine.Split(charSplit);
                    string[] dev = new string[8];
                    dev.Initialize();
                    int i = 0;
                    foreach (string str in array1)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[0]));
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Use";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                    
                   
                    if (pspDev != null) {
                        if (pspDev.Name.Substring(0, 2) == "T_")//如果容量为０当作T接点跳过
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        current = capability / (Math.Sqrt(3) * volt);
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strLine = readLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            RectangleF bound = ((IGraph)element).GetBounds();
                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;
                            if (n1 == null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(bound.X));
                                n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                //MessageBox.Show(Convert.ToString(n1.InnerText));
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                            }


                            n1.InnerText = (Convert.ToDouble(dev[1]) * volt).ToString("N2");
                            octor += " ";
                            octor += Convert.ToString(n1.InnerText);

                            if (Convert.ToDouble(dev[1]) > TLPSPVmax * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt || Convert.ToDouble(dev[1]) < TLPSPVmin * getVolt(pspDev.ReferenceVolt) / pspDev.ReferenceVolt)//电压越限，需修改
                                n1.SetAttribute("stroke", "#FF0000");
                            if (pspDev.NodeType == "0")
                            {
                                if (Convert.ToDouble(dev[4]) >= 0)
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2 == null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 20));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = ((Convert.ToDouble(dev[3]) * capability).ToString("N2") + "  + " + "j" + (Convert.ToDouble(dev[4]) * capability).ToString("N2"));

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }
                                else
                                {
                                    double tempb = Convert.ToDouble(pspDev.Burthen);
                                    if (n2 == null)
                                    {
                                        n2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n2.SetAttribute("x", Convert.ToString(bound.X));
                                        n2.SetAttribute("y", Convert.ToString(bound.Y + bound.Height + 15));
                                        n2.SetAttribute("layer", SvgDocument.currentLayer);
                                        n2.SetAttribute("flag", "1");
                                        n2.SetAttribute("font-size", "6");
                                        n2.SetAttribute("font-family", "楷体_GB2312");
                                        n2.SetAttribute("textn2id", pspDev.EleID);
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                                    }
                                    n2.InnerText = (Convert.ToDouble(dev[3]) * capability).ToString("N2") + " - " + "j" + (Math.Abs(Convert.ToDouble(dev[4]) * capability)).ToString("N2");

                                    double tempi = Convert.ToDouble(dev[3]) * capability;
                                    double tempj = Convert.ToDouble(dev[4]) * capability;
                                    double temptotal = Math.Sqrt(tempi * tempi + tempj * tempj);
                                    if (temptotal > Convert.ToDouble(pspDev.Burthen))
                                    {
                                        n2.SetAttribute("stroke", "#FF0000");
                                    }
                                }

                            }
                            tlVectorControl1.Operation = ToolOperation.Select;
                            tlVectorControl1.Refresh();

                        }

                    }

                    strLine = readLine.ReadLine();
                }
                readLine.Close();

                //MessageBox.Show(octor);
                octor = "线路电流 ";

                FileStream ih = new FileStream(System.Windows.Forms.Application.StartupPath + "\\IH2.txt", FileMode.Open);
                StreamReader ihLine = new StreamReader(ih);
                FileStream dhdh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\DH2.txt", FileMode.Open);
                StreamReader dhLine = new StreamReader(dhdh);
                string strIH;
                string strDH;
                string[] array2;
                string[] array3;
                strIH = ihLine.ReadLine();
                strDH = dhLine.ReadLine();
                while (strIH != null && strDH != null)
                {

                    array2 = strIH.Split(charSplit);
                    array3 = strDH.Split(charSplit);
                    string[] dev = new string[8];
                    string[] devDH = new string[13];
                    dev.Initialize();
                    devDH.Initialize();
                    int i = 0;
                    foreach (string str in array2)
                    {
                        if (str != "")
                        {
                            dev[i++] = str;
                        }
                        if (str.Contains("NAN"))
                        {
                            MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    int j = 0;
                    foreach (string str in array3)
                    {
                        if (str != "")
                        {
                            devDH[j++] = str;
                        }
                    }
                    PSPDEV pspDev = new PSPDEV();
                    pspDev.Name = dev[0];
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.Type = "Polyline";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);
                   
                    if (pspDev != null && pspDev.LineStatus == "运行")
                    {
                        if (pspDev != null && pspDev.ReferenceVolt != 0)
                        {
                            volt = pspDev.ReferenceVolt;
                        }
                        else
                            volt = standvolt;
                        current = capability / (Math.Sqrt(3) * volt);
                        XmlElement element = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                        Layer la = tlVectorControl1.SVGDocument.GetLayerByID(element.GetAttribute("layer"));
                        if (la.GetAttribute("visibility") == "hidden")
                        {
                            strIH = ihLine.ReadLine();
                            strDH = dhLine.ReadLine();
                            continue;
                        }
                        if (element != null)
                        {
                            PointF[] t = ((Polyline)element).Points;

                            PointF[] t2 = ((Polyline)element).FirstTwoPoint;
                            t = t2;

                            PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                            float angel = 0f;
                            angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                            string l3 = Convert.ToString(midt.X);
                            string l4 = Convert.ToString(midt.Y);

                            string tran = ((Polyline)element).Transform.ToString();

                            PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));

                            XmlElement n1 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn1id='" + pspDev.EleID + "']") as XmlElement;
                            //XmlElement n2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@textn2id='" + pspDev.EleID + "']") as XmlElement;


                            //XmlElement n3 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;

                            PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                            PointF pStart2 = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                            PSPDEV psp = new PSPDEV();
                            psp.FirstNode = pspDev.FirstNode;
                            psp.LastNode = pspDev.LastNode;
                            psp.SvgUID = pspDev.SvgUID;
                            PSPDEV tempss = new PSPDEV();
                            IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                            foreach (PSPDEV devP in listParallel)
                            {
                                if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                {
                                    if (((devP.X1) > (pspDev.X1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(23 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }
                                else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                {
                                    if (((devP.Y1) > (pspDev.Y1)))
                                    {
                                        pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                        pStart2 = new PointF(center.X + (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(7 * Math.Cos((angel) * Math.PI / 180)));
                                    }
                                }

                                //if ((Math.Abs(angel) > 90))
                                //{

                                //    if (((devP.X1 + devP.Y1) > (pspDev.X1 + pspDev.Y1)))
                                //    {
                                //        pStart = new PointF(center.X - (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                //    }
                                //    else
                                //    {
                                //        pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));

                                //    }
                                //}
                            }

                            PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                            if (n1 == null)
                            {
                                n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                n1.SetAttribute("x", Convert.ToString(pStart.X));
                                n1.SetAttribute("y", Convert.ToString(pStart.Y));
                                n1.SetAttribute("layer", SvgDocument.currentLayer);
                                n1.SetAttribute("flag", "1");
                                n1.SetAttribute("font-size", "6");
                                n1.SetAttribute("font-family", "楷体_GB2312");
                                n1.SetAttribute("textn1id", pspDev.EleID);
                                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                tlVectorControl1.Operation = ToolOperation.Select;
                                tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;
                                tlVectorControl1.RotateSelection(angel, pStart);
                                if (Math.Abs(angel) > 90)
                                    tlVectorControl1.RotateSelection(180, pStart);
                            }

                            //n3.SetAttribute("x", Convert.ToString(pStart2.X));
                            //n3.SetAttribute("y", Convert.ToString(pStart2.Y));
                            //double temp=(Convert.ToDouble(devDH[6])+Convert.ToDouble(devDH[10])*volt*volt/1000000)*capability;
                            //if (temp>=0)
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() + " + "+"j"+temp.ToString();
                            //}
                            //else
                            //{
                            //    n3.InnerText = ((Convert.ToDouble(devDH[5]) + Convert.ToDouble(devDH[9]) * volt * volt/1000000)*capability).ToString() +" - "+"j"+ (Math.Abs(temp)).ToString();
                            //}

                            //n3.SetAttribute("layer", SvgDocument.currentLayer);
                            //n3.SetAttribute("flag", "1");
                            //n3.SetAttribute("stroke", "#0000FF");
                            //n1.SetAttribute("x", Convert.ToString(t[0].X + (t[1].X - t[0].X) / 2));
                            //n1.SetAttribute("y", Convert.ToString(t[0].Y + (t[1].Y - t[0].Y) / 2));
                            if (Convert.ToDouble(devDH[4]) >= 0)
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " + j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }
                            else
                            {
                                n1.InnerText = (Math.Abs(Convert.ToDouble(devDH[3]) * capability)).ToString("N2") + " - j" + (Math.Abs(Convert.ToDouble(devDH[4]) * capability)).ToString("N2");
                            }

                            if (listParallel != null)
                            {
                                if (Convert.ToDouble(dev[3]) > ((PSPDEV)listParallel[0]).LineChange)//电流越限，需修改。
                                    n1.SetAttribute("stroke", "#FF0000");
                            }


                            PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 10) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 10) * Math.PI / 180)));
                            PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 350) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 350) * Math.PI / 180)));

                            if (Convert.ToDouble(devDH[3]) < 0)
                            {
                                p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 170) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 170) * Math.PI / 180)));
                                p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 190) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 190) * Math.PI / 180)));
                            }

                            string l1 = Convert.ToString(p1.X);
                            string l2 = Convert.ToString(p1.Y);
                            string l5 = Convert.ToString(p2.X);
                            string l6 = Convert.ToString(p2.Y);

                            XmlElement n2 = tlVectorControl1.SVGDocument.CreateElement("polygon") as Polygon;
                            n2.SetAttribute("fill-opacity", "1");
                            n2.SetAttribute("layer", SvgDocument.currentLayer);
                            n2.SetAttribute("flag", "1");
                            n2.SetAttribute("font-size", "6");
                            n2.SetAttribute("font-family", "楷体_GB2312");
                            n2.SetAttribute("style", "fill:#000000");
                            //n2.SetAttribute("textn2id", pspDev.EleID);
                            n2.SetAttribute("points", l1 + " " + l2 + "," + l3 + " " + l4 + "," + l5 + " " + l6);
                            tlVectorControl1.SVGDocument.RootElement.AppendChild(n2);
                            //tlVectorControl1.SVGDocument.CurrentElement = n2 as SvgElement;








                            //if (Convert.ToDouble(dev[3]) <= 0)
                            RectangleF ttt = ((Polyline)element).GetBounds();

                            tlVectorControl1.RotateSelection(angel, pStart);
                            if (Math.Abs(angel) > 90)
                                tlVectorControl1.RotateSelection(180, pStart);
                            //tlVectorControl1.RotateSelection((float)(Math.Atan((t[1].Y - t[0].Y) / (t[1].X - t[0].X)) * 180 / Math.PI), pt4[0]);
                            //tlVectorControl1.RotateSelection(-10, (new PointF(center.X+10,center.Y+10)));
                            //tlVectorControl1.SVGDocument.RootElement.AppendChild(n3);
                            //tlVectorControl1.Operation = ToolOperation.Select;
                            //tlVectorControl1.SVGDocument.CurrentElement = n3 as SvgElement;
                            //tlVectorControl1.RotateSelection(360+angel, pStart2);
                            //if (Math.Abs(angel) > 90)
                            //    tlVectorControl1.RotateSelection(-180, pStart2);

                            PointF newp = new PointF(center.X + 10, center.Y + 10);



                            tlVectorControl1.Refresh();

                        }

                    }
                    strIH = ihLine.ReadLine();
                    strDH = dhLine.ReadLine();
                }

                ihLine.Close();
                dhLine.Close();
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("参数错误，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                
                return;
            }
 
        }
        public void Save()
        {
            //XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");
            //foreach (XmlNode node in list)
            //{
            //    SvgElement element = node as SvgElement;
            //    tlVectorControl1.SVGDocument.CurrentElement = element;
            //    tlVectorControl1.Delete();
            //}

            if (tlVectorControl1.SVGDocument.SvgdataUid != string.Empty)
            {
                IList svglist = Services.BaseService.GetList("SelectSVGFILEByKey", tlVectorControl1.SVGDocument.SvgdataUid);
                if (svglist.Count > 0)
                {
                    svg = (SVGFILE)svglist[0];
                    svg.SVGDATA = tlVectorControl1.SVGDocument.OuterXml;
                    svg.FILENAME = tlVectorControl1.SVGDocument.FileName;
                    Services.BaseService.Update<SVGFILE>(svg);
                    PSPDIR pspDir = new PSPDIR();
                    pspDir.FileGUID = svg.SUID;
                    pspDir.FileName = tlVectorControl1.SVGDocument.FileName;
                    if (fileType == true)
                    {
                        pspDir.FileType = "潮流";
                    } 
                    else
                    {
                        pspDir.FileType = "短路";
                    }
                    Services.BaseService.Update<PSPDIR>(pspDir);
                }
                else
                {
                    svg.SUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    svg.FILENAME = tlVectorControl1.SVGDocument.FileName;
                    svg.SVGDATA = tlVectorControl1.SVGDocument.OuterXml;
                    Services.BaseService.Create<SVGFILE>(svg);
                    PSPDIR pspDir = new PSPDIR();
                    pspDir.FileGUID = svg.SUID;
                    pspDir.FileName = svg.FILENAME;
                    if (fileType == true)
                    {
                        pspDir.FileType = "潮流";
                    }
                    else
                    {
                        pspDir.FileType = "短路";
                    }
                    pspDir.CreateTime = System.DateTime.Now.ToString();
                    Services.BaseService.Create<PSPDIR>(pspDir);
                }
            }
            else
            {
                svg.SUID = Guid.NewGuid().ToString();
                svg.FILENAME = tlVectorControl1.SVGDocument.FileName;
                svg.SVGDATA = tlVectorControl1.SVGDocument.OuterXml;
                Services.BaseService.Create<SVGFILE>(svg);
                tlVectorControl1.SVGDocument.SvgdataUid = svg.SUID;
                PSPDIR pspDir = new PSPDIR();
                pspDir.FileGUID = svg.SUID;
                pspDir.FileName = svg.FILENAME;
                if (fileType == true)
                {
                    pspDir.FileType = "潮流";
                }
                else
                {
                    pspDir.FileType = "短路";
                }
                pspDir.CreateTime = System.DateTime.Now.ToString();
                Services.BaseService.Create<PSPDIR>(pspDir);
            }
            tlVectorControl1.IsModified = false;
        }
        public void Open2(string _SvgUID, string yearID)
        {
            try
            {
                string uid = ConfigurationSettings.AppSettings.Get("SvgID");

                StringBuilder txt = new StringBuilder("<?xml version=\"1.0\" encoding=\"utf-8\"?><svg id=\"svg\" width=\"1500\" height=\"1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:itop=\"http://www.Itop.com/itop\" transform=\"matrix(1 0 0 1 0 1)\"><defs>");
                string svgdefs = "";
                string layertxt = "";
                StringBuilder content = new StringBuilder();

                if (string.IsNullOrEmpty(_SvgUID)) return;
                SVG_LAYER lar = new SVG_LAYER();
                lar.svgID = uid;
                lar.YearID ="'"+ yearID+"'";
                IList<SVG_LAYER> larlist = Services.BaseService.GetList<SVG_LAYER>("SelectSVG_LAYERByYearID", lar);
                foreach (SVG_LAYER _lar in larlist)
                {
                    //layertxt = layertxt + "<layer id=\"" + _lar.SUID + "\" label=\"" + _lar.NAME + "\" layerType=\"" + _lar.layerType + "\" visibility=\"" + _lar.visibility + "\" ParentID=\"" + _lar.YearID + "\" IsSelect=\"" + _lar.IsSelect + "\" />";
                    content.Append(_lar.XML);
                }
                txt.Append("<layer id=\"layer6666\" label=\"默认层\" />");
                txt.Append(layertxt);
               

                SVG_SYMBOL sym = new SVG_SYMBOL();
                sym.svgID = uid;
                IList<SVG_SYMBOL> symlist = Services.BaseService.GetList<SVG_SYMBOL>("SelectSVG_SYMBOLBySvgID", sym);
                foreach (SVG_SYMBOL _sym in symlist)
                {
                    svgdefs = svgdefs + _sym.XML;
                }
                txt.Append(svgdefs + "</defs>");
                txt.Append(content.ToString() + "</svg>");
                
                SvgDocument document = new SvgDocument();
                document.LoadXml(txt.ToString());
                //document.FileName = SvgName;
                document.SvgdataUid = _SvgUID;
                SVGUID = _SvgUID;

                this.Text = document.FileName;
                if (document.RootElement == null)
                {
                    tlVectorControl1.NewFile();
                    Layer.CreateNew("背景层", tlVectorControl1.SVGDocument);
                    Layer.CreateNew("城市规划层", tlVectorControl1.SVGDocument);
                    Layer.CreateNew("供电区域层", tlVectorControl1.SVGDocument);
                }
                else
                {
                    tlVectorControl1.SVGDocument = document;
                }
                tlVectorControl1.SVGDocument.SvgdataUid = SVGUID;
                tlVectorControl1.SVGDocument.FileName = this.Text;
                tlVectorControl1.DocumentbgColor = Color.White;
                tlVectorControl1.BackColor = Color.White;

                foreach(XmlElement ele in document.RootElement.ChildNodes ){
                    ele.SetAttribute("layer", "layer6666");
                    if (((SvgElement)ele).LocalName == "polyline")
                    {
                        ele.SetAttribute("flag", "1");
                    }
                }

                SvgDocument.currentLayer = "layer6666";

            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
            }
            //tlVectorControl1.SVGDocument.SvgdataUid = "";
        }
        public void Open(string _SvgUID)
        {
            try
            {
                SVGFILE svgFile = new SVGFILE();
                svgFile.SUID = _SvgUID;
                SvgDocument document = new SvgDocument();
                if (document != null)
                {
                    IList svgList = Services.BaseService.GetList("SelectSVGFILEByKey", svgFile);
                    if (svgList.Count > 0)
                    {
                        svgFile = (SVGFILE)svgList[0];
                    }

                    document = new SvgDocument();
                    if (!string.IsNullOrEmpty(svgFile.SVGDATA))
                    {
                        document.LoadXml(svgFile.SVGDATA);
                    }
                    
                    document.FileName = svgFile.FILENAME;
                    document.SvgdataUid = svgFile.SUID;
                }
                SVGUID = document.SvgdataUid;

                this.Text = document.FileName;
                if (document.RootElement == null)
                {
                    tlVectorControl1.NewFile();
                }
                else
                {
                    tlVectorControl1.SVGDocument = document;
                    tlVectorControl1.SVGDocument.CurrentLayer = ((tlVectorControl1.SVGDocument.getLayerList()[0]) as ItopVector.Core.Figure.Layer);
                }
                tlVectorControl1.SVGDocument.SvgdataUid = SVGUID;
                tlVectorControl1.SVGDocument.FileName = this.Text;
                tlVectorControl1.DocumentbgColor = Color.White;
                tlVectorControl1.BackColor = Color.White;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
            }
        }
        private bool CheckDL()
        {
            TopologyDL();
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "支路";
            IList list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            string lineTXT=null;
            foreach (PSPDEV dev in list)
            {
                if (dev.FirstNode!=-1&&dev.LastNode!=-1)
                {
                    if (lineTXT != null)
                    {
                        lineTXT += "\r\n";
                    }
                    pspDev.Number = dev.FirstNode;
                    pspDev.Type = "Use";
                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                    if(pspDev!=null)
                        lineTXT += dev.Name + " " + dev.FirstNode + " " + dev.LastNode + " " + dev.Number + " " + dev.PositiveR * 100 / (pspDev.ReferenceVolt * pspDev.ReferenceVolt) + " " + dev.PositiveTQ * 100 / (pspDev.ReferenceVolt * pspDev.ReferenceVolt) + " " + dev.SmallTQ * pspDev.ReferenceVolt * pspDev.ReferenceVolt / (100 * 1000000) + " " + dev.ZeroR * 100 / (pspDev.ReferenceVolt * pspDev.ReferenceVolt) + " " + dev.ZeroTQ * 100 / (pspDev.ReferenceVolt * pspDev.ReferenceVolt) + " " + dev.BigTQ * pspDev.ReferenceVolt * pspDev.ReferenceVolt / (100 * 1000000) + " " + SwitchStatus(dev.KName) + " " + SwitchStatus(dev.KSwitchStatus);
                    else
                        lineTXT += dev.Name + " " + dev.FirstNode + " " + dev.LastNode + " " + dev.Number + " " + dev.PositiveR * 100 / (230 * 230) + " " + dev.PositiveTQ * 100 / (230 * 230) + " " + dev.SmallTQ * 230 * 230 / (100 * 1000000) + " " + dev.ZeroR * 100 / (230 * 230) + " " + dev.ZeroTQ * 100 / (230 * 230) + " " + dev.BigTQ * 230 * 230 / (100 * 1000000) + " " + SwitchStatus(dev.KName) + " " + SwitchStatus(dev.KSwitchStatus);
                }
               
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\line.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\line.txt");
            }
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\line.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK, System.Text.Encoding.GetEncoding("GB2312"));
            str1.Write(lineTXT);
            str1.Close();

            string trans2 = null;
            pspDev.Type = "transformertwozu";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "二绕组变压器";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            int i=1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devFirst = new PSPDEV();
                devFirst.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devFirst.Name = dev.HuganLine1;
                devFirst.Type = "Use";
                devFirst = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devFirst);
                PSPDEV devLast = new PSPDEV();
                devLast.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devLast.Name = dev.HuganLine2;
                devLast.Type = "Use";
                devLast = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devLast);

                if (trans2 != null)
                {
                    trans2 += "\r\n";
                }
                trans2 += dev.Name + " " + i + " " + devFirst.Number + " " + devLast.Number + " " + (dev.ZeroR * devFirst.ReferenceVolt * devFirst.ReferenceVolt) / (100 * 1000000) + " " + (dev.ZeroTQ * devFirst.ReferenceVolt * devFirst.ReferenceVolt) / (100 * 1000000) + " " + dev.K + " " + dev.LineLevel + " " + dev.LineType + " " + (dev.PositiveR * 100) / (devFirst.ReferenceVolt * devFirst.ReferenceVolt) + " " + (dev.PositiveTQ * 100) / (devFirst.ReferenceVolt * devFirst.ReferenceVolt) + " "
                           + dev.SmallTQ * 100 / (dev.Vib * dev.Vib) + " " + dev.BigTQ * 100 / (dev.Vib * dev.Vib) + " " + SwitchStatus(dev.HuganLine3) + " " + SwitchStatus(dev.HuganLine4);

                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\trans2.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\trans2.txt");
            }
            FileStream tran = new FileStream((System.Windows.Forms.Application.StartupPath + "\\trans2.txt"), FileMode.OpenOrCreate);
            StreamWriter str2 = new StreamWriter(tran,System.Text.Encoding.GetEncoding("GB2312"));
            str2.Write(trans2);
            str2.Close();

            string trans3 = null;
            pspDev.Type = "transformerthirdzu";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "三绕组变压器";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
                PSPDEV devJNode = new PSPDEV();
                devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJNode.Name = dev.HuganLine2;
                devJNode.Type = "Use";
                devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJNode);
                PSPDEV devKNode = new PSPDEV();
                devKNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devKNode.Name = dev.KName;
                devKNode.Type = "Use";
                devKNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devKNode);
                if (trans3 != null)
                {
                    trans3 += "\r\n";
                }
                dev.ReferenceVolt = 1;
                trans3 += dev.Name + " " + i + " " + devINode.Number + " " + devJNode.Number + " " + devKNode.Number+" "+"0"+" "+"0" + " " + dev.K + " " + dev.G + " " + dev.BigP + " " + SwitchStatus(dev.HuganLine3) + " " + SwitchStatus(dev.HuganLine4) + " " + SwitchStatus(dev.KSwitchStatus) + " " + (dev.HuganTQ1*100)/(dev.Vib*dev.Vib) + " " + (dev.HuganTQ4*100)/(dev.Vib*dev.Vib) +
                           " " + (dev.HuganTQ2*100)/(dev.Vjb*dev.Vjb) + " " + dev.HuganTQ5*100/(dev.Vjb*dev.Vjb) + " " + (dev.HuganTQ3*100)/(dev.Vkb*dev.Vkb) + " " + (dev.SmallTQ*100)/(dev.Vkb*dev.Vkb) + " " + dev.ZeroTQ * 100 / (dev.ReferenceVolt * dev.ReferenceVolt) + " " + dev.BigTQ * 100 / (dev.ReferenceVolt * dev.ReferenceVolt) + " " + dev.LineLevel + " " + dev.LineType + " " + dev.LineStatus;
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\trans3.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\trans3.txt");
            }
            FileStream tranThrid = new FileStream((System.Windows.Forms.Application.StartupPath + "\\trans3.txt"), FileMode.OpenOrCreate);
            StreamWriter str3 = new StreamWriter(tranThrid,System.Text.Encoding.GetEncoding("GB2312"));
            str3.Write(trans3);
            str3.Close();

            string capacitor_earth = null;
            pspDev.Type = "并联电容电抗器";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "电容器";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
              
                if (capacitor_earth != null)
                {
                    capacitor_earth += "\r\n";
                }
                capacitor_earth += dev.Name + " " + i + " " + devINode.Number + " " + dev.PositiveTQ * 100 / (devINode.ReferenceVolt * devINode.ReferenceVolt) + " " + SwitchStatus(dev.HuganLine3);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\capacitor_earth.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\capacitor_earth.txt");
            }
            FileStream capacitor = new FileStream((System.Windows.Forms.Application.StartupPath + "\\capacitor_earth.txt"), FileMode.OpenOrCreate);
            StreamWriter str4 = new StreamWriter(capacitor, System.Text.Encoding.GetEncoding("GB2312"));
            str4.Write(capacitor_earth);
            str4.Close();

            string inductor_earth = null;
            pspDev.Type = "并联电容电抗器";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "电抗器";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);

                if (inductor_earth != null)
                {
                    inductor_earth += "\r\n";
                }
                inductor_earth += dev.Name + " " + i + " " + devINode.Number + " " + dev.PositiveTQ * 100 / (devINode.ReferenceVolt * devINode.ReferenceVolt) + " " + SwitchStatus(dev.HuganLine3);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\inductor_earth.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\inductor_earth.txt");
            }
            FileStream inductor = new FileStream((System.Windows.Forms.Application.StartupPath + "\\inductor_earth.txt"), FileMode.OpenOrCreate);
            StreamWriter str5 = new StreamWriter(inductor, System.Text.Encoding.GetEncoding("GB2312"));
            str5.Write(inductor_earth);
            str5.Close();

            string capacitor_line = null;
            pspDev.Type = "串联电容电抗器";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "电容器";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV linedev = new PSPDEV();
                linedev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                linedev.Name = dev.HuganLine4;
                linedev.Type = "Polyline";
                linedev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", linedev);
                PSPDEV devJNode = new PSPDEV();
                devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJNode.Number = linedev.FirstNode;
                devJNode.Type = "Use";
                devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", devJNode);
                //PSPDEV linedev = new PSPDEV();
                //linedev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //linedev.Type = "Polyline";
                //linedev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //linedev.Lable = "支路";
                //IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
                //for (int j = 0; j < list1.Count;j++ )
                //{
                //    linedev = list1[j] as PSPDEV;
                //    if (linedev.FirstNode == devINode.Number && linedev.LastNode == devJNode.Number)
                //        break;
                //}
                if (capacitor_line != null)
                {
                    capacitor_line += "\r\n";
                }
                capacitor_line += dev.Name + " " + i + " " + linedev.FirstNode + " " + linedev.LastNode + " " + linedev.Number + " " + 100 * 1000000 / (dev.PositiveTQ * 314 * devJNode.ReferenceVolt * devJNode.ReferenceVolt) + " " + SwitchStatus(dev.HuganLine3);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\capacitor_line.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\capacitor_line.txt");
            }
            FileStream cap = new FileStream((System.Windows.Forms.Application.StartupPath + "\\capacitor_line.txt"), FileMode.OpenOrCreate);
            StreamWriter str6 = new StreamWriter(cap, System.Text.Encoding.GetEncoding("GB2312"));
            str6.Write(capacitor_line);
            str6.Close();

            string inductor_line = null;
            pspDev.Type = "串联电容电抗器";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "电抗器";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV linedev = new PSPDEV();
                linedev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                linedev.Name = dev.HuganLine4;
                linedev.Type = "Polyline";
                linedev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", linedev);
                PSPDEV devJNode = new PSPDEV();
                devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJNode.Number = linedev.FirstNode;
                devJNode.Type = "Use";
                devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", devJNode);
                if (inductor_line != null)
                {
                    inductor_line += "\r\n";
                }
                inductor_line += dev.Name + " " + i + " " + linedev.FirstNode + " " + linedev.LastNode + " " + linedev.Number + " " + dev.PositiveTQ * 100 / (devJNode.ReferenceVolt * devJNode.ReferenceVolt) + " " + SwitchStatus(dev.HuganLine3);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\inductor_line.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\inductor_line.txt");
            }
            FileStream ind = new FileStream((System.Windows.Forms.Application.StartupPath + "\\inductor_line.txt"), FileMode.OpenOrCreate);
            StreamWriter str7 = new StreamWriter(ind, System.Text.Encoding.GetEncoding("GB2312"));
            str7.Write(inductor_line);
            str7.Close();

            string loadline = null;
            pspDev.Type = "loadline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "负荷支路";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
               
                if (loadline != null)
                {
                    loadline += "\r\n";
                }
                loadline += dev.Name + " " + i + " " + devINode.Number + " " + dev.InPutP / 100 + " " + dev.InPutQ / 100 + " " + dev.VoltR + " " + SwitchStatus(dev.HuganLine3);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Load.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\Load.txt");
            }
            FileStream load = new FileStream((System.Windows.Forms.Application.StartupPath + "\\Load.txt"), FileMode.OpenOrCreate);
            StreamWriter str8 = new StreamWriter(load, System.Text.Encoding.GetEncoding("GB2312"));
            str8.Write(loadline);
            str8.Close();

            string genline = null;
            pspDev.Type = "dynamotorline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "发电厂支路";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);

                if (genline != null)
                {
                    genline += "\r\n";
                }
                genline += dev.Name + " " + i + " " + devINode.Number + " " + SwitchStatus(dev.HuganLine3) + " " + dev.PositiveTQ  + " " + dev.ZeroTQ;
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\gen.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\gen.txt");
            }
            FileStream gen = new FileStream((System.Windows.Forms.Application.StartupPath + "\\gen.txt"), FileMode.OpenOrCreate);
            StreamWriter str9 = new StreamWriter(gen, System.Text.Encoding.GetEncoding("GB2312"));
            str9.Write(genline);
            str9.Close();

            string mulian = null;
            pspDev.Type = "1/2母联开关";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "1/2母联开关";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
                PSPDEV devJNode = new PSPDEV();
                devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJNode.Name = dev.HuganLine2;
                devJNode.Type = "Use";
                devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJNode);
                if (mulian != null)
                {
                    mulian += "\r\n";
                }
                mulian += i + " " + devINode.Number + " " + devJNode.Number + " " + SwitchStatus(dev.HuganLine3);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\mulian.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\mulian.txt");
            }
            FileStream mu = new FileStream((System.Windows.Forms.Application.StartupPath + "\\mulian.txt"), FileMode.OpenOrCreate);
            StreamWriter str10 = new StreamWriter(mu, System.Text.Encoding.GetEncoding("GB2312"));
            str10.Write(mulian);
            str10.Close();

            string mulian23 = null;
            pspDev.Type = "2/3母联开关";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "2/3母联开关";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                PSPDEV devINode = new PSPDEV();
                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devINode.Name = dev.HuganLine1;
                devINode.Type = "Use";
                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
                PSPDEV devJNode = new PSPDEV();
                devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJNode.Name = dev.HuganLine2;
                devJNode.Type = "Use";
                devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJNode);
                PSPDEV devILineName = new PSPDEV();
                devILineName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devILineName.Name = dev.HuganLine3;
                devILineName.Type = "Use";
                devILineName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devILineName);
                PSPDEV devJLineName = new PSPDEV();
                devJLineName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJLineName.Name = dev.HuganLine4;
                devJLineName.Type = "Use";
                devJLineName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJLineName);
                PSPDEV devILoadName = new PSPDEV();
                devILoadName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devILoadName.Name = dev.KName;
                devILoadName.Type = "Use";
                devILoadName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devILoadName);
                PSPDEV devJLoadName = new PSPDEV();
                devJLoadName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                devJLoadName.Name = dev.KSwitchStatus;
                devJLoadName.Type = "Use";
                devJLoadName = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJLoadName);
                
                if (mulian23 != null)
                {
                    mulian23 += "\r\n";
                }
                mulian23 += i + " " + devINode.Number + " " + devJNode.Number + " " + devILineName.Number + " " + devJLineName.Number + " "
                                + devILoadName.Number + " " + devJLoadName.Number + " " + SwitchStatus(dev.LineLevel) + " " + SwitchStatus(dev.LineType) + " " + SwitchStatus(dev.LineStatus);
                i++;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\mulian23.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\mulian23.txt");
            }
            FileStream mul = new FileStream((System.Windows.Forms.Application.StartupPath + "\\mulian23.txt"), FileMode.OpenOrCreate);
            StreamWriter str11 = new StreamWriter(mul, System.Text.Encoding.GetEncoding("GB2312"));
            str11.Write(mulian23);
            str11.Close();

            string bus = null;
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            i = 1;
            foreach (PSPDEV dev in list)
            {
                
                if (bus != null)
                {
                    bus += "\r\n";
                }
                bus += dev.Name + " " + dev.Number + " " + dev.VoltR / dev.ReferenceVolt + " " + dev.VoltV + " " + dev.ReferenceVolt;

            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\bus.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\bus.txt");
            }
            FileStream bu = new FileStream((System.Windows.Forms.Application.StartupPath + "\\bus.txt"), FileMode.OpenOrCreate);
            StreamWriter str12 = new StreamWriter(bu);
            str12.Write(bus);
            str12.Close();

            string mutl_ind = null;
            PSPDEV psp = new PSPDEV();
            psp.HuganFirst = 1;
            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandHuganFirst", psp);
            i = 1;
            foreach (PSPDEV dev in list2)
            {
                if (!string.IsNullOrEmpty(dev.HuganLine1))
                {
                    PSPDEV devHugan = new PSPDEV();
                    devHugan.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    devHugan.Name = dev.HuganLine1;
                    devHugan.Type = "Polyline";
                    devHugan = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devHugan);
                    PSPDEV pspreference = new PSPDEV();
                    pspreference.Number = devHugan.FirstNode;
                    pspreference.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspreference.Type = "Use";
                    pspreference = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspreference);
                    if (mutl_ind != null)
                    {
                        mutl_ind += "\r\n";
                    }
                    mutl_ind += i + " " + dev.Number + " " + devHugan.Number + " " + dev.HuganTQ1 * 100 / (pspreference.ReferenceVolt * pspreference.ReferenceVolt);
                }
                if (!string.IsNullOrEmpty(dev.HuganLine2))
                {
                    PSPDEV devHugan = new PSPDEV();
                    devHugan.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    devHugan.Name = dev.HuganLine2;
                    devHugan.Type = "Polyline";
                    devHugan = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devHugan);
                    PSPDEV pspreference = new PSPDEV();
                    pspreference.Number = devHugan.FirstNode;
                    pspreference.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspreference.Type = "Use";
                    pspreference = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspreference);
                    if (mutl_ind != null)
                    {
                        mutl_ind += "\r\n";
                    }
                    mutl_ind += i + " " + dev.Number + " " + devHugan.Number + " " + dev.HuganTQ2 * 100 / (pspreference.ReferenceVolt * pspreference.ReferenceVolt);
                }

                if (!string.IsNullOrEmpty(dev.HuganLine3))
                {
                    PSPDEV devHugan = new PSPDEV();
                    devHugan.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    devHugan.Name = dev.HuganLine3;
                    devHugan.Type = "Polyline";
                    devHugan = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devHugan);
                    PSPDEV pspreference = new PSPDEV();
                    pspreference.Number = devHugan.FirstNode;
                    pspreference.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspreference.Type = "Use";
                    pspreference = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspreference);
                    if (mutl_ind != null)
                    {
                        mutl_ind += "\r\n";
                    }
                    mutl_ind += i + " " + dev.Number + " " + devHugan.Number + " " + dev.HuganTQ3 * 100 / (pspreference.ReferenceVolt * pspreference.ReferenceVolt);
                }
                if (!string.IsNullOrEmpty(dev.HuganLine4))
                {
                   PSPDEV devHugan = new PSPDEV();
                    devHugan.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    devHugan.Name = dev.HuganLine4;
                    devHugan.Type = "Polyline";
                    devHugan = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devHugan);
                    PSPDEV pspreference = new PSPDEV();
                    pspreference.Number = devHugan.FirstNode;
                    pspreference.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspreference.Type = "Use";
                    pspreference = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspreference);
                    if (mutl_ind != null)
                    {
                        mutl_ind += "\r\n";
                    }
                    mutl_ind += i + " " + dev.Number + " " + devHugan.Number + " " + dev.HuganTQ4 * 100 / (pspreference.ReferenceVolt * pspreference.ReferenceVolt);
                }                
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\mutl_ind.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\mutl_ind.txt");
            }
            FileStream Hu = new FileStream((System.Windows.Forms.Application.StartupPath + "\\mutl_ind.txt"), FileMode.OpenOrCreate);
            StreamWriter str13 = new StreamWriter(Hu, System.Text.Encoding.GetEncoding("GB2312"));
            str13.Write(mutl_ind);
            str13.Close();
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt");
            }
            return true;
        }
        public int SwitchStatus(string str)
        {
            if (str=="开")
            {
                return 0;
            } 
            else if(str=="合")
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        private bool CheckN()                            //生成N-1检验的数据
        {
            string outParam1 = null;
            string outParam2 = null;
            double yinzi = 0;
            double volt = 0;
            double sandvolt = 0;
            double current = 0;
            // PSPDEV pow = new PSPDEV();
            //pow.Type = "Power";
            // pow.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            // pow = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pow);

            //     yinzi = pow.PowerFactor;
            //     volt = pow.StandardVolt;
            //     current = pow.StandardCurrent;

            Topology();
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "power";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            if (list3 == null)
            {
                MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            foreach (PSPDEV dev in list3)
            {
                yinzi = Convert.ToDouble(dev.PowerFactor);
                current = Convert.ToDouble(dev.StandardCurrent);
                volt = Convert.ToDouble(dev.StandardVolt);
                TLPSPVmin = dev.iV;
                TLPSPVmax = dev.jV;
                if (dev.PowerFactor == 0)
                {
                    yinzi = 1;
                }
                if (dev.StandardCurrent == 0)
                {
                    current = 1;
                }
                if (dev.StandardVolt == 0)
                {
                    volt = 1;
                }
                sandvolt = volt;
            }
            current = 100;
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "TransformLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "GNDLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list5 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            int num_Gen = 0;
            int num_Load = 0;
            foreach (PSPDEV dev in list1)
            {
                if (dev.Lable == "电厂")
                {
                    num_Gen++;
                }
                else if (dev.Lable == "变电站")
                {
                    num_Load++;
                }
            }
            //outParam1 += (list2.Count+list4.Count).ToString() + " " + num_Gen.ToString() + " " + num_Load.ToString() + " " + "0.00001" + " " + "100" + " " + "1" + " " + "0" + "\r\n";
            List<string> busname = new List<string>();
            foreach (PSPDEV dev in list1)
            {
                bool flag = false;
                foreach (PSPDEV devline in list2)
                {
                    if (dev.Number == devline.LastNode || dev.Number == devline.FirstNode)
                    {
                        flag = true;
                        break;
                    }
                }
                foreach (PSPDEV devtrans in list4)
                {
                    if (dev.Number == devtrans.LastNode || dev.Number == devtrans.FirstNode)
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    busname.Add(dev.Name);
                }
            }
            if (busname.Count > 0)
            {
                string temp = "拓扑分析失败";
                for (int i = 0; i < busname.Count; i++)
                {
                    temp += "，" + busname[i];

                }
                temp += "为孤立的节点！";
                MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            foreach (PSPDEV dev in list2)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = sandvolt;
                if (outParam1 != null && dev.LineStatus == "运行")
                {
                    outParam1 += "\r\n";
                }
                if (dev.LineStatus == "运行")
                    outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "1" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + "0" + " " + dev.G.ToString());
            }
            foreach (PSPDEV dev in list4)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = sandvolt;
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "2" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + dev.K.ToString() + " " + dev.G.ToString());
            }
            foreach (PSPDEV dev in list5)
            {
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = sandvolt;
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "2" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + dev.K.ToString() + " " + dev.G.ToString());
            }
            foreach (PSPDEV dev in list1)
            {
                if (dev.Number < 0)
                {

                    MessageBox.Show("拓朴分析失败，请进行处理!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                //if (dev.InPutQ == 0)
                //    dev.InPutQ = dev.InPutP * Math.Tan(Math.Acos(yinzi));
                //if (dev.OutQ == 0)
                //    dev.OutQ = dev.OutP * Math.Tan(Math.Acos(yinzi));
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = sandvolt;
                if (dev.NodeType == "0")
                {
                    dev.OutP = 0;
                    dev.OutQ = 0;
                    dev.InPutP = 0;
                    dev.InPutQ = 0;
                }
                if (dev.Lable == "电厂")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "2";
                    }
                }
                else if (dev.Lable == "变电站")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "1";
                    }
                }
                if (dev.NodeType == "0")
                {
                    dev.NodeType = "3";
                }
                if (outParam2 != null)
                {
                    outParam2 += "\r\n";
                }
                outParam2 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + (dev.VoltR / volt).ToString() + " " + dev.VoltV.ToString() + " " + ((dev.InPutP - dev.OutP) / current).ToString() + " " + ((dev.InPutQ - dev.OutQ) / current).ToString());
            }

            //outParam1 += (volt + " " + current + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + ";" + "\r\n");
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\branch.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\branch.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\bus.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\bus.txt");
            }
            //if (File.Exists("c:\\L9.txt"))
            //{
            //    File.Delete("c:\\L9.txt");
            //}
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\branch.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK);
            str1.Write(outParam1);
            str1.Close();
            FileStream L = new FileStream((System.Windows.Forms.Application.StartupPath + "\\bus.txt"), FileMode.OpenOrCreate);
            StreamWriter str2 = new StreamWriter(L);
            str2.Write(outParam2);
            str2.Close();
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\VandTheta.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\VandTheta.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\lineP.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\lineP.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\transP.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\transP.txt");
            }
         
            return true;
        }
        private bool Check()
        {
            string outParam1 = null;
            string outParam2 = null;
            double yinzi = 0;
            double volt = 0;
            double current = 0;
            double standvolt=0;
            // PSPDEV pow = new PSPDEV();
            //pow.Type = "Power";
            // pow.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            // pow = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pow);

            //     yinzi = pow.PowerFactor;
            //     volt = pow.StandardVolt;
            //     current = pow.StandardCurrent;

            Topology();
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "power";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            if (list3 == null)
            {
                MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }

            foreach (PSPDEV dev in list3)
            {
                yinzi = Convert.ToDouble(dev.PowerFactor);
                current = Convert.ToDouble(dev.StandardCurrent);
                volt = Convert.ToDouble(dev.StandardVolt);
                standvolt=volt;
                TLPSPVmin = dev.iV;
                TLPSPVmax = dev.jV;
                if (dev.PowerFactor == 0)
                {
                    yinzi = 1;
                }
                if (dev.StandardCurrent == 0)
                {
                    current = 1;
                }
                if (dev.StandardVolt == 0)
                {
                    volt = 1;
                    standvolt=1;
                }
            }
            current = 100;      //额定电容都设为100
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "TransformLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "GNDLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list5 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);

            int num_Gen=0;
            int num_Load=0;
            foreach (PSPDEV dev in list1)
            {
                if (dev.Lable=="电厂")
                {
                    num_Gen++;
                }
                else if (dev.Lable=="变电站")
                {
                    num_Load++;
                }
            }
            //outParam1 += (list2.Count+list4.Count).ToString() + " " + num_Gen.ToString() + " " + num_Load.ToString() + " " + "0.00001" + " " + "100" + " " + "1" + " " + "0" + "\r\n";
           //如果母线节点独立出现这样的提醒
            List<string> busname = new List<string>();
            foreach (PSPDEV dev in list1)
           {
               bool flag = false;
               foreach (PSPDEV devline in list2)
               {
                   if (dev.Number==devline.LastNode||dev.Number==devline.FirstNode)
                   {
                       flag = true;
                       break;
                   }
               }
               foreach (PSPDEV devtrans in list4)
               {
                   if (dev.Number == devtrans.LastNode || dev.Number == devtrans.FirstNode)
                   {
                       flag = true;
                       break;
                   }
               }
               if (!flag)
               {
                   busname.Add(dev.Name);
               }
           }
            if (busname.Count>0)
            {
                string temp = "拓扑分析失败";
                for (int i = 0; i < busname.Count; i++)
                {
                    temp += "，"+busname[i];

                }
                temp += "为孤立的节点！";
                MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
           
            foreach (PSPDEV dev in list2)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp="拓朴分析失败,";
                    temp+=dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (dev!= null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                if (outParam1 != null && dev.LineStatus == "运行")
                {
                    outParam1 += "\r\n";
                }
                if ( dev.LineStatus=="运行")
                    outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "1" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC*volt*volt/(current*1000000)).ToString() + " " + "0"+" "+dev.G.ToString());
            }
            foreach (PSPDEV dev in list4)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "2" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + dev.K.ToString() + " " + dev.G.ToString());
            }
            foreach (PSPDEV dev in list5)
            {
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "3" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + dev.K.ToString() + " " + dev.G.ToString());
            }
            foreach (PSPDEV dev in list1)
            {
                if (dev.Number < 0)
                {

                    MessageBox.Show("拓朴分析失败，请进行处理!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                //if (dev.InPutQ == 0)
                //    dev.InPutQ = dev.InPutP * Math.Tan(Math.Acos(yinzi));
                //if (dev.OutQ == 0)
                //    dev.OutQ = dev.OutP * Math.Tan(Math.Acos(yinzi));
                if (dev.NodeType == "0")
                {
                    //dev.OutP = 0;
                    //dev.OutQ = 0;
                    //dev.InPutP = 0;
                    //dev.InPutQ = 0;
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                if (dev.Lable=="电厂")
                {
                    if (dev.NodeType!="0")
                    {
                        dev.NodeType = "2";
                    }
                } 
                else if (dev.Lable=="变电站")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "1";
                    }
                }
                if (dev.NodeType == "0")
                {
                    dev.NodeType = "3";
                }
                if (outParam2 != null)
                {
                    outParam2 += "\r\n";
                }
                outParam2 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + (dev.VoltR / volt).ToString() + " " + dev.VoltV.ToString() + " " + ((dev.InPutP - dev.OutP)/current).ToString() + " " + ((dev.InPutQ - dev.OutQ)/current).ToString());
            }

            //outParam1 += (volt + " " + current + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + ";" + "\r\n");
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\branch.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath+"\\branch.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\bus.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\bus.txt");
            }
            //if (File.Exists("c:\\L9.txt"))
            //{
            //    File.Delete("c:\\L9.txt");
            //}
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath+"\\branch.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK);
            str1.Write(outParam1);
            str1.Close();
            FileStream L = new FileStream((System.Windows.Forms.Application.StartupPath + "\\bus.txt"), FileMode.OpenOrCreate);
            StreamWriter str2 = new StreamWriter(L);
            str2.Write(outParam2);
            str2.Close();
            return true;
        }
        private bool CheckIdleOptimize()
        {
            string outParam1 = null;
            string outParam2 = null;
            double yinzi = 0;
            double volt = 0;
            double current = 0;
            double standvolt = 0;
            // PSPDEV pow = new PSPDEV();
            //pow.Type = "Power";
            // pow.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            // pow = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pow);

            //     yinzi = pow.PowerFactor;
            //     volt = pow.StandardVolt;
            //     current = pow.StandardCurrent;

            Topology();
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "power";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            if (list3 == null)
            {
                MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }

            foreach (PSPDEV dev in list3)
            {
                yinzi = Convert.ToDouble(dev.PowerFactor);
                current = Convert.ToDouble(dev.StandardCurrent);
                volt = Convert.ToDouble(dev.StandardVolt);
                standvolt = volt;
                TLPSPVmin = dev.iV;
                TLPSPVmax = dev.jV;
                if (dev.PowerFactor == 0)
                {
                    yinzi = 1;
                }
                if (dev.StandardCurrent == 0)
                {
                    current = 1;
                }
                if (dev.StandardVolt == 0)
                {
                    volt = 1;
                    standvolt = 1;
                }
            }
            current = 100;      //额定电容都设为100
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "TransformLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "GNDLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list5 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);

            int num_Gen = 0;
            int num_Load = 0;
            foreach (PSPDEV dev in list1)
            {
                if (dev.Lable == "电厂")
                {
                    num_Gen++;
                }
                else if (dev.Lable == "变电站")
                {
                    num_Load++;
                }
            }
            //outParam1 += (list2.Count+list4.Count).ToString() + " " + num_Gen.ToString() + " " + num_Load.ToString() + " " + "0.00001" + " " + "100" + " " + "1" + " " + "0" + "\r\n";
            //如果母线节点独立出现这样的提醒
            List<string> busname = new List<string>();
            foreach (PSPDEV dev in list1)
            {
                bool flag = false;
                foreach (PSPDEV devline in list2)
                {
                    if (dev.Number == devline.LastNode || dev.Number == devline.FirstNode)
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    busname.Add(dev.Name);
                }
            }
            if (busname.Count > 0)
            {
                string temp = "拓扑分析失败";
                for (int i = 0; i < busname.Count; i++)
                {
                    temp += "，" + busname[i];

                }
                temp += "为孤立的节点！";
                MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }

            foreach (PSPDEV dev in list2)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                if (outParam1 != null && dev.LineStatus == "运行")
                {
                    outParam1 += "\r\n";
                }
                if (dev.LineStatus == "运行")
                    outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "1" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + "0" + " " + dev.G.ToString() + " " + dev.iV.ToString() + " " + dev.jV.ToString());
            }
            foreach (PSPDEV dev in list4)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "2" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC  * volt * volt / (current * 1000000)).ToString() + " " + dev.K.ToString() + " " + dev.G.ToString() + " " + dev.iV.ToString() + " " + dev.jV.ToString());
            }
            foreach (PSPDEV dev in list5)
            {
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.Name.ToString() + " " + "3" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + (dev.LineGNDC * volt * volt / (current * 1000000)).ToString() + " " + dev.K.ToString() + " " + dev.G.ToString() + " " + dev.iV.ToString() + " " + dev.jV.ToString());
            }
            foreach (PSPDEV dev in list1)
            {
                if (dev.Number < 0)
                {

                    MessageBox.Show("拓朴分析失败，请进行处理!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                //if (dev.InPutQ == 0)
                //    dev.InPutQ = dev.InPutP * Math.Tan(Math.Acos(yinzi));
                //if (dev.OutQ == 0)
                //    dev.OutQ = dev.OutP * Math.Tan(Math.Acos(yinzi));
                if (dev.NodeType == "0")
                {
                    //dev.OutP = 0;
                    //dev.OutQ = 0;
                    //dev.InPutP = 0;
                    //dev.InPutQ = 0;
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                if (dev.Lable == "电厂")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "2";
                    }
                }
                else if (dev.Lable == "变电站")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "1";
                    }
                }
                if (dev.NodeType == "0")
                {
                    dev.NodeType = "3";
                }
                if (outParam2 != null)
                {
                    outParam2 += "\r\n";
                }
                if (dev.LineLevel==null)
                {
                    dev.LineLevel = "0";
                }
                if (dev.LineType == null)
                {
                    dev.LineType = "0";
                }
                outParam2 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + (dev.VoltR / volt).ToString() + " " + dev.VoltV.ToString() + " " + ((dev.OutP) / current).ToString() + " " + ((dev.OutQ) / current).ToString() + " " + ((dev.InPutP) / current).ToString() + " " + ((dev.InPutQ) / current).ToString() + " " + dev.LineLevel.ToString() + " " + dev.LineType.ToString() + " " + ((dev.Vjmin) / current).ToString() + " " + ((dev.Vjmax) / current).ToString() + " " + ((dev.iV) / volt).ToString() + " " + ((dev.jV) / volt).ToString() + " " + ((dev.Vimin) / current).ToString() + " " + ((dev.Vimax) / current).ToString() + " " + ((dev.Vk0) / current).ToString());
            }

            //outParam1 += (volt + " " + current + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + ";" + "\r\n");
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\branch.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\branch.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\bus.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\bus.txt");
            }
            //if (File.Exists("c:\\L9.txt"))
            //{
            //    File.Delete("c:\\L9.txt");
            //}
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\branch.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK);
            str1.Write(outParam1);
            str1.Close();
            FileStream L = new FileStream((System.Windows.Forms.Application.StartupPath + "\\bus.txt"), FileMode.OpenOrCreate);
            StreamWriter str2 = new StreamWriter(L);
            str2.Write(outParam2);
            str2.Close();
            return true;
        }
        private bool ShortCutCheck(string bigsmall)
        {
            string outParam1 = null;
            string outParam2 = null;
            double yinzi = 0;
            double volt = 0;
            double current = 0;
            double standvolt = 0;
            string bigs = bigsmall;
            // PSPDEV pow = new PSPDEV();
            //pow.Type = "Power";
            // pow.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            // pow = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pow);

            //     yinzi = pow.PowerFactor;
            //     volt = pow.StandardVolt;
            //     current = pow.StandardCurrent;

            Topology();
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "power";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            if (list3 == null)
            {
                MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            foreach (PSPDEV dev in list3)
            {
                yinzi = Convert.ToDouble(dev.PowerFactor);
                current = Convert.ToDouble(dev.StandardCurrent);
                volt = Convert.ToDouble(dev.StandardVolt);
                standvolt = volt;
                TLPSPVmin = dev.iV;
                TLPSPVmax = dev.jV;
                if (dev.PowerFactor == 0)
                {
                    yinzi = 1;
                }
                if ( dev.StandardCurrent == 0)
                {
                    current = 1;
                }
                if (dev.StandardVolt == 0)
                {
                    volt = 1;
                    standvolt = 1;
                }
            };
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            //pspDev.Lable = "支路";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "接地支路";
            IList list6 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "发电厂支路";
            IList list7 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            ArrayList list8 = new ArrayList();
            
            foreach (PSPDEV dev in list2)   
            {
                if ((dev.HuganLine1 == "" || dev.HuganLine1 == null) && (dev.HuganLine4 == "" || dev.HuganLine4 == null)
                       && (dev.HuganLine2 == "" || dev.HuganLine2 == null) && (dev.HuganLine3 == "" || dev.HuganLine3 == null))
                {
                    list8.Add(dev);
                }     
                
            }



            outParam1 += (list1.Count + " " + (list2.Count-list6.Count) + " " + "-1" + " " + "-1" + " " + "-1" + ";" + "\r\n");
            outParam2 += (list1.Count + " " + (list8.Count-list7.Count) + " " + "-1" + " " + "-1" + " " + "-1" + ";" + "\r\n");
            //foreach (PSPDEV dev in list1)
            //{
            //    if (dev.Number < 0)
            //    {

            //        MessageBox.Show("拓朴分析失败，请进行处理!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //        return false;
            //    }
            //    dev.InPutQ = dev.InPutP * Math.Tan(Math.Acos(yinzi));
            //    dev.OutQ = dev.OutP * Math.Tan(Math.Acos(yinzi));
            //    outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.OutP.ToString() + " " + dev.OutQ.ToString() + " " + dev.InPutP.ToString() + " " + dev.InPutQ.ToString() + " " + dev.VoltR.ToString() + " " + dev.Burthen + ";" + "\r\n");
            //}
            foreach (PSPDEV dev in list2)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (true)
                {
                    if (dev.Lable != "接地支路")
                    {
                        if (dev.Lable == "发电厂支路")
                        {
                            //PSPDEV pspDuanlu = new PSPDEV();
                            //pspDuanlu.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        
                            //frmDuanlu dudu = new frmDuanlu(pspDuanlu);
                            if (bigs == "大方式电抗")
                                dev.PositiveTQ = dev.BigTQ;
                            else
                                dev.PositiveTQ = dev.SmallTQ;
                        }
                            outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.PositiveR.ToString() + " " + dev.PositiveTQ.ToString() + " " + dev.Number.ToString() + ";" + "\r\n");
                    }
                    if (dev.Lable != "发电厂支路" && (dev.HuganLine1==""||dev.HuganLine1==null)
                        && (dev.HuganLine2 == "" || dev.HuganLine2 == null) && (dev.HuganLine3 == "" || dev.HuganLine3 == null)
                        && (dev.HuganLine4 == "" || dev.HuganLine4 == null))
                    {
                        if (dev.Lable == "接地支路")
                        {
                            PSPDEV pspDuanlu = new PSPDEV();
                            pspDuanlu.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        
                            frmDuanlu dudu = new frmDuanlu(pspDuanlu);
                            if (bigs == "大方式电抗")
                                dev.ZeroTQ = dev.BigTQ;
                            else
                                dev.ZeroTQ = dev.SmallTQ;
                        }
                        outParam2 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.ZeroR.ToString() + " " + dev.ZeroTQ.ToString() + " " + dev.Number.ToString() + ";" + "\r\n");
                    }
                 }
                    
            }

            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\datazx.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\datazx.txt");
            }
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\datalx.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\datalx.txt");
            }
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\datazx.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK);
            str1.Write(outParam1);
            str1.Close();
            str1.Dispose();

            FileStream L = new FileStream((System.Windows.Forms.Application.StartupPath + "\\datalx.txt"), FileMode.OpenOrCreate);
            StreamWriter str2 = new StreamWriter(L);
            str2.Write(outParam2);
            str2.Close();
            str2.Dispose();


            outParam1 = null;
            outParam2 = null;
            PSPDEV psp = new PSPDEV();
            psp.HuganFirst = 1;
            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

            IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandHuganFirst", psp);
            outParam1 += (list4.Count +" " + "-1" + " " + "-1" + " " + "-1" +" "+ "-1" + " " + "-1" + " " + "-1" + " " + "-1" + ";" + "\r\n"); 
            foreach(PSPDEV dev in list4)
            {
                ArrayList list5 = new ArrayList();                
                PSPDEV pspName = new PSPDEV();
                pspName.Name = dev.HuganLine1;
                pspName.Type = "Polyline";
                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                PSPDEV hg1 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                if (hg1 != null)
                {
                    list5.Add(hg1);
                }

                pspName.Name = dev.HuganLine2;
                pspName.Type = "Polyline";
                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                PSPDEV hg2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                if (hg2 != null)
                {
                    list5.Add(hg2);
                }

                pspName.Name = dev.HuganLine3;
                pspName.Type = "Polyline";
                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                PSPDEV hg3 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                if (hg3 != null)
                {
                    list5.Add(hg3);
                }

                pspName.Name = dev.HuganLine4;
                pspName.Type = "Polyline";
                pspName.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                PSPDEV hg4 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspName);
                if(hg4!=null)
                {
                    list5.Add(hg4);
                }
                outParam1 += ((list5.Count+1) + " " + "-1" + " " + "-1" + " " + "-1" + " " + "-1" + " " + "-1" + " " + "-1" + " " + "-1" + ";" + "\r\n");
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString() + " " + dev.HuganTQ1.ToString() + " " + dev.HuganTQ2.ToString() + " " + dev.HuganTQ3.ToString() + " " + dev.HuganTQ4.ToString() + " " + dev.HuganTQ5.ToString() + " " +dev.Number.ToString() + ";" + "\r\n");
                foreach(PSPDEV devic in list5)
                {
                    outParam1 += (devic.FirstNode.ToString() + " " + devic.LastNode.ToString() + " " + devic.HuganTQ1.ToString() + " " + devic.HuganTQ2.ToString() + " " + devic.HuganTQ3.ToString() + " " + devic.HuganTQ4.ToString() + " " + devic.HuganTQ5.ToString() + " " + devic.Number.ToString() + ";" + "\r\n");
                }
            }

            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\datahg.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\datahg.txt");
            }
            FileStream hg = new FileStream((System.Windows.Forms.Application.StartupPath + "\\datahg.txt"), FileMode.OpenOrCreate);
            StreamWriter str3 = new StreamWriter(hg);
            str3.Write(outParam1);
            str3.Close();
            str3.Dispose();

            return true;
        }
        private bool CheckPQ()
        {
            string outParam1 = null;
            string outParam2 = null;
            double yinzi = 0;
            double volt = 0;
            double current = 0;
            double standvolt = 0;
            // PSPDEV pow = new PSPDEV();
            //pow.Type = "Power";
            // pow.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            // pow = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDAndType", pow);

            //     yinzi = pow.PowerFactor;
            //     volt = pow.StandardVolt;
            //     current = pow.StandardCurrent;

            Topology();
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "power";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            if (list3 == null)
            {
                MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            foreach (PSPDEV dev in list3)
            {
                yinzi = Convert.ToDouble(dev.PowerFactor);
                current = Convert.ToDouble(dev.StandardCurrent);
                volt = Convert.ToDouble(dev.StandardVolt);
                standvolt = volt;
                TLPSPVmin = dev.iV;
                TLPSPVmax = dev.jV;
                if ( dev.PowerFactor == 0)
                {
                    yinzi = 1;
                }
                if ( dev.StandardCurrent == 0)
                {
                    current = 1;
                }
                if ( dev.StandardVolt == 0)
                {
                    volt = 1;
                    standvolt = 1;
                }
            };
            current = 100;
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "TransformLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);

            int num_Gen = 0;
            int num_Load = 0;
            int num_Line = 0;

            foreach (PSPDEV dev in list1)
            {
                if (dev.Lable.Contains("电厂"))
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "2";
                    }
                }
                else if (dev.Lable.Contains("变电站"))
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "1";
                    }
                }
                if (dev.OutP!=0||dev.OutQ!=0||dev.NodeType=="0")
                {
                    num_Gen++;
                }
                if (dev.InPutP!=0||dev.InPutQ!=0)
                {
                    num_Load++;
                }
                if (dev.OutP == 0 && dev.OutQ == 0&&dev.InPutP==0&&dev.InPutQ==0)               
                {
                    if (dev.NodeType=="2")
                    {
                        num_Gen++;
                    }
                    else if (dev.NodeType == "1")                   
                    {
                        num_Load++;
                    }
                }
            }
            foreach (PSPDEV dev in list2)
            {
                if (dev.LineStatus == "运行")
                {
                    num_Line++;
                }
            }
            outParam1 += (num_Line + list4.Count).ToString() + " " + list1.Count.ToString() + " " + list1.Count.ToString() + " " + "0.00001" + " " + "100" + " " + "0" + " " + "0";

            foreach (PSPDEV dev in list2)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                if (outParam1 != null && dev.LineStatus == "运行")
                {
                    outParam1 += "\r\n";
                }
                if (dev.LineStatus == "运行")
                    outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString()  + " " + "0" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString() + " " + ((dev.LineGNDC)/2 * volt * volt / (current * 1000000)).ToString() +" " + "0" +" " + dev.Name.ToString());
            }
            foreach (PSPDEV dev in list4)
            {
                if (dev.FirstNode < 0 || dev.LastNode < 0)
                {
                    string temp = "拓朴分析失败,";
                    temp += dev.Name;
                    temp += "没有正确连接,请进行处理！。";
                    MessageBox.Show(temp, "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (outParam1 != null)
                {
                    outParam1 += "\r\n";
                }
                if (dev.G==null)
                {
                    dev.G = 0;
                }
                outParam1 += (dev.FirstNode.ToString() + " " + dev.LastNode.ToString()  + " " + "1" + " " + (dev.LineR * current / (volt * volt)).ToString() + " " + (dev.LineTQ * current / (volt * volt)).ToString()  + " " + dev.K.ToString()+" "+dev.G.ToString()+" "+dev.Name.ToString());
            }
            foreach (PSPDEV dev in list1)
            {
                if (dev.Number < 0)
                {

                    MessageBox.Show("拓朴分析失败，请进行处理!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (dev.ReferenceVolt!=null&&dev.ReferenceVolt!=0)
                {
                    volt = dev.ReferenceVolt;
                }
                
                //if (dev.InPutQ == 0)
                //    dev.InPutQ = dev.InPutP * Math.Tan(Math.Acos(yinzi));
                //if (dev.OutQ == 0)
                //    dev.OutQ = dev.OutP * Math.Tan(Math.Acos(yinzi));
                if (dev.NodeType == "0")
                {
                    //dev.OutP = 0;
                    //dev.OutQ = 0;
                    //dev.InPutP = 0;
                    //dev.InPutQ = 0;
                }
                if (dev.Lable == "电厂")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "2";
                    }
                }
                else if (dev.Lable == "变电站")
                {
                    if (dev.NodeType != "0")
                    {
                        dev.NodeType = "1";
                    }
                }
                if (true)
                {
                    if (outParam1 != null)
                    {
                        outParam1 += "\r\n";
                    }
                    if (dev.NodeType=="1")
                    {
                        outParam1 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + ((dev.OutP) / current).ToString() + " " + ((dev.OutQ) / current).ToString());
                    }
                    else if (dev.NodeType == "2")
                    {
                        outParam1 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + ((dev.OutP) / current).ToString() + " " + (dev.VoltR / volt).ToString());
                    }
                    else if (dev.NodeType == "0")
                    {
                        outParam1 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + (dev.VoltR / volt).ToString() + " " + "0");
                    }
                }
                //else if (dev.OutP == 0 && dev.OutQ == 0 && dev.NodeType == "2" && dev.InPutP == 0 && dev.InPutQ == 0)
                //{
                //    if (outParam1 != null)
                //    {
                //        outParam1 += "\r\n";
                //    }
                //    outParam1 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + dev.NodeType + " " + ((dev.OutP) / current).ToString() + " " + (dev.VoltR / volt).ToString());
                //}
            }
            foreach (PSPDEV dev in list1)
            {
                if (dev.Number < 0)
                {

                    MessageBox.Show("拓朴分析失败，请进行处理!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                if (dev != null && dev.ReferenceVolt != 0)
                {
                    volt = dev.ReferenceVolt;
                }
                else
                    volt = standvolt;
                //if (dev.InPutQ == 0)
                //    dev.InPutQ = dev.InPutP * Math.Tan(Math.Acos(yinzi));
                //if (dev.OutQ == 0)
                //    dev.OutQ = dev.OutP * Math.Tan(Math.Acos(yinzi));
                if (dev.NodeType == "0")
                {
                    //dev.OutP = 0;
                    //dev.OutQ = 0;
                    //dev.InPutP = 0;
                    //dev.InPutQ = 0;
                }            
                if (true)
                {
                    if (outParam1 != null)
                    {
                        outParam1 += "\r\n";
                    }
                    outParam1 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + "0" + " " + "0" + " " + "0" + " " + "0" + " " + "0"+" "+((dev.InPutP ) / current).ToString() + " " + ((dev.InPutQ ) / current).ToString());
                }
                //else if (dev.OutP == 0 && dev.OutQ == 0&&dev.NodeType == "1" && dev.InPutP == 0 && dev.InPutQ == 0)
                //{
                //    if (outParam1 != null)
                //    {
                //        outParam1 += "\r\n";
                //    }
                //    outParam1 += (dev.Number.ToString() + " " + dev.Name.ToString() + " " + "0" + " " + "0" + " " + "0" + " " + "0" + " " + "0" + " " + ((dev.InPutP) / current).ToString() + " " + ((dev.InPutQ) / current).ToString());
                //}
            }
            //outParam1 += (volt + " " + current + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + " " + "-2" + ";" + "\r\n");
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\data.txt");
            }
            //if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\bus.txt"))
            //{
            //    File.Delete(System.Windows.Forms.Application.StartupPath + "\\bus.txt");
            //}
            //if (File.Exists("c:\\L9.txt"))
            //{
            //    File.Delete("c:\\L9.txt");
            //}
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\data.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK);
            str1.Write(outParam1);
            str1.Close();
            //FileStream L = new FileStream((System.Windows.Forms.Application.StartupPath + "\\bus.txt"), FileMode.OpenOrCreate);
            //StreamWriter str2 = new StreamWriter(L);
            //str2.Write(outParam2);
            //str2.Close();
            return true;
        }

        public int brchcount, buscount, transcount;        //记录全网参与潮流计算的支路数和母线数目
        private void TopologyDL()
        {
            brchcount = 0; buscount = 0;
            //XPathNavigator nav = tlVectorControl1.SVGDocument.CreateNavigator();
            //XPathExpression exp = nav.Compile("svg/use");
            //exp.AddSort("x", XmlSortOrder.Ascending, XmlCaseOrder.None, "", XmlDataType.Number);
            XmlNodeList nodeList1 = tlVectorControl1.SVGDocument.GetElementsByTagName("use");
            //XPathNodeIterator nodeList1 = nav.Select(exp);            
            PSPDEV pspDev = new PSPDEV();
            foreach (XmlNode node in nodeList1)
            {
                XmlElement element = node as XmlElement;
                RectangleF t = ((IGraph)element).GetBounds();
                XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + element.GetAttribute("id") + "']");
                //if (temp == null)
                //    return;
                if (element.GetAttribute("xlink:href").Contains("Power") || element.GetAttribute("xlink:href").Contains("motherlinenode"))
                {
                    pspDev.EleID = element.GetAttribute("id");
                    if (temp != null)
                        pspDev.Name = temp.InnerText;
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.X1 = t.X;
                    pspDev.Y1 = t.Y;
                    pspDev.X2 = t.X + t.Width;
                    pspDev.Y2 = t.Y + t.Height;
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = -1;
                    pspDev.Number = -1;
                    Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                }
                else if (element.GetAttribute("xlink:href").Contains("Substation"))
                {
                    pspDev.EleID = element.GetAttribute("id");
                    if (temp != null)
                        pspDev.Name = temp.InnerText;
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.X1 = t.X + t.Width / 2;
                    pspDev.Y1 = t.Y + t.Height / 2;
                    pspDev.X2 = 0;
                    pspDev.Y2 = 0;
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = -1;
                    pspDev.Number = -1;
                    Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                }
                else if (element.GetAttribute("xlink:href").Contains("dynamotorline") || element.GetAttribute("xlink:href").Contains("gndline"))
                {
                    Transf transfElement = (element as Use).Transform;
                    RectangleF tt = (element as Use).GetRectangle();
                    float x = tt.X;
                    float y = tt.Y + tt.Height / 2;
                    PointF[] startPoint = new PointF[] { new PointF(x, y) };
                    transfElement.Matrix.TransformPoints(startPoint);
                    pspDev.EleID = element.GetAttribute("id");
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                    pspDev.X1 = startPoint[0].X;
                    pspDev.Y1 = startPoint[0].Y;
                    pspDev.X2 = t.X + t.Width;
                    pspDev.Y2 = t.Y + t.Height;
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = 0;
                    pspDev.Number = -1;
                    Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                }
            }
            XmlNodeList nodeList2 = tlVectorControl1.SVGDocument.GetElementsByTagName("polyline");
            foreach (XmlNode node in nodeList2)
            {
                XmlElement element = node as XmlElement;
                if ((element.GetAttribute("flag") == "1") || (!element.HasAttributes) || element.GetAttribute("id") == "")
                {
                    break;
                }
                PointF[] t = ((Polyline)element).Pt;
                //XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + element.GetAttribute("id") + "']");
                pspDev.EleID = element.GetAttribute("id");
                //pspDev.Name = temp.InnerText;
                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                pspDev.X1 = t[0].X;
                pspDev.Y1 = t[0].Y;
                pspDev.X2 = t[1].X;
                pspDev.Y2 = t[1].Y;
                pspDev.FirstNode = -1;
                pspDev.LastNode = -1;
                pspDev.Number = -1;
                //PSPDEV psp = new PSPDEV();
                //psp.EleID = element.GetAttribute("id");
                //psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //psp = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", psp);
                //if (psp == null)
                //{
                //    pspDev.Number = -1;
                //    pspDev.Name = null;
                //    pspDev.Type = "Polyline";
                //    pspDev.FirstNode = -1;
                //    pspDev.LastNode = -1;
                //    pspDev.SUID = Guid.NewGuid().ToString();
                //    Services.BaseService.Create<PSPDEV>(pspDev);

                //}
                //else
                //{
                Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                //}

            }
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "母线节点";
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            
            for (int i = 1; i <= list1.Count; i++)
            {
                pspDev = (PSPDEV)list1[i - 1];
                pspDev.Number = i;
                Services.BaseService.Update<PSPDEV>(pspDev);
                buscount += 1;                            //记录母线数
            }
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "支路";
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            int j = 0;
            for (int i = 1; i <= list2.Count; i++)
            {
                pspDev = (PSPDEV)list2[i - 1];                
                pspDev.Number = i;
                brchcount += 1;
                Services.BaseService.Update<PSPDEV>(pspDev);
            }
           
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "母线节点";
            list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.Lable = "支路";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            foreach (PSPDEV dev in list1)
            {
                double devx = Convert.ToDouble(dev.X1);
                double devy = Convert.ToDouble(dev.Y1);
                XmlElement temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']") as XmlElement;
                if (temp == null)
                    continue;

                if (temp.GetAttribute("xlink:href").Contains("Substation"))
                {
                    RectangleF t = ((IGraph)temp).GetBounds();
                    foreach (PSPDEV psp in list2)
                    {
                        double x1 = psp.X1;
                        double x2 = psp.X2;
                        double y1 = psp.Y1;
                        double y2 = psp.Y2;
                        if (Math.Abs(devx - x1) <= ((t.Height) / 2) && Math.Abs(devy - y1) <= ((t.Height) / 2))
                        {
                            psp.FirstNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                        if (Math.Abs(devx - x2) <= ((t.Height) / 2) && Math.Abs(devy - y2) <= ((t.Height) / 2))
                        {
                            psp.LastNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                    }
                }
                else if (temp.GetAttribute("xlink:href").Contains("Power") || temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                {
                    RectangleF t = ((IGraph)temp).GetBounds();
                    foreach (PSPDEV psp in list2)
                    {
                        double x1 = psp.X1;
                        double x2 = psp.X2;
                        double y1 = psp.Y1;
                        double y2 = psp.Y2;
                        if ((x1 - devx) <= t.Width && (y1 - devy) <= t.Height && x1 >= devx && y1 >= devy)
                        {
                            psp.FirstNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                        if ((x2 - devx) <= t.Width && (y2 - devy) <= t.Height && x2 >= devx && y2 >= devy)
                        {
                            psp.LastNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                    }
                }
            }
        }
        private void Topology()
        {

            brchcount = 0; buscount = 0; transcount = 0;
            //XPathNavigator nav = tlVectorControl1.SVGDocument.CreateNavigator();
            //XPathExpression exp = nav.Compile("svg/use");
            //exp.AddSort("x", XmlSortOrder.Ascending, XmlCaseOrder.None, "", XmlDataType.Number);
            XmlNodeList nodeList1 = tlVectorControl1.SVGDocument.GetElementsByTagName("use");
            //XPathNodeIterator nodeList1 = nav.Select(exp);            
            PSPDEV pspDev = new PSPDEV();
            foreach (XmlNode node in nodeList1)
            {
                XmlElement element = node as XmlElement;
                RectangleF t = ((IGraph)element).GetBounds();
                XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + element.GetAttribute("id") + "']");
                //if (temp == null)
                //    return;
                if (element.GetAttribute("xlink:href").Contains("Power") || element.GetAttribute("xlink:href").Contains("motherlinenode"))
                {
                    pspDev.EleID = element.GetAttribute("id");
                    if(temp!=null)
                        pspDev.Name = temp.InnerText;
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.X1 = t.X;
                    pspDev.Y1 = t.Y;
                    pspDev.X2 = t.X + t.Width;
                    pspDev.Y2 = t.Y + t.Height;
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = -1; 
                    pspDev.Number = -1;
                    Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                }
                else if (element.GetAttribute("xlink:href").Contains("Substation"))
                {                    
                    pspDev.EleID = element.GetAttribute("id");
                    if (temp != null)
                    pspDev.Name = temp.InnerText;
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    pspDev.X1 = t.X + t.Width / 2;
                    pspDev.Y1 = t.Y + t.Height / 2;
                    pspDev.X2 = 0;
                    pspDev.Y2 = 0;
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = -1;
                    pspDev.Number = -1;
                    Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                }
                else if (element.GetAttribute("xlink:href").Contains("dynamotorline") || element.GetAttribute("xlink:href").Contains("gndline"))
                {
                    Transf transfElement = (element as Use).Transform;
                    RectangleF tt = (element as Use).GetRectangle();
                    float x=tt.X;
                    float y = tt.Y + tt.Height / 2;
                    PointF[] startPoint = new PointF[] { new PointF(x, y) };
                    transfElement.Matrix.TransformPoints(startPoint);
                    pspDev.EleID = element.GetAttribute("id");                  
                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                   
                    pspDev.X1 = startPoint[0].X;
                    pspDev.Y1 = startPoint[0].Y;
                    pspDev.X2 = t.X + t.Width;
                    pspDev.Y2 = t.Y + t.Height;
                    pspDev.FirstNode = -1;
                    pspDev.LastNode = 0;
                    pspDev.Number = -1;
                    Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                }
            }
            XmlNodeList nodeList2 = tlVectorControl1.SVGDocument.GetElementsByTagName("polyline");
            foreach (XmlNode node in nodeList2)
            {
                XmlElement element = node as XmlElement;       
                if ((element.GetAttribute("flag") == "1")||(!element.HasAttributes)||element.GetAttribute("id")=="")
                {
                    break;
                }
                PointF[] t = ((Polyline)element).Pt;
                //XmlNode temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@ParentID='" + element.GetAttribute("id") + "']");
                pspDev.EleID = element.GetAttribute("id");
                //pspDev.Name = temp.InnerText;
                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                pspDev.X1 = t[0].X;
                pspDev.Y1 = t[0].Y;
                pspDev.X2 = t[1].X;
                pspDev.Y2 = t[1].Y;
                pspDev.FirstNode = -1;
                pspDev.LastNode = -1;
                pspDev.Number = -1;
                //PSPDEV psp = new PSPDEV();
                //psp.EleID = element.GetAttribute("id");
                //psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //psp = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", psp);
                //if (psp == null)
                //{
                //    pspDev.Number = -1;
                //    pspDev.Name = null;
                //    pspDev.Type = "Polyline";
                //    pspDev.FirstNode = -1;
                //    pspDev.LastNode = -1;
                //    pspDev.SUID = Guid.NewGuid().ToString();
                //    Services.BaseService.Create<PSPDEV>(pspDev);

                //}
                //else
                //{
                Services.BaseService.Update("UpdatePSPDEVByEleID", pspDev);
                //}

            }
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            for (int i = 1; i <= list1.Count; i++)
            {
                pspDev = (PSPDEV)list1[i - 1];
                pspDev.Number = i;    
                Services.BaseService.Update<PSPDEV>(pspDev);
                buscount += 1;                            //记录母线数
            }
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            int j = 0;
            for (int i = 1; i <= list2.Count; i++)
            {
                pspDev = (PSPDEV)list2[i - 1];     
                if (pspDev.LineStatus == "断开")
                {
                    j+=1;
                    pspDev.Number = -1;
                    Services.BaseService.Update<PSPDEV>(pspDev);
                    continue; 
 
                }
                pspDev.Number = (i-j);
                brchcount += 1;
                Services.BaseService.Update<PSPDEV>(pspDev);
            }
            pspDev.Type = "TransformLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            for (int i = 1; i <= list3.Count;i++ )
            {
                pspDev = (PSPDEV)list3[i - 1];
                pspDev.Number = list2.Count - j+i;
                transcount += 1;
                //取首末节点
                PSPDEV dev = new PSPDEV();
                dev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                dev.Name = pspDev.HuganLine1;
                dev.Type = "Use";
                dev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", dev);
                if (dev!=null)
                {
                    pspDev.FirstNode = dev.Number;
                }
                else
                {
                    pspDev.FirstNode = -1;
                    dev = new PSPDEV();
                }
                dev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                dev.Name = pspDev.HuganLine2;
                dev.Type = "Use";
                dev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", dev);
                if (dev != null)
                {
                    pspDev.LastNode = dev.Number;
                }
                else
                {
                    pspDev.LastNode = -1;                    
                }
                Services.BaseService.Update<PSPDEV>(pspDev);
            }

            pspDev.Type = "GNDLine";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            IList list13 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            for (int i = 1; i <= list13.Count; i++)
            {
                pspDev = (PSPDEV)list13[i - 1];
                pspDev.Number = list2.Count+list3.Count - j + i;
                transcount += 1;
                //取首末节点
                PSPDEV dev = new PSPDEV();
                dev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                dev.Name = pspDev.HuganLine1;
                dev.Type = "Use";
                dev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", dev);
                if (dev != null)
                {
                    pspDev.FirstNode = dev.Number;
                }
                else
                {
                    pspDev.FirstNode = -1;
                    dev = new PSPDEV();
                }
                dev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                dev.Name = pspDev.HuganLine2;
                dev.Type = "Use";
                dev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", dev);
                if (dev != null)
                {
                    pspDev.LastNode = dev.Number;
                }
                else
                {
                    pspDev.LastNode = -1;
                }
                Services.BaseService.Update<PSPDEV>(pspDev);
            }

            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            pspDev.Type = "Polyline";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            foreach (PSPDEV dev in list1)
            {
                double devx = Convert.ToDouble(dev.X1);
                double devy = Convert.ToDouble(dev.Y1);
                XmlElement temp = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + dev.EleID + "']") as XmlElement;
                if (temp == null)
                    continue;               
                if (temp.GetAttribute("xlink:href").Contains("Substation"))
                {
                    RectangleF t = ((IGraph)temp).GetBounds();
                    foreach (PSPDEV psp in list2)
                    {
                        XmlElement tempPloyline = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + psp.EleID + "']") as XmlElement;
                        if (tempPloyline.GetAttribute("layer") != temp.GetAttribute("layer"))
                        {
                            continue;
                        }
                        double x1 = psp.X1;
                        double x2 = psp.X2;
                        double y1 = psp.Y1;
                        double y2 = psp.Y2;
                        if (Math.Abs(devx - x1) <= ((t.Height) / 2) && Math.Abs(devy - y1) <= ((t.Height) / 2))
                        {
                            psp.FirstNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                        if (Math.Abs(devx - x2) <= ((t.Height) / 2) && Math.Abs(devy - y2) <= ((t.Height) / 2))
                        {
                            psp.LastNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                    }
                }
                else if (temp.GetAttribute("xlink:href").Contains("Power") || temp.GetAttribute("xlink:href").Contains("motherlinenode"))
                {
                    RectangleF t = ((IGraph)temp).GetBounds();
                    foreach (PSPDEV psp in list2)
                    {
                        XmlElement tempPloyline = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + psp.EleID + "']") as XmlElement;
                        if (tempPloyline.GetAttribute("layer") != temp.GetAttribute("layer"))
                        {
                            continue;
                        }
                        double x1 = psp.X1;
                        double x2 = psp.X2;
                        double y1 = psp.Y1;
                        double y2 = psp.Y2;
                        if ((x1 - devx) <= t.Width && (y1 - devy) <= t.Height && x1 >= devx && y1 >= devy)
                        {
                            psp.FirstNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                        if ((x2 - devx) <= t.Width && (y2 - devy) <= t.Height && x2 >= devx && y2 >= devy)
                        {
                            psp.LastNode = dev.Number;
                            Services.BaseService.Update<PSPDEV>(psp);
                        }
                    }
                }
            }
        }
       
        private void frmTLpsp_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = false;
            try
            {
                if (tlVectorControl1.IsModified)
                {
                    string a;


                    if ((a = Convert.ToString(MessageBox.Show("图形已修改，是否保存?", "提示", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Information))) == "Yes")
                    {

                        //frmElementName dlg = new frmElementName();

                        //dlg.TextInput = tlVectorControl1.SVGDocument.FileName;

                        //if (dlg.ShowDialog() == DialogResult.OK)
                        //{
                        //    tlVectorControl1.SVGDocument.FileName = dlg.TextInput;
                        //}
                        Save();
                    }
                    else if (a == "Cancel")
                    {
                        e.Cancel = true;
                        return;
                    }
                    //else e.Cancel = true;
                    //else
                    //{
                        //a = Convert.ToString((MessageBox.Show("图形已修改，是否保存?", "提示", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Information)));
                        //if (ShowDialog == DialogResult.Cancel)
                        //{
                            //return;
                        //}
                        //}
                        //else
                        //{
                        //    PSPDEV pspDev = new PSPDEV();
                        //    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        //    IList list = Services.BaseService.GetList("SelectPSPDEVBySvgUID", pspDev);
                        //    foreach (PSPDEV dev in list)
                        //    {
                        //        Services.BaseService.Delete<PSPDEV>(dev);
                        //    } 
                        //}
                    //}
                }
            }
            catch (Exception e1) { }
        }
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

            if (e.ClickedItem.Text == "短路计算")
            {
                string duanluname = null;        //记录短路点的名字 如果是发生在支路上短路点的名字为线路连接的第一个母线名
                int tuxing = 0;
                int baobiao = 0;
                PSPDEV pspDuanlu = new PSPDEV();
                pspDuanlu.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                XmlElement element = tlVectorControl1.SVGDocument.CurrentElement;
                pspDuanlu.EleID = element.GetAttribute("id");
                pspDuanlu = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDuanlu);
                if (pspDuanlu == null)
                    return;
                if (pspDuanlu.Type == "Polyline" && pspDuanlu.Lable != "支路")
                    return;
                frmDuanlu dudu = new frmDuanlu(pspDuanlu);
                PSPDEV Duanlu = new PSPDEV();
                Duanlu.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                int n11 = 0, n2 = 0, n3 = 0;
                double n4 = 0;

                if (dudu.ShowDialog() == DialogResult.OK)
                {
                    //int bigsmall=Convert.ToInt32(dudu.DuanluBigsmall);
                    try
                    {
                    CheckDL();
                    string nodeType;
                    if (dudu.DuanluBaobiao == "是")
                        baobiao = 1;
                    if (dudu.DuanluTuxing == "图形输出节点电压")
                        tuxing = 1;
                    if (dudu.DuanluTuxing == "图形输出短路电流")
                        tuxing = 2;
                    //Duanlu.Name = dudu.DuanluPoint;
                    //Duanlu = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", Duanlu);
                    n4 = (double)Convert.ToInt32(dudu.hscool) / 100;
                    nodeType = pspDuanlu.Type;
                    if (pspDuanlu.Type == "Use")
                    {
                        n11 = 0;
                        n2 = pspDuanlu.Number;
                        switch (dudu.DuanluType)
                        {
                            case "单相接地":
                                n3 = 1;
                                break;

                            case "两相接地":
                                n3 = 3;
                                break;
                            case "两相故障":
                                n3 = 2;
                                break;
                            case "三相故障":
                                n3 = 0;
                                break;
                            default:
                                n3 = 1;
                                break;
                        }
                        PSPDEV psp = new PSPDEV();
                        psp.Type = "Polyline";
                        psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        psp.Lable = "支路";
                        IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                        string dlr = null;
                        bool flag = false;　　　　　　　　　　　　　//记录读的是一般线路还是两绕组变压器上的母线还是三绕组上面的
                        for (int i = 0; i < list2.Count; i++)
                        {
                            psp = list2[i] as PSPDEV;
                            

                            if (n2 == psp.FirstNode && psp.KName == "合" && psp.KSwitchStatus == "合")
                            {

                                flag = true;
                                dlr = "0" + " " + psp.FirstNode + " " + psp.LastNode + " " + psp.Number + " " + "0 " + " " + n3.ToString();

                            }
                            if (n2 == psp.LastNode && psp.KName == "合" && psp.KSwitchStatus == "合")
                            {
                                flag = true;
                                dlr = "0" + " " + psp.FirstNode + " " + psp.LastNode + " " + psp.Number + " " + "1 " + " " + n3.ToString();
                            }
                            if (flag)
                                break;
                            else if (!flag)
                                continue;
                        }
                        if (!flag)
                        {
                            psp.Type = "transformertwozu";
                            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            psp.Lable = "二绕组变压器";
                            IList list3= Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                            for (int i = 0; i < list3.Count; i++)
                            {
                                psp = list3[i] as PSPDEV;
                                PSPDEV devFirst = new PSPDEV();
                                devFirst.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                devFirst.Name = psp.HuganLine1;
                                devFirst.Type = "Use";
                                devFirst = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devFirst);
                                PSPDEV devLast = new PSPDEV();
                                devLast.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                devLast.Name = psp.HuganLine2;
                                devLast.Type = "Use";
                                devLast = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devLast);

                                if (n2 == devFirst.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合")
                                {

                                    flag = true;
                                    dlr = "0" + " " + devFirst.Number + " " + devLast.Number+ " " + psp.Number + " " + "0 " + " " + n3.ToString();

                                }
                                if (n2 ==devLast.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合")
                                {
                                    flag = true;
                                    dlr = "0" + " " + devFirst.Number + " " + devLast.Number + " " + psp.Number + " " + "1 " + " " + n3.ToString();
                                }
                                if (flag)
                                    break;
                                else if (!flag)
                                    continue;
                            }
                        }
                        if (!flag)
                        {
                            psp.Type = "transformerthirdzu";
                            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            psp.Lable = "三绕组变压器";
                            IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                            for (int i = 0; i < list4.Count; i++)
                            {
                                psp = list4[i] as PSPDEV;
                                PSPDEV devINode = new PSPDEV();
                                devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                devINode.Name = psp.HuganLine1;
                                devINode.Type = "Use";
                                devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
                                PSPDEV devJNode = new PSPDEV();
                                devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                devJNode.Name = psp.HuganLine2;
                                devJNode.Type = "Use";
                                devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJNode);
                                PSPDEV devKNode = new PSPDEV();
                                devKNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                devKNode.Name = psp.KName;
                                devKNode.Type = "Use";
                                devKNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devKNode);

                                if (n2 == devINode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                                {

                                    flag = true;
                                    dlr = "0" + " " + devINode.Number + " " + devJNode.Number + " " + psp.Number + " " + "0 " + " " + n3.ToString();

                                }
                                if (n2 == devJNode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                                {
                                    flag = true;
                                    dlr = "0" + " " + devINode.Number + " " + devJNode.Number + " " + psp.Number + " " + "1 " + " " + n3.ToString();
                                }
                                if (n2 == devKNode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                                {
                                    flag = true;
                                    dlr = "0" + " " + devINode.Number + " " + devKNode.Number + " " + psp.Number + " " + "1 " + " " + n3.ToString();
                                }

                                if (flag)
                                    break;
                                else if (!flag)
                                    continue;
                            }
                        }
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\fault.txt"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\fault.txt");
                        }

                        FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fault.txt"), FileMode.OpenOrCreate);
                        StreamWriter str11 = new StreamWriter(VK);
                        str11.Write(dlr);
                        str11.Close();
                        n4 = 0;



                    }
                    else if (pspDuanlu.Type == "Polyline")
                    {
                        //n11 = pspDuanlu.FirstNode;
                        //n2 = pspDuanlu.LastNode;
                        n11 = pspDuanlu.Number;
                        n2 = n11;
                        switch (dudu.DuanluType)
                        {
                            case "单相接地":
                                n3 = 1;
                                break;

                            case "两相接地":
                                n3 = 3;
                                break;
                            case "两相故障":
                                n3 = 2;
                                break;
                            case "三相故障":
                                n3 = 0;
                                break;
                            default:
                                n3 = 1;
                                break;
                        }
                        string dlr = null;
                        if (n4 < 1 && n4 > 0)
                        {
                            duanluname = pspDuanlu.Name;
                        }
                        dlr = "0" + " " + pspDuanlu.FirstNode + " " + pspDuanlu.LastNode + " " + pspDuanlu.Number + " " + n4 + " " + n3.ToString();

                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\fault.txt"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\fault.txt");
                        }

                        FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fault.txt"), FileMode.OpenOrCreate);
                        StreamWriter str11 = new StreamWriter(VK);
                        str11.Write(dlr);
                        str11.Close();
                    }
                    else
                    {
                        return;
                    }
                    XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");
                    foreach (XmlNode node in list)
                    {
                        SvgElement elementde = node as SvgElement;
                        tlVectorControl1.SVGDocument.CurrentElement = elementde;
                        tlVectorControl1.Delete();
                    }
                    shortcir shortCutCal = new shortcir();
                    shortCutCal.Show_shortcir(0,0);
                    //bool matrixflag=true;                //用来判断是否导纳矩阵的逆矩阵是否存在逆矩阵
                    string matrixstr = null;
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt"))
                    {
                        matrixstr = "正序导纳矩阵";
                        // matrixflag = false;
                    }
                    if (matrixstr != null)
                    {
                        matrixstr += ",";
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt"))
                    {
                        // matrixflag = false;
                        matrixstr += "负序导纳矩阵";
                    }
                    if (matrixstr != null)
                    {
                        matrixstr += ",";
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt"))
                    {
                        //matrixflag = false;
                        matrixstr += "零序导纳矩阵";
                    }
                    if (matrixstr != null)
                    {
                        MessageBox.Show(matrixstr + "不存在逆矩阵，请调整参数后再进行计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    string duanResult = null;
                    duanResult += "短路电流简表" + "\r\n" + "\r\n";
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }
                    FileStream shorcuit = new FileStream(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt", FileMode.Open);
                    StreamReader readLineGU = new StreamReader(shorcuit, System.Text.Encoding.Default);
                    string strLineGU;
                    string[] arrayGU;
                    char[] charSplitGU = new char[] { ' ' };
                    strLineGU = readLineGU.ReadLine();
                    int j = 0;
                    while (strLineGU != null)
                    {
                        arrayGU = strLineGU.Split(charSplitGU);
                        int i = 0;
                        string[] dev = new string[9];
                        dev.Initialize();
                        foreach (string str in arrayGU)
                        {
                            if (str != "")
                            {
                                dev[i++] = str;
                            }
                        }
                        if (tuxing == 2 && j != 0)
                        {
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            if (dev[1] != "du")
                            {
                                CR.Name = dev[1];
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            }
                            else
                            {
                                CR.Name = duanluname;
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            }

                            if (CR != null)
                            {
                                if (CR.Type != "Polyline")
                                {
                                    XmlElement elementdl = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + CR.EleID + "']") as XmlElement;

                                    if (elementdl != null)
                                    {
                                        RectangleF bound = ((IGraph)elementdl).GetBounds();
                                        XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        n1.SetAttribute("x", Convert.ToString(bound.X));
                                        n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                                        n1.InnerText = (Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt)).ToString("N4");
                                        n1.SetAttribute("layer", SvgDocument.currentLayer);
                                        n1.SetAttribute("flag", "1");
                                        n1.SetAttribute("stroke", "#FF0000");
                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                        tlVectorControl1.Operation = ToolOperation.Select;
                                        tlVectorControl1.Refresh();
                                    }
                                }
                                else
                                {
                                    XmlElement elementdl = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + CR.EleID + "']") as XmlElement;

                                    if (elementdl != null)
                                    {
                                        PointF[] t = ((Polyline)elementdl).Points;

                                        PointF[] t2 = ((Polyline)elementdl).FirstTwoPoint;
                                        t = t2;
                                        PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                                        float angel = 0f;
                                        angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                                        string l3 = Convert.ToString(midt.X);
                                        string l4 = Convert.ToString(midt.Y);

                                        string tran = ((Polyline)elementdl).Transform.ToString();

                                        PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));
                                        XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                        XmlElement n2dl = tlVectorControl1.SVGDocument.CreateElement("polyline") as Polyline;
                                        PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                        PSPDEV psp = new PSPDEV();
                                        psp.FirstNode = CR.FirstNode;
                                        psp.LastNode = CR.LastNode;
                                        psp.SvgUID = CR.SvgUID;
                                        PSPDEV tempss = new PSPDEV();
                                        IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                                        foreach (PSPDEV devP in listParallel)
                                        {
                                            if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                            {
                                                if (((devP.X1) > (CR.X1)))
                                                {
                                                    pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));

                                                }
                                            }
                                            else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                            {
                                                if (((devP.Y1) > (CR.Y1)))
                                                {
                                                    pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));

                                                }
                                            }
                                            else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                            {
                                                if (((devP.Y1) > (CR.Y1)))
                                                {
                                                    pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));

                                                }
                                            }
                                        }

                                        PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                                        n1.SetAttribute("x", Convert.ToString(pStart.X));
                                        n1.SetAttribute("y", Convert.ToString(pStart.Y));

                                        //if (Convert.ToDouble(dev[4]) >= 0)
                                        //{
                                        n1.InnerText = (Math.Abs(Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt))).ToString("N4");
                                        //}
                                        //else
                                        //{
                                        //    n1.InnerText = (Math.Abs(Convert.ToDouble(dev[3]))).ToString("N4");
                                        //}
                                        n1.SetAttribute("layer", SvgDocument.currentLayer);
                                        n1.SetAttribute("flag", "1");

                                        //if (Convert.ToDouble(dev[5]) == 1)
                                        //    n1.SetAttribute("stroke", "#FF0000");

                                        PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 25) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 25) * Math.PI / 180)));
                                        PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 335) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 335) * Math.PI / 180)));

                                        if (Convert.ToDouble(dev[3]) < 0)
                                        {
                                            p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 155) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 155) * Math.PI / 180)));
                                            p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 205) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 205) * Math.PI / 180)));
                                        }

                                        string l1 = Convert.ToString(p1.X);
                                        string l2 = Convert.ToString(p1.Y);
                                        string l5 = Convert.ToString(p2.X);
                                        string l6 = Convert.ToString(p2.Y);

                                        tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                        tlVectorControl1.Operation = ToolOperation.Select;

                                        tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;

                                        RectangleF ttt = ((Polyline)elementdl).GetBounds();

                                        tlVectorControl1.RotateSelection(angel, pStart);
                                        if (Math.Abs(angel) > 90)
                                            tlVectorControl1.RotateSelection(180, pStart);
                                        PointF newp = new PointF(center.X + 10, center.Y + 10);

                                        tlVectorControl1.Refresh();

                                    }
                                }
                            }
                            if (CR.NodeType == "Polyline")
                            {
                                PSPDEV fl = new PSPDEV();
                                fl.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                fl.Number = CR.FirstNode;
                                fl.Type = nodeType;
                                fl = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                                duanResult += dev[0] + "," + dev[1] + "," + Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + "\r\n";
                            }
                            else
                            {
                                duanResult += dev[0] + "," + dev[1] + "," + Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "\r\n";
                            }

                        }
                        else
                        {
                            duanResult += dev[0] + "," + dev[1] + "," + dev[3] + "\r\n";
                        }

                        strLineGU = readLineGU.ReadLine();
                        j++;
                    }
                    readLineGU.Close();
                    string dianYaResult = null;
                    dianYaResult += "母线电压结果" + "\r\n" + "\r\n";
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }
                    FileStream dianYa = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt", FileMode.Open);
                    StreamReader readLineDY = new StreamReader(dianYa, System.Text.Encoding.Default);
                    string strLineDY;
                    string[] arrayDY;
                    char[] charSplitDY = new char[] { ' ' };
                    strLineDY = readLineDY.ReadLine();
                    j = 0;
                    while (strLineDY != null)
                    {
                        arrayDY = strLineDY.Split(charSplitDY);
                        int i = 0;
                        string[] dev = new string[14];
                        dev.Initialize();
                        foreach (string str in arrayDY)
                        {
                            if (str != "")
                            {
                                dev[i++] = str;
                            }
                        }
                        if (j == 0)
                        {
                            dianYaResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "," +
     dev[9] + "," + dev[10] + "," + dev[11] + "," + dev[12] + "," + dev[13] + "\r\n";
                        }
                        else
                        {
                            bool flag = true;     //判断此母线是短路点母线还是一般的母线
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            if (dev[1] != "du")
                            {
                                CR.Name = dev[1];
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            }
                            else
                            {
                                flag = false;
                                CR.Name = duanluname;
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            }


                            //CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            if (tuxing == 1)
                            {
                                XmlElement elementdl = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + CR.EleID + "']") as XmlElement;

                                if (elementdl != null)
                                {
                                    RectangleF bound = ((IGraph)elementdl).GetBounds();
                                    XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                    XmlElement n22 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                    XmlElement n33 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                    n1.SetAttribute("x", Convert.ToString(bound.X));
                                    n1.SetAttribute("y", Convert.ToString(bound.Y - 60));
                                    n1.InnerText = "A相:" + (Convert.ToDouble(dev[2]) * CR.ReferenceVolt).ToString("N4") + "Kv/" + (Convert.ToDouble(dev[3])).ToString("N4") + "°";
                                    n1.SetAttribute("layer", SvgDocument.currentLayer);
                                    n1.SetAttribute("flag", "1");
                                    tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                    tlVectorControl1.Operation = ToolOperation.Select;
                                    tlVectorControl1.Refresh();
                                    n22.SetAttribute("x", Convert.ToString(bound.X));
                                    n22.SetAttribute("y", Convert.ToString(bound.Y - 40));
                                    n22.InnerText = "B相:" + (Convert.ToDouble(dev[4]) * CR.ReferenceVolt).ToString("N4") + "Kv/" + (Convert.ToDouble(dev[5])).ToString("N4") + "°";
                                    n22.SetAttribute("layer", SvgDocument.currentLayer);
                                    n22.SetAttribute("flag", "1");
                                    tlVectorControl1.SVGDocument.RootElement.AppendChild(n22);
                                    tlVectorControl1.Operation = ToolOperation.Select;
                                    tlVectorControl1.Refresh();
                                    n33.SetAttribute("x", Convert.ToString(bound.X));
                                    n33.SetAttribute("y", Convert.ToString(bound.Y - 20));
                                    n33.InnerText = "C相:" + (Convert.ToDouble(dev[6]) * CR.ReferenceVolt).ToString("N4") + "Kv/" + (Convert.ToDouble(dev[7])).ToString("N4") + "°";
                                    n33.SetAttribute("layer", SvgDocument.currentLayer);
                                    n33.SetAttribute("flag", "1");
                                    tlVectorControl1.SVGDocument.RootElement.AppendChild(n33);
                                    tlVectorControl1.Operation = ToolOperation.Select;
                                    tlVectorControl1.Refresh();
                                }
                            }
                            if (flag)
                                dianYaResult += dev[0] + "," + dev[1] + "," + Convert.ToDouble(dev[2]) * CR.ReferenceVolt + "," + dev[3] + "," + Convert.ToDouble(dev[4]) * CR.ReferenceVolt + "," + dev[5] + "," + Convert.ToDouble(dev[6]) * CR.ReferenceVolt + "," + dev[7] + "," + Convert.ToDouble(dev[8]) * CR.ReferenceVolt + "," +
                                    dev[9] + "," + Convert.ToDouble(dev[10]) * CR.ReferenceVolt + "," + dev[11] + "," + Convert.ToDouble(dev[12]) * CR.ReferenceVolt + "," + dev[13] + "\r\n";
                            else
                                dianYaResult += dev[0] + "," + duanluname + "上短路点" + "," + Convert.ToDouble(dev[2]) * CR.ReferenceVolt + "," + dev[3] + "," + Convert.ToDouble(dev[4]) * CR.ReferenceVolt + "," + dev[5] + "," + Convert.ToDouble(dev[6]) * CR.ReferenceVolt + "," + dev[7] + "," + Convert.ToDouble(dev[8]) * CR.ReferenceVolt + "," +
                                   dev[9] + "," + Convert.ToDouble(dev[10]) * CR.ReferenceVolt + "," + dev[11] + Convert.ToDouble(dev[12]) * CR.ReferenceVolt + "," + dev[13] + "\r\n";

                        }
                        strLineDY = readLineDY.ReadLine();
                        j++;
                    }
                    readLineDY.Close();
                    string dianLiuResult = null;
                    dianLiuResult += "支路电流结果" + "\r\n" + "\r\n";
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }
                    FileStream dianLiu = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt", FileMode.Open);
                    StreamReader readLineDL = new StreamReader(dianLiu, System.Text.Encoding.Default);
                    string strLineDL;
                    string[] arrayDL;
                    char[] charSplitDL = new char[] { ' ' };
                    strLineDL = readLineDL.ReadLine();
                    j = 0;
                    while (strLineDL != null)
                    {
                        arrayDL = strLineDL.Split(charSplitDL);
                        int i = 0;
                        string[] dev = new string[15];
                        dev.Initialize();
                        foreach (string str in arrayDL)
                        {
                            if (str != "")
                            {
                                dev[i++] = str;
                            }
                        }
                        if (j == 0)
                        {
                            dianLiuResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "," +
                                         dev[9] + "," + dev[10] + "," + dev[11] + "," + dev[12] + "," + dev[13] + "," + dev[14] + "\r\n";
                        }
                        else
                        {
                            //PSPDEV CR = new PSPDEV();
                            //CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            //CR.Number = Convert.ToInt32(dev[2]);
                            //CR.Type = "Polyline";
                            //CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);

                            //因为在线路电流输出时既有一般线路的电流、两绕组和三绕组线路的电流还有接地电容器和电抗器的电流，因此只将电流输出就行了
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            if (dev[0] != "du")
                            {
                                CR.Name = dev[0];
                            }
                            else
                                CR.Name = dev[1];

                            CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            if (tuxing == 1)
                            {
                                //    XmlElement elementdl = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + CR.EleID + "']") as XmlElement;

                                //    if (elementdl != null)
                                //    {
                                //        PointF[] t = ((Polyline)elementdl).Points;

                                //        PointF[] t2 = ((Polyline)elementdl).FirstTwoPoint;
                                //        t = t2;
                                //        PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                                //        float angel = 0f;
                                //        angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                                //        string l3 = Convert.ToString(midt.X);
                                //        string l4 = Convert.ToString(midt.Y);

                                //        string tran = ((Polyline)elementdl).Transform.ToString();

                                //        PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));
                                //        XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                                //        XmlElement n2dl = tlVectorControl1.SVGDocument.CreateElement("polyline") as Polyline;
                                //        PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                                //        PSPDEV psp = new PSPDEV();
                                //        psp.FirstNode = CR.FirstNode;
                                //        psp.LastNode = CR.LastNode;
                                //        psp.SvgUID = CR.SvgUID;
                                //        PSPDEV tempss = new PSPDEV();
                                //        IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                                //        foreach (PSPDEV devP in listParallel)
                                //        {
                                //            if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                                //            {
                                //                if (((devP.X1) > (CR.X1)))
                                //                {
                                //                    pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));

                                //                }
                                //            }
                                //            else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                                //            {
                                //                if (((devP.Y1) > (CR.Y1)))
                                //                {
                                //                    pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));

                                //                }
                                //            }
                                //            else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                                //            {
                                //                if (((devP.Y1) > (CR.Y1)))
                                //                {
                                //                    pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));

                                //                }
                                //            }
                                //        }

                                //        PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                                //        n1.SetAttribute("x", Convert.ToString(pStart.X));
                                //        n1.SetAttribute("y", Convert.ToString(pStart.Y));

                                //        //if (Convert.ToDouble(dev[4]) >= 0)
                                //        //{
                                //        n1.InnerText = (Math.Abs(Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt))).ToString("N4");
                                //        //}
                                //        //else
                                //        //{
                                //        //    n1.InnerText = (Math.Abs(Convert.ToDouble(dev[3]))).ToString("N4");
                                //        //}
                                //        n1.SetAttribute("layer", SvgDocument.currentLayer);
                                //        n1.SetAttribute("flag", "1");

                                //        //if (Convert.ToDouble(dev[3]) == 1)
                                //        //    n1.SetAttribute("stroke", "#FF0000");

                                //        PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 25) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 25) * Math.PI / 180)));
                                //        PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 335) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 335) * Math.PI / 180)));

                                //        if (Convert.ToDouble(dev[3]) < 0)
                                //        {
                                //            p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 155) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 155) * Math.PI / 180)));
                                //            p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 205) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 205) * Math.PI / 180)));
                                //        }

                                //        string l1 = Convert.ToString(p1.X);
                                //        string l2 = Convert.ToString(p1.Y);
                                //        string l5 = Convert.ToString(p2.X);
                                //        string l6 = Convert.ToString(p2.Y);

                                //        tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                                //        tlVectorControl1.Operation = ToolOperation.Select;

                                //        tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;

                                //        RectangleF ttt = ((Polyline)elementdl).GetBounds();

                                //        tlVectorControl1.RotateSelection(angel, pStart);
                                //        if (Math.Abs(angel) > 90)
                                //            tlVectorControl1.RotateSelection(180, pStart);
                                //        PointF newp = new PointF(center.X + 10, center.Y + 10);

                                //        tlVectorControl1.Refresh();



                            }
                            dianLiuResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[4] + "," + Convert.ToDouble(dev[5]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[6] + "," + Convert.ToDouble(dev[7]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[8] + "," +
                              Convert.ToDouble(dev[9]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[10] + "," + Convert.ToDouble(dev[11]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[12] + "," + Convert.ToDouble(dev[13]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[14] + "\r\n";

                            //if (CR.NodeType == "Polyline")
                            //{
                            //    PSPDEV fl = new PSPDEV();
                            //    fl.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            //    fl.Number = CR.FirstNode;
                            //    fl.Type = nodeType;
                            //    fl = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR);
                            //    dianLiuResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + "," + dev[4] + "," + Convert.ToDouble(dev[5]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + "," + dev[6] + "," + Convert.ToDouble(dev[7]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + "," + dev[8] + "," +
                            //    Convert.ToDouble(dev[9]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + "," + dev[10] + "," + Convert.ToDouble(dev[11]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + dev[12] + "," + Convert.ToDouble(dev[13]) * 100 / (Math.Sqrt(3) * fl.ReferenceVolt) + "," + dev[14] + "\r\n";
                            //}
                            //else
                            //{
                            //    dianLiuResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[4] + "," + Convert.ToDouble(dev[5]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[6] + "," + Convert.ToDouble(dev[7]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[8] + "," +
                            //    Convert.ToDouble(dev[9]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[10] + "," + Convert.ToDouble(dev[11]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + dev[12] + "," + Convert.ToDouble(dev[13]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[14] + "\r\n";
                            //}


                        }

                        strLineDL = readLineDL.ReadLine();
                        j++;
                    }
                    readLineDL.Close();
                    if (baobiao == 1)
                    {
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                        }
                        FileStream tempGU = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                        StreamWriter strGU = new StreamWriter(tempGU, Encoding.GetEncoding("GB2312"));
                        strGU.Write(duanResult);
                        strGU.Close();
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                        }
                        FileStream tempDY = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
                        StreamWriter strDY = new StreamWriter(tempDY, Encoding.GetEncoding("GB2312"));
                        strDY.Write(dianYaResult);
                        strDY.Close();
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result2.csv"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
                        }
                        FileStream tempDL = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result2.csv"), FileMode.OpenOrCreate);
                        StreamWriter strDL = new StreamWriter(tempDL, Encoding.GetEncoding("GB2312"));
                        strDL.Write(dianLiuResult);
                        strDL.Close();
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName +"短路计算结果.xls"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName +"短路计算结果.xls");
                        }

                        Excel.Application ex;
                        Excel.Worksheet xSheet;
                        Excel.Application result1;
                        Excel.Application result2;
                        Excel.Worksheet tempSheet;
                        Excel.Worksheet tempSheet1;
                        Excel.Worksheet newWorksheet;
                        Excel.Worksheet newWorkSheet1;

                        object oMissing = System.Reflection.Missing.Value;
                        ex = new Excel.Application();
                        ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");

                        xSheet = (Excel.Worksheet)ex.Worksheets[1];
                        ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);
                        xSheet = (Excel.Worksheet)ex.Worksheets[2];
                        ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);
                        xSheet = (Excel.Worksheet)ex.Worksheets[1];
                        result1 = new Excel.Application();
                        result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
                        result2 = new Excel.Application();
                        result2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
                        tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
                        tempSheet1 = (Excel.Worksheet)result2.Worksheets.get_Item(1);
                        newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
                        newWorkSheet1 = (Excel.Worksheet)ex.Worksheets.get_Item(3);
                        newWorksheet.Name = "母线电压";
                        newWorkSheet1.Name = "支路电流";
                        xSheet.Name = "短路电流";
                        ex.Visible = true;

                        tempSheet.Cells.Select();
                        tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                        newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                        tempSheet1.Cells.Select();
                        tempSheet1.Cells.Copy(System.Reflection.Missing.Value);
                        newWorkSheet1.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                        xSheet.UsedRange.Font.Name = "楷体_GB2312";
                        newWorksheet.UsedRange.Font.Name = "楷体_GB2312";
                        newWorkSheet1.UsedRange.Font.Name = "楷体_GB2312";

                        xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 3]).MergeCells = true;
                        xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
                        xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
                        xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        xSheet.get_Range(xSheet.Cells[3, 1], xSheet.Cells[3, 3]).Interior.ColorIndex = 45;
                        xSheet.get_Range(xSheet.Cells[4, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                        xSheet.get_Range(xSheet.Cells[4, 3], xSheet.Cells[xSheet.UsedRange.Rows.Count, 13]).NumberFormat = "0.0000_ ";

                        newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 14]).MergeCells = true;
                        newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                        newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                        newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        newWorksheet.get_Range(newWorksheet.Cells[3, 1], newWorksheet.Cells[3, 14]).Interior.ColorIndex = 45;
                        newWorksheet.get_Range(newWorksheet.Cells[4, 1], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                        newWorksheet.get_Range(newWorksheet.Cells[4, 3], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, 13]).NumberFormat = "0.0000_ ";

                        newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 15]).MergeCells = true;
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 1]).Font.Size = 20;
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 1]).Font.Name = "黑体";
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[3, 1], newWorkSheet1.Cells[3, 15]).Interior.ColorIndex = 45;
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[4, 1], newWorkSheet1.Cells[newWorkSheet1.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[4, 2], newWorkSheet1.Cells[newWorkSheet1.UsedRange.Rows.Count, 2]).Interior.ColorIndex = 6;
                        newWorkSheet1.get_Range(newWorkSheet1.Cells[4, 4], newWorkSheet1.Cells[newWorkSheet1.UsedRange.Rows.Count, 14]).NumberFormat = "0.0000_ ";
                        xSheet.Rows.AutoFit();
                        xSheet.Columns.AutoFit();
                        newWorksheet.Rows.AutoFit();
                        newWorksheet.Columns.AutoFit();
                        newWorkSheet1.Rows.AutoFit();
                        newWorkSheet1.Columns.AutoFit();
                        newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "短路计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);
                        System.Windows.Forms.Clipboard.Clear();
                        result1.Workbooks.Close();
                        result1.Quit();
                        result2.Workbooks.Close();
                        result2.Quit();
                    }


                    





                //    int ij = 1;
                //    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.txt"))
                //    {
                //    }
                //    else
                //    {
                //        return;
                //    }
                //    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\dlb.txt"))
                //    {
                //    }
                //    else
                //    {
                //        return;
                //    }
                //    FileStream dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\result.txt", FileMode.Open);
                //    StreamReader readLine = new StreamReader(dh);
                //    string strLine;
                //    string[] array1;

                //    FileStream dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\dlb.txt", FileMode.Open);
                //    StreamReader readLine2 = new StreamReader(dh2);
                //    string strLine2;
                //    string[] array2;
                //    char[] charSplit2 = new char[] { ' ' };
                //    strLine2 = readLine2.ReadLine();

                //    char[] charSplit = new char[] { ' ' };
                //    strLine = readLine.ReadLine();
                //    string output = null;
                //    array2 = strLine2.Split(charSplit2);
                //    output += ("支路电流结果报告" + "\r\n" + "\r\n");
                //    PSPDEV CR23 = new PSPDEV();
                //    CR23.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //    CR23.Number = Convert.ToInt32(array2[0]);
                //    CR23.Type = array2[1];
                //    double ib=0;
                //    double temp=0;
                //    CR23 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR23);
                //    XmlNodeList list = tlVectorControl1.SVGDocument.SelectNodes("svg/*[@flag='" + "1" + "']");
                //    foreach (XmlNode node in list)
                //    {
                //        SvgElement elementde = node as SvgElement;
                //        tlVectorControl1.SVGDocument.CurrentElement = elementde;
                //        tlVectorControl1.Delete();
                //    }

                //    output += ("短路点"+":"+" "+CR23.Name+"   "+"故障类型"+":"+ " "+array2[2] + "\r\n" + "\r\n");

                //    output += ("名称" + ","+"零序电流" + "," + "正序电流" + "," + "负序电流" + "," + "A相电流" + "," + "B相电流" + "," + "C相电流" + ","+"\r\n");
                //    while (strLine != null)
                //    {
                //        array1 = strLine.Split(charSplit);
                        
                //        string[] dev = new string[9];
                //        dev.Initialize();
                //        int i = 0;
                //        PSPDEV CR2 = new PSPDEV();
                //        CR2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //        foreach (string str in array1)
                //        {
                //            if (str != "")
                //            {
                //                if (str != "NaN")
                //                {
                //                    dev[i++] = Convert.ToDouble(str).ToString();
                //                }
                //                else
                //                {
                //                    dev[i++] = str;
                //                }

                //            }

                //        }

                //        CR2.Number = Convert.ToInt32(array2[0]);
                //        CR2.Type = array2[1];
                //        CR2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR2);
                //        string nodeName = CR2.Name;

                //        int vr = Convert.ToInt32(CR2.VoltR);
                //        string vrs = vr.ToString();
                //        int vrl = vrs.Length;
                //        vrs = vrs.Substring(0,1);
                //        vr = Convert.ToInt32(vrs);
                        

                //        switch (vr)
                //        {
                //            case 2:
                //                {
                //                    ib = 251.03;
                //                    for (int j = 3; j < 9; j++)
                //                    {
                //                        temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                        dev[j] = temp.ToString();
                //                    }
                //                    ib = Convert.ToDouble(dev[4]) * 3;
                //                    temp = 1.732 * ib * 230;

                //                }
                //                break;
                //            case 3:
                //                {
                //                    if (vrl == 3)
                //                    {
                //                        ib = 174.96;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                            dev[j] = temp.ToString();
                //                        }
                //                        ib = Convert.ToDouble(dev[4]) * 3;
                //                        temp = 1.732 * ib * 330;
                //                    }
                //                    else
                //                    {
                //                        ib = 1649.62;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                            dev[j] = temp.ToString();
                //                        }
                //                        ib = Convert.ToDouble(dev[4]) * 3;
                //                        temp = 1.732 * ib * 35;
                //                    }
                //                }
                //                break;
                //            case 1:
                //                {
                //                    if (vrl == 3)
                //                    {
                //                        ib = 524.88;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                            dev[j] = temp.ToString();
                //                        }
                //                        ib = Convert.ToDouble(dev[4]) * 3;
                //                        temp = 1.732 * ib * 110;
                //                    }
                //                    else
                //                    {
                //                        ib = 5498.74;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                            dev[j] = temp.ToString();
                //                        }
                //                        ib = Convert.ToDouble(dev[4]) * 3;
                //                        temp = 1.732 * ib * 10.5;
                //                    }

                //                }
                //                break;
                //            case 6:
                //                {
                //                    ib = 874.80;
                //                    for (int j = 3; j < 9; j++)
                //                    {
                //                        temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                        dev[j] = temp.ToString();
                //                    }
                //                    ib = Convert.ToDouble(dev[4]) * 3;
                //                    temp = 1.732 * ib * 66;

                //                }
                //                break;
                //            case 5:
                //                {
                //                    ib = 104.98;
                //                    for (int j = 3; j < 9; j++)
                //                    {
                //                        temp = Convert.ToDouble(dev[j]) * ib * 0.001;
                //                        dev[j] = temp.ToString();
                //                    }
                //                    ib = Convert.ToDouble(dev[4]) * 3;
                //                    temp = 1.732 * ib * 550;

                //                }
                //                break;
                //            default:
                //                { }
                //                break;
                //        }

                //PSPDEV pspDev = new PSPDEV();
                //pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[2]));
                //pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;

                //if (pspDev.Number==0 && Convert.ToInt32(n4.ToString())==0 && tuxing==2)    
                //{
                //    pspDev.Number = Convert.ToInt32(n11.ToString());
                //    pspDev.Type = "Use";
                //    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                //    XmlElement elementdl = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                    
                //    if (elementdl != null)
                //    {
                //        RectangleF bound = ((IGraph)elementdl).GetBounds();
                //        XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                //        n1.SetAttribute("x", Convert.ToString(bound.X));
                //        n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                //        n1.InnerText = (Convert.ToDouble(dev[4])*3).ToString("N4");
                //        n1.SetAttribute("layer", SvgDocument.currentLayer);
                //        n1.SetAttribute("flag", "1");
                //        tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                //        tlVectorControl1.Operation = ToolOperation.Select;
                //        tlVectorControl1.Refresh();
                //    }
                //}
                //pspDev.Number = Convert.ToInt32(Convert.ToDouble(dev[2]));
                //pspDev.Type = "Polyline";
                //pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                
                //if (pspDev != null && tuxing==2)
                //{
                //    XmlElement elementdl = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                //    if (pspDev.LineStatus == "运行")
                //    {
                //        if (elementdl != null)
                //        {
                //            PointF[] t = ((Polyline)elementdl).Points;

                //            PointF[] t2 = ((Polyline)elementdl).FirstTwoPoint;
                //            t = t2;
                //            PointF midt = new PointF((float)((t2[0].X + t2[1].X) / 2), (float)((t2[0].Y + t2[1].Y) / 2));
                //            float angel = 0f;
                //            angel = (float)(180 * Math.Atan2((t2[1].Y - t2[0].Y), (t2[1].X - t2[0].X)) / Math.PI);

                //            string l3 = Convert.ToString(midt.X);
                //            string l4 = Convert.ToString(midt.Y);

                //            string tran = ((Polyline)elementdl).Transform.ToString();

                //            PointF center = new PointF((float)(t[0].X + (t[1].X - t[0].X) / 2), (float)(t[0].Y + (t[1].Y - t[0].Y) / 2));
                //            XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                //            XmlElement n2dl = tlVectorControl1.SVGDocument.CreateElement("polyline") as Polyline;
                //            PointF pStart = new PointF(center.X + (float)(15 * Math.Sin((angel) * Math.PI / 180)), center.Y - (float)(15 * Math.Cos((angel) * Math.PI / 180)));
                //            PSPDEV psp = new PSPDEV();
                //            psp.FirstNode = pspDev.FirstNode;
                //            psp.LastNode = pspDev.LastNode;
                //            psp.SvgUID = pspDev.SvgUID;
                //            PSPDEV tempss = new PSPDEV();
                //            IList listParallel = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandFirstOrLastNode", psp);
                //            foreach (PSPDEV devP in listParallel)
                //            {
                //                if ((angel > 10 && angel < 90) || (angel < 0 && Math.Abs(angel) < 90) || (angel > 180 && angel < 350))
                //                {
                //                    if (((devP.X1) > (pspDev.X1)))
                //                    {
                //                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));

                //                    }
                //                }
                //                else if ((angel >= 0 && angel <= 10) || (angel >= 350 && angel <= 360) || (angel < 0 && Math.Abs(angel) <= 90))
                //                {
                //                    if (((devP.Y1) > (pspDev.Y1)))
                //                    {
                //                        pStart = new PointF(center.X - (float)(23 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(23 * Math.Cos((angel) * Math.PI / 180)));

                //                    }
                //                }
                //                else if ((angel < 0 && Math.Abs(angel) > 90) || (angel >= 90 && angel <= 180))
                //                {
                //                    if (((devP.Y1) > (pspDev.Y1)))
                //                    {
                //                        pStart = new PointF(center.X - (float)(7 * Math.Sin((angel) * Math.PI / 180)), center.Y + (float)(7 * Math.Cos((angel) * Math.PI / 180)));

                //                    }
                //                }
                //            }

                //            PointF newp1 = new PointF(t[0].X + (t[1].X - t[0].X) / 2 - (float)(15 * Math.Sin(angel)), t[0].Y + (t[1].Y - t[0].Y) / 2 - (float)(15 * Math.Cos(angel)));

                //            n1.SetAttribute("x", Convert.ToString(pStart.X));
                //            n1.SetAttribute("y", Convert.ToString(pStart.Y));

                //            if (Convert.ToDouble(dev[4]) >= 0)
                //            {
                //                n1.InnerText = (Math.Abs(Convert.ToDouble(dev[4]))).ToString("N4");
                //            }
                //            else
                //            {
                //                n1.InnerText = (Math.Abs(Convert.ToDouble(dev[4]))).ToString("N4");
                //            }
                //            n1.SetAttribute("layer", SvgDocument.currentLayer);
                //            n1.SetAttribute("flag", "1");

                //            if (Convert.ToDouble(dev[5]) == 1)
                //                n1.SetAttribute("stroke", "#FF0000");

                //            PointF p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 25) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 25) * Math.PI / 180)));
                //            PointF p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 335) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 335) * Math.PI / 180)));

                //            if (Convert.ToDouble(dev[3]) < 0)
                //            {
                //                p1 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 155) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 155) * Math.PI / 180)));
                //                p2 = new PointF(midt.X - (float)(10 * Math.Cos((angel + 205) * Math.PI / 180)), midt.Y - (float)(10 * Math.Sin((angel + 205) * Math.PI / 180)));
                //            }

                //            string l1 = Convert.ToString(p1.X);
                //            string l2 = Convert.ToString(p1.Y);
                //            string l5 = Convert.ToString(p2.X);
                //            string l6 = Convert.ToString(p2.Y);

                //            tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                //            tlVectorControl1.Operation = ToolOperation.Select;

                //            tlVectorControl1.SVGDocument.CurrentElement = n1 as SvgElement;

                //            RectangleF ttt = ((Polyline)elementdl).GetBounds();

                //            tlVectorControl1.RotateSelection(angel, pStart);
                //            if (Math.Abs(angel) > 90)
                //                tlVectorControl1.RotateSelection(180, pStart);
                //            PointF newp = new PointF(center.X + 10, center.Y + 10);

                //            tlVectorControl1.Refresh();
                //        }
                //    }                   
                //}
            
                //        if (ij == 1)
                //        {
                //            output += CR2.Name + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] +","+"\r\n";
                //        }
                //        else
                //        {
                //            CR2.Number = Convert.ToInt32(dev[2]);
                //            CR2.Type = "Polyline";
                //            CR2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", CR2);
                //            if (CR2 != null)
                //            {
                //                output += CR2.Name + ","+dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "\r\n";
                //            }
                //            else if (dev[2]=="500")
                //            {
                //                output += nodeName+"故障生成线路"+ ","+dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "\r\n";
                //            }

                //        } 
                //        ij = 0;
                //        strLine = readLine.ReadLine();
                        
                //    }
                //    readLine.Close();
                //    readLine2.Close();
                //    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
                //    {
                //        File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                //    }
                //    FileStream op = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
                //    StreamWriter str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                //    str1.Write(output);
                //    str1.Close();

                //    PSPDEV duanlutemp=new PSPDEV();
                //            duanlutemp.SvgUID=tlVectorControl1.SVGDocument.SvgdataUid;
                //            duanlutemp.Lable="母线节点";
                //            duanlutemp.Type="Use";
                //            IList dmount=Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType",duanlutemp);
                //            int fn=dmount.Count;
                //    int b=1;
                //    double[] devv3 = new double[fn+1];
                //    double[] devv4 = new double[fn+1];
                //    double[] devv2 = new double[fn+1];

                //    while (b <= fn)
                //    {
                //            n11 = n2 = b;
                //            n4 = 0;
                            

                //            charSplit = new char[] { ' ' };
                //            int tempbb = 1;
                //            dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\result.txt", FileMode.Open);
                //            readLine = new StreamReader(dh);
                //            strLine = readLine.ReadLine();
                          
                //            while (strLine != null)
                //            {
                //                array1 = strLine.Split(charSplit);

                //                string[] dev = new string[9];
                //                dev.Initialize();
                //                int i = 0;
                //                foreach (string str in array1)
                //                {
                //                    if (str != "")
                //                    {
                //                        if (str != "NaN")
                //                        {
                //                            dev[i++] = Convert.ToDouble(str).ToString();
                //                        }
                //                        else
                //                        {
                //                            dev[i++] = str;
                //                        }
                //                    }
                //                }
                                
                //                if (tempbb == 1)
                //                {
                //                    devv3[b] = Convert.ToDouble(Math.Abs(Convert.ToDouble(dev[4])))*3;
                //                    devv4[b] = Convert.ToDouble(dev[4]);
                //                    devv2[b] = Convert.ToDouble(dev[2]);
                //                    tempbb = tempbb - 1;
                //                }
                //                    strLine = readLine.ReadLine();
                //            }
                //            readLine.Close();
                //            str1.Close();
              
                //        b++;
                //    }
                //    string dlrdl = null;
                    
                //    dlrdl+=("短路电路简表结果报告"+"\r\n" + "\r\n");
                //    dlrdl += ("故障类型" + ":" + " " + array2[2] + "\r\n" + "\r\n");
                //    dlrdl += ("母线名" + "," + "短路电流(kA)" + "," + "短路容量(MVA)" + "," + "\r\n");
                //    for (int jj = 1; jj <= fn; jj++)
                //    {
                //        devv2[jj] = jj;
                        
                //        PSPDEV CR2 = new PSPDEV();
                //        CR2.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //        CR2.Lable = "母线节点";
                //        CR2.Type = "Use";
                //        CR2 = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandLableandType", CR2);
                //        IList list222 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", CR2);
                //        CR2=(PSPDEV)list222[jj-1];
                //        string nodeName = CR2.Name;
                //        int vr = Convert.ToInt32(CR2.VoltR);
                //        string vrs = vr.ToString();
                //        int vrl = vrs.Length;
                //        vrs = vrs.Substring(0, 1);
                //        vr = Convert.ToInt32(vrs);

                //        switch (vr)
                //        {
                //            case 2:
                //                {
                //                    ib = 251.03;
                //                        temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                        devv3[jj] = temp;
                //                    ib = Convert.ToDouble(devv3[jj]) ;
                //                    temp = 1.732 * ib * 230;

                //                }
                //                break;
                //            case 3:
                //                {
                //                    if (vrl == 3)
                //                    {
                //                        ib = 174.96;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                            devv3[jj] = temp;
                //                        }
                //                        ib = Convert.ToDouble(devv3[jj]) * 3;
                //                        temp = 1.732 * ib * 330;
                //                    }
                //                    else
                //                    {
                //                        ib = 1649.62;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                            devv3[jj] = temp;
                //                        }
                //                        ib = Convert.ToDouble(devv3[jj]) * 3;
                //                        temp = 1.732 * ib * 35;
                //                    }
                //                }
                //                break;
                //            case 1:
                //                {
                    //                    if (vrl == 3)
                //                    {
                //                        ib = 524.88;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                            devv3[jj] = temp;
                //                        }
                //                        ib = Convert.ToDouble(devv3[jj]) * 3;
                //                        temp = 1.732 * ib * 110;
                //                    }
                //                    else
                //                    {
                //                        ib = 5498.74;
                //                        for (int j = 3; j < 9; j++)
                //                        {
                //                            temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                            devv3[jj] = temp;
                //                        }
                //                        ib = Convert.ToDouble(devv3[jj]) * 3;
                //                        temp = 1.732 * ib * 10.5;
                //                    }

                //                }
                //                break;
                //            case 6:
                //                {
                //                    ib = 874.80;
                //                    for (int j = 3; j < 9; j++)
                //                    {
                //                        temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                        devv3[jj] = temp;
                //                    }
                //                    ib = Convert.ToDouble(devv3[jj]) * 3;
                //                    temp = 1.732 * ib * 66;

                //                }
                //                break;
                //            case 5:
                //                {
                //                    ib = 104.98;
                                    
                //                        temp = Convert.ToDouble(devv3[jj]) * ib * 0.001;
                //                        devv3[jj] = temp;
                                    
                //                    ib = Convert.ToDouble(devv3[jj]) ;
                //                    temp = 1.732 * ib * 550;

                //                }
                //                break;
                //            default:
                //                { }
                //                break;
                //        }

                //        PSPDEV pspDev = new PSPDEV();
                //        pspDev.Number = jj;
                //        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                //        pspDev.Type = "Use";
                //        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNumberAndSvgUIDAndType", pspDev);
                //        if (pspDev != null && tuxing==1)
                //        {
                //            XmlElement elementd2 = tlVectorControl1.SVGDocument.SelectSingleNode("svg/*[@id='" + pspDev.EleID + "']") as XmlElement;
                //            if (element != null)
                //            {
                //                RectangleF bound = ((IGraph)elementd2).GetBounds();
                //                XmlElement n1 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                //                XmlElement n2d2 = tlVectorControl1.SVGDocument.CreateElement("text") as Text;
                //                n1.SetAttribute("x", Convert.ToString(bound.X));
                //                n1.SetAttribute("y", Convert.ToString(bound.Y - 20));
                //                n1.InnerText = Convert.ToDouble(devv3[jj]).ToString("N4");
                //                n1.SetAttribute("layer", SvgDocument.currentLayer);                                
                //                n1.SetAttribute("flag", "1");                               
                                
                //                tlVectorControl1.SVGDocument.RootElement.AppendChild(n1);
                //                tlVectorControl1.Operation = ToolOperation.Select;
                //                tlVectorControl1.Refresh();
                //            }
                //        }
                //        dlrdl += CR2.Name + ","+ib.ToString() + "," + temp.ToString() + "," + "\r\n";                    
                //    }
                //    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\dlk.csv"))
                //    {
                //        File.Delete(System.Windows.Forms.Application.StartupPath + "\\dlk.csv");
                //    }

                //    FileStream VKdl = new FileStream((System.Windows.Forms.Application.StartupPath + "\\dlk.csv"), FileMode.OpenOrCreate);
                //    StreamWriter str11dl = new StreamWriter(VKdl, Encoding.GetEncoding("GB2312"));
                //    str11dl.Write(dlrdl);
                //    str11dl.Close();

                //    System.Windows.Forms.Clipboard.Clear();                  
                

                //            Excel.Application ex2 = new Excel.Application();
                //            ex2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");
                //            Excel.Worksheet xSheet2 = (Excel.Worksheet)ex2.Worksheets[1];
                //            ex2.Worksheets.Add(System.Reflection.Missing.Value, xSheet2, 1, System.Reflection.Missing.Value);
                        
                //            Excel.Application result11 = new Excel.Application();
                //            result11.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\dlk.csv");                          
                //            Excel.Worksheet tempSheet11 = (Excel.Worksheet)result11.Worksheets.get_Item(1);
                //            Excel.Worksheet newWorksheet11 = (Excel.Worksheet)ex2.Worksheets.get_Item(2);
                //            newWorksheet11.Name = "短路电流简表结果报告";
                //            xSheet2.Name = "支路电流结果报告";
                            
                //            if (baobiao==1)
                //            ex2.Visible = true;
                //            else
                //            ex2.DisplayAlerts = false;

                //            tempSheet11.Cells.Select();
                //            tempSheet11.Cells.Copy(System.Reflection.Missing.Value);
                //            newWorksheet11.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                //            xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 9]).MergeCells = true;
                //            xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 1]).Font.Size = 20;
                //            xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 1]).Font.Name = "黑体";
                //            xSheet2.get_Range(xSheet2.Cells[1, 1], xSheet2.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                //            xSheet2.get_Range(xSheet2.Cells[3, 1], xSheet2.Cells[3, 1]).Font.Name = "楷体_GB2312";
                //            xSheet2.get_Range(xSheet2.Cells[5, 1], xSheet2.Cells[5, 7]).Interior.ColorIndex = 45;
                //            xSheet2.get_Range(xSheet2.Cells[6, 1], xSheet2.Cells[xSheet2.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                //            xSheet2.get_Range(xSheet2.Cells[8, 2], xSheet2.Cells[xSheet2.UsedRange.Rows.Count, 9]).NumberFormat = "0.0000_ ";
                //            xSheet2.get_Range(xSheet2.Cells[5, 1], xSheet2.Cells[xSheet2.UsedRange.Rows.Count, 9]).Font.Name = "楷体_GB2312";

                //            newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 9]).MergeCells = true;
                //            newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 1]).Font.Size = 20;
                //            newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 1]).Font.Name = "黑体";
                //            newWorksheet11.get_Range(newWorksheet11.Cells[1, 1], newWorksheet11.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                //            newWorksheet11.get_Range(newWorksheet11.Cells[5, 1], newWorksheet11.Cells[5, 3]).Interior.ColorIndex = 45;
                //            newWorksheet11.get_Range(newWorksheet11.Cells[6, 1], newWorksheet11.Cells[newWorksheet11.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
                //            newWorksheet11.get_Range(newWorksheet11.Cells[6, 2], newWorksheet11.Cells[newWorksheet11.UsedRange.Rows.Count, 7]).NumberFormat = "   0.00000_ ";
                //            newWorksheet11.get_Range(newWorksheet11.Cells[3, 1], newWorksheet11.Cells[newWorksheet11.UsedRange.Rows.Count, 7]).Font.Name = "楷体_GB2312";

                //            result11.DisplayAlerts = false;
                            
                            
                           
                            
                //            //ex2.Save("DLresult.csv");
                            
                //            System.Windows.Forms.Clipboard.Clear();
                //            result11.Workbooks.Close();
                //            //ex2.Workbooks.Close();
                //            //ex2.Quit();
                //            result11.Quit();
                  

                      }
                      catch(Exception e1)
                      {
                      MessageBox.Show("短路数据有问题，请调整后再计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                      }
                }        
            }
            if (e.ClickedItem.Text == "所属变电站")
            {
                XmlElement element = tlVectorControl1.SVGDocument.CurrentElement;
                if (element is Use)
                {
                    if (element.GetAttribute("xlink:href").Contains("motherlinenode"))
                    {

                        string str_power = getPower(element.GetAttribute("xlink:href"));

                        PSPDEV pspDev = new PSPDEV();
                        pspDev.EleID = element.GetAttribute("id");
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                        BelonSubstationfrm dlg=new BelonSubstationfrm(pspDev);
                        dlg.Str_Power = str_power;
                        if (tlVectorControl1.SVGDocument.FileName.Length > 5)
                        {
                            dlg.Str_year = tlVectorControl1.SVGDocument.FileName.Substring(0, 4);
                        }
                        
                        if ((dlg.ShowDialog()) == DialogResult.OK)
                        {
                            pspDev.HuganLine1 = dlg.Name;
                        }
                        Services.BaseService.Update<PSPDEV>(pspDev);
                    }
                }
            }
            if (e.ClickedItem.Text == "添加断路器")
            { 
               XmlElement element = tlVectorControl1.SVGDocument.CurrentElement;
               if (element is Use)
               {
                   if (element.GetAttribute("xlink:href").Contains("motherlinenode"))
                   {

                       string str_power = getPower(element.GetAttribute("xlink:href"));

                       PSPDEV pspDev = new PSPDEV();
                       pspDev.EleID = element.GetAttribute("id");
                       pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                       pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVBySvgUIDandEleID", pspDev);
                       AddDlqiform dlqform = new AddDlqiform(pspDev);
                       if ((dlqform.ShowDialog())==DialogResult.OK)
                       {
                           PSPDEV psp = new PSPDEV();
                           psp.SUID = Guid.NewGuid().ToString();
                           psp.Name = dlqform.Name;
                           psp.EleID = pspDev.SUID;                 //对应母线节点的编号
                           psp.HuganTQ1 = Convert.ToDouble(dlqform.outI) ;      //额定电流
                           psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                           psp.Type = "Duanluqi";
                           psp.Lable = "断路器";
                           psp.HuganLine1 = dlqform.SubstationName;//所属变电站名
                           psp.HuganLine2 = dlqform.DlqiType;      //短路器类型
                           psp.HuganTQ2= Convert.ToDouble(dlqform.MinSwitchtime); //最短分闸时间
                           if (dlqform.DlqiZl=="")                           //断路器额定开断直流分量
                           {
                               psp.HuganTQ3=20.00;
                           }
                           else
                           {
                               psp.HuganTQ3=Convert.ToDouble(dlqform.DlqiZl);
                           }
                           psp.KSwitchStatus = dlqform.DlqiSwitch;      //断路器开断
                           Services.BaseService.Create<PSPDEV>(psp);
                           //添加属性
                       }
                   }
               }
            }
            if (e.ClickedItem.Text == "区域打印")
            {
                PrintHelper ph = new PrintHelper(tlVectorControl1, mapview);
                frmPrinter dlg = new frmPrinter();
                dlg.printHelper = ph;
                dlg.ShowDialog();
                return;
                ArrayList idlist = new ArrayList();
                ArrayList symlist = new ArrayList();

                SvgDocument _doc = new SvgDocument();

                Graph poly1 = tlVectorControl1.SVGDocument.CurrentElement as Graph;
                if (poly1 == null || poly1.GetAttribute("id") == "svg")
                {
                    return;
                }

                GraphicsPath gr1 = new GraphicsPath();
                gr1.AddPolygon(TLMath.getPolygonPoints(poly1));               
                gr1 = (GraphicsPath)poly1.GPath.Clone();
                gr1.Transform((poly1 as IGraph).Transform.Matrix);

                RectangleF ef1 = gr1.GetBounds();
                ef1 = PathFunc.GetBounds(gr1);
                StringBuilder svgtxt = new StringBuilder("<?xml version=\"1.0\" encoding=\"utf-8\"?><svg id=\"svg\" width=\"" + ef1.Width + "\" height=\"" + ef1.Height + "\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:itop=\"http://www.Itop.com/itop\">");

                XmlNodeList nlist = tlVectorControl1.SVGDocument.GetElementsByTagName("defs");
                if (nlist.Count > 0)
                {
                    XmlNode node = nlist[0];
                    svgtxt.AppendLine(node.OuterXml);
                }
                SvgElementCollection.ISvgElementEnumerator enumerator1 = tlVectorControl1.DrawArea.ElementList.GetEnumerator();// mouseAreaControl.PicturePanel.ElementList.GetEnumerator();
                while (enumerator1.MoveNext())
                {
                    IGraph graph1 = (IGraph)enumerator1.Current;

                    GraphicsPath path1 = (GraphicsPath)graph1.GPath.Clone();                  
                    if (!graph1.Visible || !graph1.DrawVisible || !graph1.Layer.Visible) continue;

                    GraphicsPath path2 = (GraphicsPath)graph1.GPath.Clone();
                    path2.Transform(graph1.Transform.Matrix);
                    RectangleF ef2 = PathFunc.GetBounds(path2);

                    if (ef1.Contains(ef2) || RectangleF.Intersect(ef1, ef2) != RectangleF.Empty)
                    {
                        SvgElement ele = (SvgElement)graph1;
                        svgtxt.AppendLine(ele.OuterXml);
                        if (graph1 is Use)
                        {                          
                            string symid = ((XmlElement)graph1).GetAttribute("xlink:href");
                            if (!symlist.Contains(symid))
                            {
                                symlist.Add(symid);
                            }
                        }
                        if (graph1.GetType().FullName == "ItopVector.Core.Figure.Polyline")
                        {
                            string IsLead = ((XmlElement)graph1).GetAttribute("IsLead");
                            if (IsLead != "")
                            {
                                if (ef1.Contains(ef2))
                                {
                                    idlist.Add(graph1.ID);
                                }
                            }
                        }
                    }
                    
                }
                //symlist = ResetList(symlist);
                svgtxt.AppendLine("</svg>");
                _doc.LoadXml(svgtxt.ToString());
                _doc.SvgdataUid = tlVectorControl1.SVGDocument.SvgdataUid;
                frmPrintF pri = new frmPrintF();
                pri.Init(tlVectorControl1.SVGDocument.CurrentElement.ID, tlVectorControl1.SVGDocument.SvgdataUid);
                if (pri.ShowDialog() == DialogResult.OK)
                {
                    frmSubPrint s = new frmSubPrint();
                    s.Vector = tlVectorControl1;
                    s.InitImg(pri.strzt, pri.strgs, pri.pri, idlist, symlist);
                    s.Open(_doc, ef1);
                    s.Show();
                }
            }


            if (e.ClickedItem.Text == "属性")
            {
                elementProperty();         
            }
            tlVectorControl1.Operation = ToolOperation.Select;
            //contextMenuStrip1.Hide();
        }
        private List<int> DelLinenum = new List<int>();      //记录要进行断开的线路编号
        private List<int> DelTransnum = new List<int>();      //记录断开的变压器线路编号
        private bool Operateflag = false;                    //进行区域选择操作标志
       private void WebCalAndPrint()            //网络N-1计算和输出
       {
           FileStream dh;
           StreamReader readLine;
           // StreamReader readLine;
           ArrayList list = new ArrayList();   //用来记录线路不能解裂的位数
           char[] charSplit;
           string strLine;
           string[] array1;
           string outputZL = null;   //记录直流计算结果 线路功率和节点电压
           //string outputBC = null;   //记录补偿计算结果 节点电压
           string[] array2;

           string strLine2;

           char[] charSplit2 = new char[] { ' ' };
           List<lineclass> Overlinp = new List<lineclass>();
           List<lineclass> OverVp = new List<lineclass>();
           //Dictionary<int, List<lineclass>> OverPhege = new Dictionary<int, List<lineclass>>();       //为 线路功率的检验 键值为断开线路的编号，值为第几条线路出现了不合格
           //Dictionary<int, List<lineclass>> OverVhege = new Dictionary<int, List<lineclass>>();       //为 节点电压的检验 键值为断开线路的编号，值为第几个节点出现了不合格
           FileStream op;
           StreamWriter str1;
           FileStream dh2;
           StreamReader readLine2;
           Excel.Application ex;
           //Excel.Worksheet xSheet;
           Excel.Application result1;
           //Excel.Worksheet tempSheet;
           Excel.Worksheet newWorksheet;
           WebN1 webn1 = new WebN1();
           webn1.ShowDialog();
           if (webn1.DialogResult == DialogResult.OK)    //进行全网计算
           {
               if (!CheckN())
               {
                   return;
               }

               try
               {
                   string datatime = System.DateTime.Now.ToString();
                   System.Windows.Forms.Clipboard.Clear(); //去掉剪切板中的数据
                   for (int i = 1; i <= brchcount + transcount; i++)
                   {
                       n1NL_DLL.ZYZ nl = new n1NL_DLL.ZYZ();
                       nl.jianyan(i);
                   }
                   //int* busnumber;

                   //N1Test.NBcal kk = new N1Test.NBcal();
                   //busnumber = kk.Show_Reliability();
                   if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "可靠性计算结果.xls"))
                   {
                       File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "可靠性计算结果.xls");
                       //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                   }

                   double yinzi = 0, capability = 0, volt = 0, current = 0, standvolt = 0, Rad_to_Deg = 57.29577951;
                   PSPDEV benchmark = new PSPDEV();
                   benchmark.Type = "power";
                   benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                   IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                   if (list3 == null)
                   {
                       MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                       return;
                   }
                   foreach (PSPDEV dev in list3)
                   {
                       yinzi = Convert.ToDouble(dev.PowerFactor);
                       capability = Convert.ToDouble(dev.StandardCurrent);
                       volt = Convert.ToDouble(dev.StandardVolt);
                       standvolt = volt;
                       TLPSPVmin = dev.iV;
                       TLPSPVmax = dev.jV;
                       if (dev.PowerFactor == 0)
                       {
                           yinzi = 1;
                       }
                       if (dev.StandardCurrent == 0)
                       {
                           capability = 1;
                       }
                       if (dev.StandardVolt == 0)
                       {
                           volt = 1;
                           standvolt = 1;
                       }
                       current = capability / (Math.Sqrt(3) * volt);
                       
                   }
                   capability = 100;
                   PSPDEV ct = new PSPDEV();
                   ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                   ct.Type = "Use";
                   IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                   if (buscount < cont.Count)
                   {
                       MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);

                       return;

                   }
                   if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\VandTheta.txt"))
                   {
                   }
                   else
                   {
                       MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                       return;
                   }
                   if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\lineP.txt"))
                   {
                   }
                   else
                   {
                       return;
                   }
                   dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "lineP.txt", FileMode.Open);
                   dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "VandTheta.txt", FileMode.Open);
                   readLine2 = new StreamReader(dh2);
                   readLine = new StreamReader(dh);
                   charSplit = new char[] { ' ' };
                   //strLine = readLine.ReadLine();

                   outputZL = null;
                   //outputBC=null;                    
                   outputZL += ("全网可靠性结果报表" + "\r\n");
                   outputZL += ("开断支路名称" + "," + "剩余网络线路功率Pij和Pji的有名值" + ",,");
                   for (int i = 0; i < brchcount - 1; i++)
                   {
                       outputZL += (",,");
                   }
                   outputZL += ("是否越限" + "," + "\r\n");
                   outputZL += ",";
                   int n = 0; //记录线路的行数

                   while ((strLine = readLine.ReadLine()) != null)
                   {
                       array1 = strLine.Split(charSplit);

                       string[] devzl = new string[3 * brchcount + 1];

                       devzl.Initialize();
                       int i = 0;

                       n++;
                       foreach (string str in array1)
                       {
                           if (str != "")
                           {

                               devzl[i++] = str.ToString();

                           }
                       }
                       for (int j = 0; j < brchcount; j++)
                       {
                           outputZL += devzl[3 * j + 1] + "," + ",";
                       }
                       outputZL += ("," + "\r\n");
                       outputZL += devzl[0] + ",";
                       bool lineflag = true;      //只要有一个不合格则就为不合格
                       if (devzl[1] != "-1")
                       {
                           for (int j = 0; j < brchcount; j++)
                           {

                               double pij = Convert.ToDouble(devzl[j * 3 + 2].Substring(0, devzl[j * 3 + 2].IndexOf('j') - 1)) * capability;
                               double qij = Convert.ToDouble(devzl[j * 3 + 2].Substring(devzl[j * 3 + 2].IndexOf('j') + 1)) * capability;
                               double pji = Convert.ToDouble(devzl[j * 3 + 3].Substring(0, devzl[j * 3 + 3].IndexOf('j') - 1)) * capability;
                               double qji = Convert.ToDouble(devzl[j * 3 + 3].Substring(devzl[j * 3 + 3].IndexOf('j') + 1)) * capability;
                               double Sij = System.Math.Sqrt(pij * pij + qij * qij);
                               double Sji = System.Math.Sqrt(pji * pji + qji * qji);
                               double maxSij = (Sij > Sji) ? Sij : Sji;
                               PSPDEV psp = new PSPDEV();

                               psp.Name = devzl[j * 3 + 1];
                               psp.Type = "Polyline";
                               psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                               IList listName = Services.BaseService.GetList("SelectPSPDEVByName", psp);
                               PSPDEV pspline = (PSPDEV)listName[0];
                               double voltR = pspline.VoltR;
                               //WireCategory wirewire = new WireCategory();
                               //wirewire.WireType = pspline.LineType;
                               
                               if (pspline.LineType==null||pspline.LineType=="")
                               {
                                   MessageBox.Show(pspline.Name + "的线路类型没有输入，无法进行可靠性检验", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                   return;
                               }
                               //WireCategory listware = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                               //IList list2 = Services.BaseService.GetList("SelectWireCategoryByKey", wirewire);
                               //WireCategory listware = (WireCategory)list2[0];
                               double Ichange = (double)pspline.LineChange;
                               double linXij = System.Math.Sqrt(3) * voltR * Ichange / 1000;
                               outputZL += "'" + youming(devzl[j * 3 + 2],capability) + "," + "'" + youming(devzl[j * 3 + 3],capability) + ",";
                               if (maxSij >= linXij)
                               {
                                   lineflag = false;
                                   lineclass _line = new lineclass(n, j);
                                   Overlinp.Add(_line);
                                  // OverPhege[n] = j;
                               }

                           }
                           if (!lineflag)
                           {
                               outputZL += "不合格";
                           }
                           else
                               outputZL += "合格";
                       }
                       else
                       {
                           outputZL += "该线路不可断。";
                       }
                       //OverPhege[n] = Overlinp;
                       //Overlinp.Clear();
                       outputZL += "\r\n";
                       while ((strLine = readLine.ReadLine()) != null)
                       {
                           array1 = strLine.Split(charSplit);

                           string[] devzl1 = new string[3 * brchcount + 1];

                           devzl1.Initialize();

                           n++;
                           i = 0;
                           foreach (string str in array1)
                           {
                               if (str != "")
                               {

                                   devzl1[i++] = str.ToString();

                               }
                           }
                           if (devzl1[1] != "-1")
                           {
                               outputZL += devzl1[0] + ",";
                               for (int j = 0; j < brchcount; j++)
                               {
                                   double pij = Convert.ToDouble(devzl1[j * 3 + 2].Substring(0, devzl1[j * 3 + 2].IndexOf('j') - 1)) * capability;
                                   double qij = Convert.ToDouble(devzl1[j * 3 + 2].Substring(devzl1[j * 3 + 2].IndexOf('j') + 1)) * capability;
                                   double pji = Convert.ToDouble(devzl1[j * 3 + 3].Substring(0, devzl1[j * 3 + 3].IndexOf('j') - 1)) * capability;
                                   double qji = Convert.ToDouble(devzl1[j * 3 + 3].Substring(devzl1[j * 3 + 3].IndexOf('j') + 1)) * capability;
                                   double Sij = System.Math.Sqrt(pij * pij + qij * qij);
                                   double Sji = System.Math.Sqrt(pji * pji + qji * qji);
                                   double maxSij = (Sij > Sji) ? Sij : Sji;
                                   PSPDEV psp = new PSPDEV();

                                   psp.Name = devzl1[j * 3 + 1];
                                   psp.Type = "Polyline";
                                   psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                   IList listName = Services.BaseService.GetList("SelectPSPDEVByName", psp);
                                   PSPDEV pspline = (PSPDEV)listName[0];
                                   double voltR = pspline.VoltR;
                                   //WireCategory wirewire = new WireCategory();
                                   //wirewire.WireType = pspline.LineType;

                                   if (pspline.LineType == null || pspline.LineType == "")
                                   {
                                       MessageBox.Show(pspline.Name + "的线路类型没有输入，无法进行可靠性检验", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                       return;
                                   }
                                   //WireCategory listware = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                                   //IList list2 = Services.BaseService.GetList("SelectWireCategoryByKey", wirewire);
                                   //WireCategory listware = (WireCategory)list2[0];
                                   double Ichange = (double)pspline.LineChange;
                                   double linXij = System.Math.Sqrt(3) * voltR * Ichange / 1000;
                                   // outputZL += "'" + devzl[j * 3 + 2] + "," + "'" + devzl[j * 3 + 3] + ",";
                                   if (maxSij >= linXij)
                                   {
                                       lineflag = false;
                                       lineclass subline = new lineclass(n, j);
                                       Overlinp.Add(subline);
                                       //OverPhege[n] = j;
                                   }
                                   outputZL += "'" + youming(devzl1[j * 3 + 2],capability) + "," + "'" + youming(devzl1[j * 3 + 3],capability) + ",";    //在此还可以判断线路是否超载

                               }
                               if (!lineflag)
                               {
                                   outputZL += "不合格";
                               }
                               else
                                   outputZL += "合格";
                               outputZL += "\r\n";
                               //OverPhege[n] = Overlinp;
                               //Overlinp.Clear();

                           }

                           else
                           {
                               list.Add(n);
                               outputZL += devzl1[0] + "," + "为不可断裂的线路";
                               outputZL += "\r\n";
                           }

                       }
                   }
                   outputZL += "注释：红色为线路超载" + "\r\n";
                   outputZL += "操作时间为：" + datatime;
                   outputZL += "\r\n";
                   outputZL += "单位：kA\\kV\\MW\\Mvar" + "\r\n";
                   readLine.Close();
                   if (File.Exists("result1.csv"))
                   {
                       File.Delete("result1.csv");
                   }

                   op = new FileStream("result1.csv", FileMode.OpenOrCreate);
                   str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                   str1.Write(outputZL);
                   str1.Close();

                   outputZL = null;
                   //将各个节点的电压写入其中
                   // strLine2 = readLine2.ReadLine();
                   n = 0;
                   bool busvflag1 = true;
                   outputZL += ("网络节点电压和相角" + "\r\n");
                   outputZL += ("开断支路名称" + "," + "节点电压的幅值和相角的有名值" );
                   for (int i = 0; i < buscount; i++)
                   {
                       outputZL += (",,");
                   }
                   outputZL += ("是否越限" + "," + "\r\n");
                   outputZL += ",";
                   while ((strLine2 = readLine2.ReadLine()) != null)
                   {
                       array2 = strLine2.Split(charSplit);

                       string[] devzl = new string[buscount * 3 + 1];

                       devzl.Initialize();
                       int i = 0;

                       n++;
                       foreach (string str in array2)
                       {
                           if (str != "")
                           {

                               devzl[i++] = str.ToString();

                           }
                       }
                       if (devzl[1] != "-1")
                       {
                           for (int j = 0; j < buscount; j++)
                           {
                               outputZL += devzl[3 * j + 1] + "," + ",";
                           }
                           
                           outputZL += ("," + "\r\n");
                           outputZL += devzl[0] + ",";
                           for (int j = 0; j < buscount; j++)
                           {
                               PSPDEV pspDev = new PSPDEV();
                               pspDev.Name = devzl[3 * j + 1];
                               pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                               pspDev.Type = "Use";
                               pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);
                               if (pspDev != null && pspDev.ReferenceVolt != 0)
                               {
                                   volt = pspDev.ReferenceVolt;
                               }
                               else
                                   volt = standvolt;
                               outputZL += "'" + (Convert.ToDouble(devzl[j * 3 + 2]) * volt).ToString() + "," + "'" + devzl[j * 3 + 3] + ",";
                               if (Convert.ToDouble(devzl[j * 3 + 2]) >= TLPSPVmin || Convert.ToDouble(devzl[j * 3 + 2]) <= TLPSPVmax)
                               {
                                   busvflag1 = false;
                                   lineclass _vtheta = new lineclass(n, j);
                                   OverVp.Add(_vtheta);
                                   //OverVhege[n] = j;
                               }
                           }
                           if (busvflag1)
                           {
                               outputZL += "合格";
                           }
                           else
                           {
                               outputZL += "不合格";
                           }
                       }
                       else
                       {
                           outputZL += "不可断裂";
                       }
                       //OverVhege[n] = OverVp;
                       //OverVp.Clear();
                       outputZL += "\r\n";

                       while ((strLine2 = readLine2.ReadLine()) != null)
                       {
                           busvflag1 = true;
                           array2 = strLine2.Split(charSplit);

                           string[] devzl1 = new string[buscount * 3 + 1];

                           devzl1.Initialize();

                           n++;
                           i = 0;
                           foreach (string str in array2)
                           {
                               if (str != "")
                               {

                                   devzl1[i++] = str.ToString();

                               }
                           }
                           if (devzl1[1] != "-1")
                           {
                               outputZL += devzl1[0] + ",";
                               for (int j = 0; j < buscount; j++)
                               {
                                   PSPDEV pspDev = new PSPDEV();
                                   pspDev.Name = devzl1[3 * j + 1];
                                   pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                   pspDev.Type = "Use";
                                   pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);
                                   if (pspDev != null && pspDev.ReferenceVolt != 0)
                                   {
                                       volt = pspDev.ReferenceVolt;
                                   }
                                   else
                                       volt = standvolt;
                                   outputZL += "'" + (Convert.ToDouble(devzl1[j * 3 + 2]) * volt).ToString() + "," + "'" + devzl1[j * 3 + 3] + ",";   //在此还可以判断线路是否超载,如果超载加入一个标记,在excel里使其变为红色

                                   if (Convert.ToDouble(devzl1[j * 3 + 2]) >= TLPSPVmax|| Convert.ToDouble(devzl1[j * 3 + 2]) <= TLPSPVmin)
                                   {
                                       lineclass vtheta = new lineclass(n, j);
                                       busvflag1 = false;
                                       OverVp.Add(vtheta);
                                       //OverVhege[n] = j;
                                   }
                               }
                               if (busvflag1)
                               {
                                   outputZL += "合格";
                               }
                               else
                                   outputZL += "不合格";
                               outputZL += "\r\n";
                               //OverPhege[n] = OverVp;
                               //OverVp.Clear();
                           }
                           else
                           {
                               // list.Add(n);
                               outputZL += devzl1[0] + "," + "为不可断裂的线路" + ",,,,,,";
                               outputZL += "\r\n";
                           }

                       }
                   }
                   outputZL += "注释：红色为节点电压超载" + "\r\n";
                   outputZL += "节点电压合格范围为电压基准值的上下限，分别为"+TLPSPVmax+"和"+TLPSPVmin+"倍" + "\r\n";
                   outputZL += "操作时间为：" + datatime + "\r\n";
                   outputZL += "单位：kA\\kV\\MW\\Mvar" + "\r\n";
                   readLine2.Close();


                   //op = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "reli.txt", FileMode.OpenOrCreate);
                   //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                   //str1.Write(outputZL);
                   //str1.Close();


                   if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + "result2.csv"))
                   {
                       File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + "result2.csv");
                   }

                   op = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "result2.csv", FileMode.OpenOrCreate);
                   str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                   str1.Write(outputZL);
                   str1.Close();

                   result1 = new Excel.Application();
                   result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\" + "result1.csv");
                   newWorksheet = (Excel.Worksheet)result1.Worksheets[1];
                   result1.Worksheets.Add(System.Reflection.Missing.Value, newWorksheet, 1, System.Reflection.Missing.Value);

                   Excel.Application result2 = new Excel.Application();
                   result2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
                   Excel.Worksheet tempSheet = (Excel.Worksheet)result2.Worksheets.get_Item(1);
                   Excel.Worksheet newWorksheet1 = (Excel.Worksheet)result1.Worksheets.get_Item(2);
                   newWorksheet.Name = "一般线路可靠性";
                   newWorksheet1.Name = "节点电压可靠性";
                   result1.Visible = true;


                   tempSheet.Cells.Select();
                   tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                   newWorksheet1.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                   newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 2*brchcount + 2]).MergeCells = true;
                   newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                   newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                   newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                   newWorksheet.get_Range(newWorksheet.Cells[2, 1], newWorksheet.Cells[3, 1]).MergeCells = true;
                   newWorksheet.get_Range(newWorksheet.Cells[2, 2], newWorksheet.Cells[2, 2 * brchcount + 1]).MergeCells = true;
                   newWorksheet.get_Range(newWorksheet.Cells[2, 2], newWorksheet.Cells[2, 2]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                   newWorksheet.get_Range(newWorksheet.Cells[2, 2 * brchcount + 2], newWorksheet.Cells[3, 2 * brchcount + 2]).MergeCells = true;
                   for (int i = 0; i < brchcount; i++)
                   {
                       newWorksheet.get_Range(newWorksheet.Cells[3, 2 * i + 2], newWorksheet.Cells[3, 2 * i + 3]).MergeCells = true;
                       newWorksheet.get_Range(newWorksheet.Cells[3, 2 * i + 2], newWorksheet.Cells[3, 2 * i + 3]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                   }
                   // newWorksheet.get_Range(newWorksheet.Cells[4, 2], newWorksheet.Cells[4, brchcount + 1]).Interior.ColorIndex = 45;
                   newWorksheet.get_Range(newWorksheet.Cells[4, 1], newWorksheet.Cells[3 + brchcount + transcount, 1]).Interior.ColorIndex = 6;
                   //newWorksheet.get_Range(newWorksheet.Cells[5, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, brchcount + 1]).NumberFormat = "0.0000_ ";
                   newWorksheet.get_Range(newWorksheet.Cells[4, 2], newWorksheet.Cells[3 + brchcount + transcount, 2 * brchcount + 1]).NumberFormat = "@";
                   newWorksheet.get_Range(newWorksheet.Cells[2, 1], newWorksheet.Cells[6 + brchcount + transcount, 2 * brchcount + 2]).Font.Name = "楷体_GB2312";
                  //在此处将其不合格的数据显示出来
                   //foreach (KeyValuePair<int, List<lineclass>> kvp in OverPhege)
                   //{
                       for (int i = 0; i < Overlinp.Count;i++ )
                       {
                           newWorksheet.get_Range(newWorksheet.Cells[3 + Overlinp[i].row, 2 * Overlinp[i].linenum + 2], newWorksheet.Cells[3 + Overlinp[i].row, 2 * Overlinp[i].linenum + 3]).Interior.ColorIndex = 3;
                       }
                       
                   //}
                   //补偿法中的数据处理过程

                   newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 2 * buscount + 2]).MergeCells = true;
                   newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 1]).Font.Size = 20;
                   newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 1]).Font.Name = "黑体";
                   newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                   newWorksheet1.get_Range(newWorksheet1.Cells[2, 2], newWorksheet1.Cells[2, 2]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                   newWorksheet1.get_Range(newWorksheet1.Cells[2, 1], newWorksheet1.Cells[3, 1]).MergeCells = true;  //补偿法中前面开断合并
                   newWorksheet1.get_Range(newWorksheet1.Cells[2, 2], newWorksheet1.Cells[2, 2 * buscount + 1]).MergeCells = true;
                   newWorksheet1.get_Range(newWorksheet1.Cells[2,2 * buscount + 2], newWorksheet1.Cells[3,2 * buscount + 2]).MergeCells = true;   //合格合并
                   newWorksheet1.get_Range(newWorksheet1.Cells[4, 1], newWorksheet1.Cells[4 + brchcount + transcount-1, 1]).Interior.ColorIndex = 6;
                   for (int i = 0; i < buscount; i++)
                   {
                       newWorksheet1.get_Range(newWorksheet1.Cells[3, 2 * i + 2], newWorksheet1.Cells[3, 2 * i + 3]).MergeCells = true;
                       newWorksheet1.get_Range(newWorksheet1.Cells[3, 2 * i + 2], newWorksheet1.Cells[3, 2 * i + 3]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                   }
                   //newWorksheet1.get_Range(newWorksheet1.Cells[7 + brchcount, 2], newWorksheet1.Cells[7 + brchcount, brchcount + 1]).Interior.ColorIndex = 45;
                   //newWorksheet1.get_Range(newWorksheet1.Cells[8 + brchcount, 1], newWorksheet1.Cells[8 + 2 * brchcount, 1]).Interior.ColorIndex = 6;
                   //newWorksheet1.get_Range(newWorksheet1.Cells[5, 2], newWorksheet1.Cells[newWorksheet1.UsedRange.Rows.Count, brchcount + 1]).NumberFormat = "0.0000_ ";
                   newWorksheet1.get_Range(newWorksheet1.Cells[4, 2], newWorksheet1.Cells[4 + brchcount +transcount, 2 * buscount + 1]).NumberFormat = "@";
                   newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[6+ brchcount + transcount+1, 2 * buscount + 2]).Font.Name = "楷体_GB2312";
                   //foreach (KeyValuePair<int, int> kvp in OverVhege)
                   //{
                   for (int i = 0; i < OverVp.Count;i++ )
                   {
                       newWorksheet1.get_Range(newWorksheet1.Cells[3 + OverVp[i].row, 2 * OverVp[i].linenum + 2], newWorksheet1.Cells[3 + OverVp[i].row, 2 * OverVp[i].linenum + 3]).Interior.ColorIndex = 3;

                   }
                   newWorksheet.Rows.AutoFit();
                   newWorksheet.Columns.AutoFit();
                   newWorksheet1.Rows.AutoFit();
                   newWorksheet1.Columns.AutoFit();

                   //}
                   //补偿法中的数据处理过程
                   newWorksheet1.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "可靠性计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);
                  
                   result1.Workbooks.Close();
                   result1.Quit();
                   System.Windows.Forms.Clipboard.Clear(); //去掉剪切板中的数据
                   ex = new Excel.Application();
                   ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "可靠性计算结果.xls");
                   ex.Visible = true;

               }
               catch (System.Exception e1)
               {
                   MessageBox.Show("请进行潮流计算后再查看结果！"+e1.ToString(), "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
               }
           }
           if (webn1.DialogResult == DialogResult.Ignore)
           {
               PSPDEV pspDEV = new PSPDEV();
               pspDEV.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
               PartRelform selregion = new PartRelform(pspDEV);
               selregion.ShowDialog();
               if (selregion.DialogResult == DialogResult.OK)
               {
                   MessageBox.Show("点击确定后，按下鼠标左键圈选区域，然后点击鼠标右键进行计算。", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                   Operateflag = true;
                   tlVectorControl1.CurrentOperation = ToolOperation.Select;
                   //MessageBox.Show("kankankanakna");
                   tlVectorControl1.CurrentOperation = ToolOperation.AreaSelect;

               }
               if (selregion.DialogResult==DialogResult.Ignore)
               {
                   DelLinenum = selregion.lineVnumlist;
                   //DelTransnum = null;
                   QyRelanalyst();
               }
               //IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUID", psp);
               //将进行潮流计算的文档传到选择网络中。
               else if (selregion.DialogResult==DialogResult.Yes)
               {
                   DelLinenum = selregion.lineDnumlist;
                   DelTransnum = selregion.lineVnumlist;
                   //DelTransnum = null;
                   QyRelanalyst();
               }
           }
           //Operateflag = false;
 }
        //选择区域后进行网络N-1检验
        private void QyRelanalyst()
        {
            FileStream dh;
            StreamReader readLine;
            // StreamReader readLine;
            ArrayList list = new ArrayList();   //用来记录线路不能解裂的位数
            List<lineclass> Overlinp = new List<lineclass>();
            List<lineclass> OverVp = new List<lineclass>();
            //Dictionary<int, int> OverPhege = new Dictionary<int, int>();       //为 线路功率的检验 键值为断开线路的编号，值为第几条线路出现了不合格
            //Dictionary<int, int> OverVhege = new Dictionary<int, int>();       //为 节点电压的检验 键值为断开线路的编号，值为第几个节点出现了不合格
            char[] charSplit;
            string strLine;
            string[] array1;
            string outputZL = null;   //记录直流计算结果 线路功率和节点电压
            //string outputBC = null;   //记录补偿计算结果 节点电压
            string[] array2;

            string strLine2;

            char[] charSplit2 = new char[] { ' ' };
            FileStream op;
            StreamWriter str1;
            FileStream dh2;
            StreamReader readLine2;
            Excel.Application ex;
            //Excel.Worksheet xSheet;
            Excel.Application result1;
            //Excel.Worksheet tempSheet;
            Excel.Worksheet newWorksheet;
                if (!CheckN())
                {
                    return;
                }

                try
                {
                    string datatime = System.DateTime.Now.ToString();
                    System.Windows.Forms.Clipboard.Clear(); //去掉剪切板中的数据
                    int linenum = DelLinenum.Count + DelTransnum.Count;
                    for (int i = 1; i <=DelLinenum.Count;i++ ) //此处进行所选的一般线路N-1
                    {
                        n1NL_DLL.ZYZ nl = new n1NL_DLL.ZYZ();
                        nl.jianyan(DelLinenum[i-1]);
                    }
                    for (int i = 1; i <= DelTransnum.Count; i++) //此处进行所选的变压器线路N-1
                    {
                        n1NL_DLL.ZYZ nl = new n1NL_DLL.ZYZ();
                        nl.jianyan(DelTransnum[i-1]);
                    }

                    //int* busnumber;

                    //N1Test.NBcal kk = new N1Test.NBcal();
                    //busnumber = kk.Show_Reliability();
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "部分线路可靠性计算结果.xls"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "部分线路可靠性计算结果.xls");
                        //OpenRead(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + ".xls");
                    }

                    double yinzi = 0, capability = 0, volt = 0, current = 0, standvolt = 0, Rad_to_Deg = 57.29577951;
                    PSPDEV benchmark = new PSPDEV();
                    benchmark.Type = "power";
                    benchmark.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", benchmark);
                    if (list3 == null)
                    {
                        MessageBox.Show("请设置基准后再进行计算!", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    foreach (PSPDEV dev in list3)
                    {
                        yinzi = Convert.ToDouble(dev.PowerFactor);
                        capability = Convert.ToDouble(dev.StandardCurrent);
                        volt = Convert.ToDouble(dev.StandardVolt);
                        standvolt = volt;
                        TLPSPVmin = dev.iV;
                        TLPSPVmax = dev.jV;
                        if (dev.PowerFactor == 0)
                        {
                            yinzi = 1;
                        }
                        if (dev.StandardCurrent == 0)
                        {
                            capability = 1;
                        }
                        if (dev.StandardVolt == 0)
                        {
                            volt = 1;
                            standvolt = 1;
                        }
                        current = capability / (Math.Sqrt(3) * volt);
                        

                    }
                    capability = 100;
                    PSPDEV ct = new PSPDEV();
                    ct.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    ct.Type = "Use";
                    IList cont = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", ct);
                    if (buscount < cont.Count)
                    {
                        MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        return;

                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\VandTheta.txt"))
                    {
                    }
                    else
                    {
                        MessageBox.Show("数据不收敛，请调整参数后重新计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\lineP.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }
                    dh = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "lineP.txt", FileMode.Open);
                    dh2 = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "VandTheta.txt", FileMode.Open);
                    readLine2 = new StreamReader(dh2);
                    readLine = new StreamReader(dh);
                    charSplit = new char[] { ' ' };
                    //strLine = readLine.ReadLine();

                    outputZL = null;
                    //outputBC=null;                    
                    outputZL += ("部分网可靠性结果报表" + "\r\n" );
                    outputZL += ("开断支路" + "," + "剩余网络线路功率Pij和Pji的有名值" + ",,");
                    for (int i = 0; i < brchcount - 1; i++)
                    {
                        outputZL += (",,");
                    }
                    outputZL += ("是否越限" + "," + "\r\n");
                    outputZL += ",";
                    int n = 0; //记录线路的行数

                    while ((strLine = readLine.ReadLine()) != null)
                    {
                        array1 = strLine.Split(charSplit);

                        string[] devzl = new string[3 * brchcount + 1];

                        devzl.Initialize();
                        int i = 0;

                        n++;
                        foreach (string str in array1)
                        {
                            if (str != "")
                            {

                                devzl[i++] = str.ToString();

                            }
                        }
                        for (int j = 0; j < brchcount; j++)
                        {
                            outputZL += devzl[3 * j + 1] + "," + ",";
                        }
                        outputZL += ("," + "\r\n");
                        outputZL += devzl[0] + ",";
                        bool lineflag = true;      //只要有一个不合格则就为不合格
                        if (devzl[1] != "-1")
                        {
                            for (int j = 0; j < brchcount; j++)
                            {

                                double pij = Convert.ToDouble(devzl[j * 3 + 2].Substring(0, devzl[j * 3 + 2].IndexOf('j') - 1)) * capability;
                                double qij = Convert.ToDouble(devzl[j * 3 + 2].Substring(devzl[j * 3 + 2].IndexOf('j') + 1)) * capability;
                                double pji = Convert.ToDouble(devzl[j * 3 + 3].Substring(0, devzl[j * 3 + 3].IndexOf('j') - 1)) * capability;
                                double qji = Convert.ToDouble(devzl[j * 3 + 3].Substring(devzl[j * 3 + 3].IndexOf('j') + 1)) * capability;
                                double Sij = System.Math.Sqrt(pij * pij + qij * qij);
                                double Sji = System.Math.Sqrt(pji * pji + qji * qji);
                                double maxSij = (Sij > Sji) ? Sij : Sji;
                                PSPDEV psp = new PSPDEV();

                                psp.Name = devzl[j * 3 + 1];
                                psp.Type = "Polyline";
                                psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                IList listName = Services.BaseService.GetList("SelectPSPDEVByName", psp);
                                PSPDEV pspline = (PSPDEV)listName[0];
                                double voltR = pspline.VoltR;
                                //WireCategory wirewire = new WireCategory();
                                //wirewire.WireType = pspline.LineType;

                                if (pspline.LineType == null || pspline.LineType == "")
                                {
                                    MessageBox.Show(pspline.Name + "的线路类型没有输入，无法进行可靠性检验", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }
                                //WireCategory listware = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                                //IList list2 = Services.BaseService.GetList("SelectWireCategoryByKey", wirewire);
                                //WireCategory listware = (WireCategory)list2[0];
                                double Ichange = (double)pspline.LineChange;
                                double linXij = System.Math.Sqrt(3) * voltR * Ichange / 1000;
                                outputZL += "'" + youming(devzl[j * 3 + 2], capability) + "," + "'" + youming(devzl[j * 3 + 3], capability) + ",";
                                if (maxSij >= linXij)
                                {
                                    lineflag = false;
                                    lineclass _line = new lineclass(n, j);
                                    Overlinp.Add(_line);
                                   // OverPhege[n] = j;
                                }

                            }
                            if (!lineflag)
                            {
                                outputZL += "不合格";
                            }
                            else
                            {
                                outputZL += "合格";
                            }
                        }
                        else
                        {
                            outputZL += "该线路不可断裂。";
                        }

                        outputZL += "\r\n";
                        while ((strLine = readLine.ReadLine()) != null)
                        {
                            array1 = strLine.Split(charSplit);

                            string[] devzl1 = new string[3 * brchcount + 1];

                            devzl1.Initialize();

                            n++;
                            i = 0;
                            foreach (string str in array1)
                            {
                                if (str != "")
                                {

                                    devzl1[i++] = str.ToString();

                                }
                            }
                            if (devzl1[1] != "-1")
                            {
                                outputZL += devzl1[0] + ",";
                                for (int j = 0; j < brchcount; j++)
                                {
                                    double pij = Convert.ToDouble(devzl[j * 3 + 2].Substring(0, devzl[j * 3 + 2].IndexOf('j') - 1)) * capability;
                                    double qij = Convert.ToDouble(devzl[j * 3 + 2].Substring(devzl[j * 3 + 2].IndexOf('j') + 1)) * capability;
                                    double pji = Convert.ToDouble(devzl[j * 3 + 3].Substring(0, devzl[j * 3 + 3].IndexOf('j') - 1)) * capability;
                                    double qji = Convert.ToDouble(devzl[j * 3 + 3].Substring(devzl[j * 3 + 3].IndexOf('j') + 1)) * capability;
                                    double Sij = System.Math.Sqrt(pij * pij + qij * qij);
                                    double Sji = System.Math.Sqrt(pji * pji + qji * qji);
                                    double maxSij = (Sij > Sji) ? Sij : Sji;
                                    PSPDEV psp = new PSPDEV();

                                    psp.Name = devzl[j * 3 + 1];
                                    psp.Type = "Polyline";
                                    psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    IList listName = Services.BaseService.GetList("SelectPSPDEVByName", psp);
                                    PSPDEV pspline = (PSPDEV)listName[0];
                                    double voltR = pspline.VoltR;
                                    //WireCategory wirewire = new WireCategory();
                                    //wirewire.WireType = pspline.LineType;

                                    if (pspline.LineType == null || pspline.LineType == "")
                                    {
                                        MessageBox.Show(pspline.Name + "的线路类型没有输入，无法进行可靠性检验", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }
                                    //WireCategory listware = (WireCategory)Services.BaseService.GetObject("SelectWireCategoryByKey", wirewire);
                                    //IList list2 = Services.BaseService.GetList("SelectWireCategoryByKey", wirewire);
                                    //WireCategory listware = (WireCategory)list2[0];
                                    double Ichange = (double)pspline.LineChange;
                                    double linXij = System.Math.Sqrt(3) * voltR * Ichange / 1000;
                                    // outputZL += "'" + devzl[j * 3 + 2] + "," + "'" + devzl[j * 3 + 3] + ",";
                                    if (maxSij >= linXij)
                                    {
                                        lineflag = false;
                                        lineclass linep=new lineclass(n,j);
                                        Overlinp.Add(linep);
                                        //OverPhege[n] = j;
                                    }
                                    outputZL += "'" + youming(devzl1[j * 3 + 2], capability) + "," + "'" + youming(devzl1[j * 3 + 3], capability) + ",";    //在此还可以判断线路是否超载
                                }
                                if (!lineflag)
                                {
                                    outputZL += "不合格";
                                }
                                else
                                    outputZL += "合格";
                                outputZL += "\r\n";


                            }

                            else
                            {
                                list.Add(n);
                                outputZL += devzl1[0] + "," + "为不可断裂的线路" + "\r\n";
                                
                            }

                        }
                    }
                    outputZL += "注释：红色为线路超载";
                    outputZL += "\r\n";
                    outputZL += "操作时间为：" + datatime + "\r\n";
                    outputZL += "单位：kA\\kV\\MW\\Mvar" + "\r\n";
                    readLine.Close();
                    if (File.Exists("result1.csv"))
                    {
                        File.Delete("result1.csv");
                    }

                    op = new FileStream("result1.csv", FileMode.OpenOrCreate);
                    str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                    str1.Write(outputZL);
                    str1.Close();

                    outputZL = null;
                    //将各个节点的电压写入其中
                    // strLine2 = readLine2.ReadLine();
                    n = 0;
                    bool busvflag1 = true;
                    outputZL += ("网络节点电压和相角" + "\r\n");
                    outputZL += ("开断支路名称" + "," + "节点电压的幅值和相角的有名值");
                    for (int i = 0; i < buscount; i++)
                    {
                        outputZL += (",,");
                    }
                    outputZL += ("是否越限" + "," + "\r\n");
                    outputZL += ",";
                    while ((strLine2 = readLine2.ReadLine()) != null)
                    {
                        array2 = strLine2.Split(charSplit);

                        string[] devzl1 = new string[buscount * 3 + 1];

                        devzl1.Initialize();
                        int i = 0;

                        n++;
                        foreach (string str in array2)
                        {
                            if (str != "")
                            {

                                devzl1[i++] = str.ToString();

                            }
                        }
                        for (int j = 0; j < buscount; j++)
                        {
                            outputZL += devzl1[3 * j + 1] + "," + ",";
                        }
                        outputZL += ("," + "\r\n");
                        if (devzl1[1] != "-1")
                        {
                            outputZL += devzl1[0] + ",";
                            for (int j = 0; j < buscount; j++)
                            {
                                PSPDEV pspDev = new PSPDEV();
                                pspDev.Name = devzl1[3 * j + 1];
                                pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                pspDev.Type = "Use";
                                pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);
                                if (pspDev != null && pspDev.ReferenceVolt != 0)
                                {
                                    volt = pspDev.ReferenceVolt;
                                }
                                else
                                    volt = standvolt;
                                outputZL += "'" + (Convert.ToDouble(devzl1[j * 3 + 2]) * volt).ToString() + "," + "'" + devzl1[j * 3 + 3] + ",";
                                if (Convert.ToDouble(devzl1[j * 3 + 2]) >= TLPSPVmax || Convert.ToDouble(devzl1[j * 3 + 2]) <= TLPSPVmin)
                                {
                                    busvflag1 = false;
                                    lineclass _vtheta=new lineclass(n,j);
                                    OverVp.Add(_vtheta);
                                   // OverVhege[n] = j;
                                }
                            }
                            if (busvflag1)
                            {
                                outputZL += "合格";
                            }
                            else
                                outputZL += "不合格";
                            outputZL += "\r\n";
                        }
                        else
                        {
                            outputZL += devzl1[0] + "," + "为不可断裂的线路" + ",,,,,,";
                            outputZL += "\r\n";
                        }

                        while ((strLine2 = readLine2.ReadLine()) != null)
                        {
                            busvflag1 = true;
                            array2 = strLine2.Split(charSplit);

                            string[] devzl = new string[buscount * 3 + 1];

                            devzl.Initialize();

                            n++;
                            i = 0;
                            foreach (string str in array2)
                            {
                                if (str != "")
                                {

                                    devzl[i++] = str.ToString();

                                }
                            }
                            if (devzl[1] != "-1")
                            {
                                outputZL += devzl1[0] + ",";
                                for (int j = 0; j < buscount; j++)
                                {
                                    PSPDEV pspDev = new PSPDEV();
                                    pspDev.Name = devzl1[3 * j + 1];
                                    pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                                    pspDev.Type = "Use";
                                    pspDev = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", pspDev);
                                    if (pspDev != null && pspDev.ReferenceVolt != 0)
                                    {
                                        volt = pspDev.ReferenceVolt;
                                    }
                                    else
                                        volt = standvolt;
                                    outputZL += "'" + (Convert.ToDouble(devzl[j * 3 + 2]) * volt).ToString() + "," + "'" + devzl[j * 3 + 3] + ",";   //在此还可以判断线路是否超载,如果超载加入一个标记,在excel里使其变为红色
                                    if (Convert.ToDouble(devzl[j * 3 + 2]) >= TLPSPVmax || Convert.ToDouble(devzl[j * 3 + 2]) <= TLPSPVmin)
                                    {
                                        busvflag1 = false;
                                        lineclass vtheta=new lineclass(n,j);
                                        OverVp.Add(vtheta);
                                        //OverVhege[n] = j;
                                    }
                                }
                                if (busvflag1)
                                {
                                    outputZL += "合格";
                                }
                                else
                                    outputZL += "不合格";
                                outputZL += "\r\n";

                            }
                            else
                            {
                                // list.Add(n);
                                outputZL += devzl[0] + "," + "为不可断裂的线路" + ",,,,,,";
                                outputZL += "\r\n";
                            }

                        }
                    }
                    readLine2.Close();
                    outputZL += "注释：红色为节点电压超载" + "\r\n";
                    outputZL += "节点电压合格范围为电压基准值的上下限，分别为" + TLPSPVmax + "和" + TLPSPVmin + "倍" + "\r\n";
                    outputZL += "操作时间为：" + datatime + "\r\n";
                    outputZL += "单位：kA\\kV\\MW\\Mvar" + "\r\n";

                    //op = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "reli.txt", FileMode.OpenOrCreate);
                    //str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                    //str1.Write(outputZL);
                    //str1.Close();


                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + "result2.csv"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + "result2.csv");
                    }

                    op = new FileStream(System.Windows.Forms.Application.StartupPath + "\\" + "result2.csv", FileMode.OpenOrCreate);
                    str1 = new StreamWriter(op, Encoding.GetEncoding("GB2312"));
                    str1.Write(outputZL);
                    str1.Close();

                    result1 = new Excel.Application();
                    result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\" + "result1.csv");
                    newWorksheet = (Excel.Worksheet)result1.Worksheets[1];
                    result1.Worksheets.Add(System.Reflection.Missing.Value, newWorksheet, 1, System.Reflection.Missing.Value);

                    Excel.Application result2 = new Excel.Application();
                    result2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
                    Excel.Worksheet tempSheet = (Excel.Worksheet)result2.Worksheets.get_Item(1);
                    Excel.Worksheet newWorksheet1 = (Excel.Worksheet)result1.Worksheets.get_Item(2);
                    newWorksheet.Name = "一般线路可靠性";
                    newWorksheet1.Name = "节点电压可靠性";
                    result1.Visible = true;


                    tempSheet.Cells.Select();
                    tempSheet.Cells.Copy(System.Reflection.Missing.Value);
                    newWorksheet1.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                    newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 2 * brchcount + 2]).MergeCells = true;
                    newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
                    newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
                    newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    newWorksheet.get_Range(newWorksheet.Cells[2, 1], newWorksheet.Cells[3, 1]).MergeCells = true;
                    newWorksheet.get_Range(newWorksheet.Cells[2, 2], newWorksheet.Cells[2, 2 * brchcount + 1]).MergeCells = true;
                    newWorksheet.get_Range(newWorksheet.Cells[2, 2], newWorksheet.Cells[2, 2]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    newWorksheet.get_Range(newWorksheet.Cells[2, 2 * brchcount + 2], newWorksheet.Cells[3, 2 * brchcount + 2]).MergeCells = true;
                    for (int i = 0; i < brchcount; i++)
                    {
                        newWorksheet.get_Range(newWorksheet.Cells[3, 2 * i + 2], newWorksheet.Cells[3, 2 * i + 3]).MergeCells = true;
                        newWorksheet.get_Range(newWorksheet.Cells[3, 2 * i + 2], newWorksheet.Cells[3, 2 * i + 3]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    }
                    // newWorksheet.get_Range(newWorksheet.Cells[4, 2], newWorksheet.Cells[4, brchcount + 1]).Interior.ColorIndex = 45;
                    newWorksheet.get_Range(newWorksheet.Cells[4, 1], newWorksheet.Cells[3 + linenum, 1]).Interior.ColorIndex = 6;
                    //newWorksheet.get_Range(newWorksheet.Cells[5, 2], newWorksheet.Cells[newWorksheet.UsedRange.Rows.Count, brchcount + 1]).NumberFormat = "0.0000_ ";
                    newWorksheet.get_Range(newWorksheet.Cells[4, 2], newWorksheet.Cells[3 + linenum, 2 * brchcount + 1]).NumberFormat = "@";
                    newWorksheet.get_Range(newWorksheet.Cells[2, 1], newWorksheet.Cells[6 + linenum, 2 * brchcount + 2]).Font.Name = "楷体_GB2312";
                    //在此处将其不合格的数据显示出来
                    //foreach (KeyValuePair<int, int> kvp in OverPhege)
                    //{
                    for (int i=0;i<Overlinp.Count;i++)
                    {
                       newWorksheet.get_Range(newWorksheet.Cells[3 + Overlinp[i].row, 2 * Overlinp[i].linenum + 2], newWorksheet.Cells[3 + Overlinp[i].row, 2 * Overlinp[i].linenum + 3]).Interior.ColorIndex = 3;
                    }

                       
                    //}
                    //补偿法中的数据处理过程
                    newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 2 * buscount + 2]).MergeCells = true;
                    newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 1]).Font.Size = 20;
                    newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 1]).Font.Name = "黑体";
                    newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    newWorksheet1.get_Range(newWorksheet1.Cells[2, 2], newWorksheet1.Cells[2, 2]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    newWorksheet1.get_Range(newWorksheet1.Cells[2, 1], newWorksheet1.Cells[3, 1]).MergeCells = true;  //补偿法中前面开断合并
                    newWorksheet1.get_Range(newWorksheet1.Cells[2, 2], newWorksheet1.Cells[2, 2 * buscount + 1]).MergeCells = true;
                    newWorksheet1.get_Range(newWorksheet1.Cells[2, 2 * buscount + 2], newWorksheet1.Cells[3, 2 * buscount + 2]).MergeCells = true;   //合格合并
                    newWorksheet1.get_Range(newWorksheet1.Cells[4, 1], newWorksheet1.Cells[4 + linenum- 1, 1]).Interior.ColorIndex = 6;
                    for (int i = 0; i < buscount; i++)
                    {
                        newWorksheet1.get_Range(newWorksheet1.Cells[3, 2 * i + 2], newWorksheet1.Cells[3, 2 * i + 3]).MergeCells = true;
                        newWorksheet1.get_Range(newWorksheet1.Cells[3, 2 * i + 2], newWorksheet1.Cells[3, 2 * i + 3]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    }
                    //newWorksheet1.get_Range(newWorksheet1.Cells[7 + brchcount, 2], newWorksheet1.Cells[7 + brchcount, brchcount + 1]).Interior.ColorIndex = 45;
                    //newWorksheet1.get_Range(newWorksheet1.Cells[8 + brchcount, 1], newWorksheet1.Cells[8 + 2 * brchcount, 1]).Interior.ColorIndex = 6;
                    //newWorksheet1.get_Range(newWorksheet1.Cells[5, 2], newWorksheet1.Cells[newWorksheet1.UsedRange.Rows.Count, brchcount + 1]).NumberFormat = "0.0000_ ";
                    newWorksheet1.get_Range(newWorksheet1.Cells[4, 2], newWorksheet1.Cells[4 + linenum, 2 * buscount + 1]).NumberFormat = "@";
                    newWorksheet1.get_Range(newWorksheet1.Cells[1, 1], newWorksheet1.Cells[8+ linenum, 2 * buscount + 2]).Font.Name = "楷体_GB2312";
                    //foreach (KeyValuePair<int, int> kvp in OverVhege)
                    //{
                       for (int i=0;i<OverVp.Count;i++)
                       {
                           newWorksheet1.get_Range(newWorksheet1.Cells[3 + OverVp[i].row, 2 * OverVp[i].linenum + 2], newWorksheet1.Cells[3 + OverVp[i].row, 2 * OverVp[i].linenum + 3]).Interior.ColorIndex = 3;
                       }
                       newWorksheet.Rows.AutoFit();
                       newWorksheet.Columns.AutoFit();
                       newWorksheet1.Rows.AutoFit();
                       newWorksheet1.Columns.AutoFit();
                    //}
                    //补偿法中的数据处理过程
                    newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "部分线路可靠性计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);
                    result1.Workbooks.Close();
                    result1.Quit();
                    System.Windows.Forms.Clipboard.Clear(); //去掉剪切板中的数据
                    ex = new Excel.Application();
                    ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "部分线路可靠性计算结果.xls");
                    ex.Visible = true;

                }
                catch (System.Exception e1)
                {
                    MessageBox.Show("请进行潮流计算后再查看结果！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
              
        }
        private string youming(string pij,double capability )
        {
            int lenth = pij.Length;
            int jlenth = pij.IndexOf('j');
            string shi = null;
            if (lenth > jlenth)
            {
                string a = pij.Substring(jlenth - 1, 1);
                if (pij.Substring(jlenth - 1, 1) == "-")
                {
                    shi = (Convert.ToDouble(pij.Substring(0, jlenth - 1)) * capability).ToString() + "-j" + (Convert.ToDouble(pij.Substring(jlenth + 1)) * capability);
                }
                else if (pij.Substring(jlenth - 1, 1) == "+")
                {
                    shi = (Convert.ToDouble(pij.Substring(0, jlenth - 1)) * capability).ToString() + "+j" + (Convert.ToDouble(pij.Substring(jlenth + 1)) * capability);
                }
            }

            return shi;
        }
        private void Allshort(int dulutype)
        {
            if (!CheckDL())
            {
                return;
            }
            System.Windows.Forms.Clipboard.Clear();
            Dictionary<int, double> nodeshorti = new Dictionary<int, double>();      //记录母线有没有进行过短路 
            KeyValuePair<int, double> maxshorti = new KeyValuePair<int, double>(); //取出短路的最大短路电流
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "母线节点";
            IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            PSPDEV psp = new PSPDEV();
            psp.Type = "Polyline";
            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            psp.Lable = "支路";
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
            string data = System.DateTime.Now.ToString("d");
            string time = System.DateTime.Now.ToString("T");
            string duanResult = null;
            duanResult += "短路电流简表" + "\r\n" + "\r\n";
            duanResult += "短路作业号：1" + "\r\n";
            duanResult += "短路计算日期："+data+ " "+"时间："+time+ "\r\n";
            duanResult += "单位：MVA" + "\r\n";
            string dianYaResult = null;
            dianYaResult += "母线电压结果" + "\r\n" + "\r\n";
            dianYaResult += "短路作业号：1" + "\r\n";
            dianYaResult += "短路计算日期：" + data + " " + "时间：" + time + "\r\n";
            dianYaResult += "单位：幅值( p.u. )  角度(deg.)" + "\r\n";
            string dianLiuResult = null;
            dianLiuResult += "支路电流结果" + "\r\n" + "\r\n";
            dianLiuResult += "短路作业号：1" + "\r\n";
            dianLiuResult += "短路计算日期：" + data + " " + "时间：" + time + "\r\n";
            dianLiuResult += "单位：幅值( p.u. )  角度(deg.)" + "\r\n";
            int intshorti = 0;        //第一行记录的为要读短路电流的属性说明
            bool shortiflag = false;
            int muxiannum = 0;         //记录一个母线短路后 有多少个记录母线电压
            int linenum = 0;           //记录一个母线短路 有多少个线路电流
            for (int i = 0; i < list1.Count; i++)
            {
                pspDev = list1[i] as PSPDEV;
                bool flag = false;
                string dlr = null;
                for (int j = 0; j < list2.Count; j++)
                {
                    psp = list2[j] as PSPDEV;
                    
                    if (pspDev.Number == psp.FirstNode && psp.KName == "合" && psp.KSwitchStatus == "合")
                    {

                        flag = true;
                        dlr = "0" + " " + psp.FirstNode + " " + psp.LastNode + " " + psp.Number + " " + "0 " + " " + dulutype;

                    }
                    if (pspDev.Number == psp.LastNode && psp.KName == "合" && psp.KSwitchStatus == "合")
                    {
                        flag = true;
                        dlr = "0" + " " + psp.FirstNode + " " + psp.LastNode + " " + psp.Number + " " + "1 " + " " + dulutype;
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\fault.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\fault.txt");
                    }
                    if (flag)
                    {
                       
                        break;                 //跳出本循环 进行母线的另外一个母线短路
                    }
                    if (!flag)
                        continue;
                    //写入错误中
                }
                //如果在一般线路中没有则在两绕组中进行
                if (!flag)
                {
                    psp.Type = "transformertwozu";
                    psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    psp.Lable = "二绕组变压器";
                    IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                    for (int j = 0; j < list3.Count; j++)
                    {
                        dlr = null;
                        psp = list3[j] as PSPDEV;
                        PSPDEV devFirst = new PSPDEV();
                        devFirst.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devFirst.Name = psp.HuganLine1;
                        devFirst.Type = "Use";
                        devFirst = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devFirst);
                        PSPDEV devLast = new PSPDEV();
                        devLast.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devLast.Name = psp.HuganLine2;
                        devLast.Type = "Use";
                        devLast = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devLast);

                        if (pspDev.Number == devFirst.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合")
                        {

                            flag = true;
                            dlr = "0" + " " + devFirst.Number + " " + devLast.Number + " " + psp.Number + " " + "0" + " " + dulutype;

                        }
                        if (pspDev.Number == devLast.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合")
                        {
                            flag = true;
                            dlr = "0" + " " + devFirst.Number + " " + devLast.Number + " " + psp.Number + " " + "1" + " " + dulutype;
                        }
                        if (flag)
                        {                         
                            break;                 //跳出本循环 进行母线的另外一个母线短路
                        }
                        if (!flag)
                            continue;
                        //写入错误中
                    }
                }
                if (!flag)
                {
                    psp.Type = "transformerthirdzu";
                    psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    psp.Lable = "三绕组变压器";
                    IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                    for (int j = 0; j < list4.Count; j++)
                    {
                        dlr = null;
                        psp = list4[j] as PSPDEV;
                        PSPDEV devINode = new PSPDEV();
                        devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devINode.Name = psp.HuganLine1;
                        devINode.Type = "Use";
                        devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
                        PSPDEV devJNode = new PSPDEV();
                        devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devJNode.Name = psp.HuganLine2;
                        devJNode.Type = "Use";
                        devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJNode);
                        PSPDEV devKNode = new PSPDEV();
                        devKNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devKNode.Name = psp.KName;
                        devKNode.Type = "Use";
                        devKNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devKNode);

                        if (pspDev.Number == devINode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                        {

                            flag = true;
                            dlr = "0" + " " + devINode.Number + " " + devJNode.Number + " " + psp.Number + " " + "0" + " " + dulutype;

                        }
                        if (pspDev.Number == devJNode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                        {
                            flag = true;
                            dlr = "0" + " " + devINode.Number + " " + devJNode.Number + " " + psp.Number + " " + "1" + " " + dulutype;
                        }
                        if (pspDev.Number == devKNode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                        {
                            flag = true;
                            dlr = "0" + " " + devINode.Number + " " + devKNode.Number + " " + psp.Number + " " + "1" + " " + dulutype;
                        }

                        if (flag)
                        {                          
                            break;                 //跳出本循环 进行母线的另外一个母线短路
                        }
                        if (!flag)
                            continue;
                        //写入错误中
                    }
                }
                if (flag)
                {
                    FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fault.txt"), FileMode.OpenOrCreate);
                    StreamWriter str11 = new StreamWriter(VK);
                    str11.Write(dlr);
                    str11.Close();
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt");
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt");
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt");
                    }
                    shortcir shortCutCal = new shortcir();
                    shortCutCal.Show_shortcir(0,0);
                    //bool matrixflag=true;                //用来判断是否导纳矩阵的逆矩阵是否存在逆矩阵
                    string matrixstr = null;
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt"))
                    {
                        matrixstr = "正序导纳矩阵";
                        // matrixflag = false;
                    }

                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt"))
                    {
                        // matrixflag = false;
                        matrixstr += "负序导纳矩阵";
                    }

                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt"))
                    {
                        //matrixflag = false;
                        matrixstr += "零序导纳矩阵";
                    }
                    if (matrixstr != null)
                    {
                        MessageBox.Show(matrixstr + "不存在逆矩阵，请调整参数后再进行计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }

                    FileStream shorcuit = new FileStream(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt", FileMode.Open);
                    StreamReader readLineGU = new StreamReader(shorcuit, System.Text.Encoding.Default);
                    string strLineGU;
                    string[] arrayGU;
                    char[] charSplitGU = new char[] { ' ' };
                    intshorti = 0;
                    while ((strLineGU = readLineGU.ReadLine()) != null)
                    {

                        
                            arrayGU = strLineGU.Split(charSplitGU);
                            string[] shorti = new string[4];
                            shorti.Initialize();
                            int m = 0;
                            foreach (string str in arrayGU)
                            {

                                if (str != "")
                                {

                                    shorti[m++] = str.ToString();

                                }
                            }
                            if (intshorti == 0)
                            {
                                if (!shortiflag)
                                {
                                    duanResult += shorti[0] + "," + shorti[1] + "," + shorti[3] + "\r\n";
                                    shortiflag = true;
                                }
                                
                            }
                           else
                                duanResult += shorti[0] + "," + shorti[1] + "," +Convert.ToDouble(shorti[3]) * 100 / (Math.Sqrt(3) * pspDev.ReferenceVolt) + "\r\n";

                            intshorti++;
                    }
                    readLineGU.Close();
                    //**读取三序电压的值
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }
                    FileStream dianYa = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Sxdianya.txt", FileMode.Open);
                    StreamReader readLineDY = new StreamReader(dianYa, System.Text.Encoding.Default);
                    string strLineDY;
                    string[] arrayDY;
                    char[] charSplitDY = new char[] { ' ' };
                    strLineDY = readLineDY.ReadLine();
                    int j = 0;
                    muxiannum = 0;
                    while (strLineDY != null)
                    {
                        arrayDY = strLineDY.Split(charSplitDY);
                        
                        int m = 0;
                        string[] dev = new string[14];
                        dev.Initialize();
                        foreach (string str in arrayDY)
                        {
                            if (str != "")
                            {
                                dev[m++] = str;
                            }
                        }
                        if (j == 0)
                        {
                            dianYaResult += "\r\n"+"故障母线：" + pspDev.Name +"\r\n";
                            dianYaResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "," +
     dev[9] + "," + dev[10] + "," + dev[11] + "," + dev[12] + "," + dev[13] + "\r\n";
                        }
                        else
                        {
                            bool dianyaflag = true;     //判断此母线是短路点母线还是一般的母线
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            if (dev[1] != "du")
                            {
                                CR.Name = dev[1];
                                CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            }
                            //else
                            //{
                            //    dianyaflag = false;
                            //    CR.Name = duanluname;
                            //    CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                            //}
                            if (dianyaflag)
                                dianYaResult += dev[0] + "," + dev[1] + "," + Convert.ToDouble(dev[2]) * CR.ReferenceVolt + "," + dev[3] + "," + Convert.ToDouble(dev[4]) * CR.ReferenceVolt + "," + dev[5] + "," + Convert.ToDouble(dev[6]) * CR.ReferenceVolt + "," + dev[7] + "," + Convert.ToDouble(dev[8]) * CR.ReferenceVolt + "," +
                                    dev[9] + "," + Convert.ToDouble(dev[10]) * CR.ReferenceVolt + "," + dev[11] + "," + Convert.ToDouble(dev[12]) * CR.ReferenceVolt + "," + dev[13] + "\r\n";
                            //else
                            //    dianYaResult += dev[0] + "," + duanluname + "上短路点" + "," + Convert.ToDouble(dev[2]) * CR.ReferenceVolt + "," + dev[3] + "," + Convert.ToDouble(dev[4]) * CR.ReferenceVolt + "," + dev[5] + "," + Convert.ToDouble(dev[6]) * CR.ReferenceVolt + "," + dev[7] + "," + Convert.ToDouble(dev[8]) * CR.ReferenceVolt + "," +
                            //       dev[9] + "," + Convert.ToDouble(dev[10]) * CR.ReferenceVolt + "," + dev[11] + Convert.ToDouble(dev[12]) * CR.ReferenceVolt + "," + dev[13] + "\r\n";

                        }
                        strLineDY = readLineDY.ReadLine();
                        muxiannum++;
                        j++;
                    }
                    readLineDY.Close();
                   //**读取三序电流的值
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt"))
                    {
                    }
                    else
                    {
                        return;
                    }
                    FileStream dianLiu = new FileStream(System.Windows.Forms.Application.StartupPath + "\\Sxdianliu.txt", FileMode.Open);
                    StreamReader readLineDL = new StreamReader(dianLiu, System.Text.Encoding.Default);
                    string strLineDL;
                    string[] arrayDL;
                    char[] charSplitDL = new char[] { ' ' };
                    strLineDL = readLineDL.ReadLine();
                    j = 0;
                    linenum=0;
                    while (strLineDL != null)
                    {
                        arrayDL = strLineDL.Split(charSplitDL);
                        int m = 0;
                        string[] dev = new string[15];
                        dev.Initialize();
                        foreach (string str in arrayDL)
                        {
                            if (str != "")
                            {
                                dev[m++] = str;
                            }
                        }
                        if (j == 0)
                        {
                            dianLiuResult += "\r\n" + "故障母线：" + pspDev.Name + "\r\n";
                            dianLiuResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + dev[3] + "," + dev[4] + "," + dev[5] + "," + dev[6] + "," + dev[7] + "," + dev[8] + "," +
                                         dev[9] + "," + dev[10] + "," + dev[11] + "," + dev[12] + "," + dev[13] + "," + dev[14] + "\r\n";
                        }
                        else
                        {
                           
                            //因为在线路电流输出时既有一般线路的电流、两绕组和三绕组线路的电流还有接地电容器和电抗器的电流，因此只将电流输出就行了
                            PSPDEV CR = new PSPDEV();
                            CR.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                            if (dev[0] != "du")
                            {
                                CR.Name = dev[0];
                            }
                            else
                                CR.Name = dev[1];

                            CR = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByNameANDSVG", CR);
                           
                            dianLiuResult += dev[0] + "," + dev[1] + "," + dev[2] + "," + Convert.ToDouble(dev[3]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[4] + "," + Convert.ToDouble(dev[5]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[6] + "," + Convert.ToDouble(dev[7]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[8] + "," +
                              Convert.ToDouble(dev[9]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[10] + "," + Convert.ToDouble(dev[11]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[12] + "," + Convert.ToDouble(dev[13]) * 100 / (Math.Sqrt(3) * CR.ReferenceVolt) + "," + dev[14] + "\r\n";                           
                        }

                        strLineDL = readLineDL.ReadLine();
                        j++;
                        linenum++;
                    }
                    readLineDL.Close();

                } 
            }
            //写入报表中
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result.csv"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\result.csv");
            }
            FileStream tempGU = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result.csv"), FileMode.OpenOrCreate);
            StreamWriter strGU = new StreamWriter(tempGU, Encoding.GetEncoding("GB2312"));
            strGU.Write(duanResult);
            strGU.Close();
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result1.csv"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
            }
            FileStream tempDY = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result1.csv"), FileMode.OpenOrCreate);
            StreamWriter strDY = new StreamWriter(tempDY, Encoding.GetEncoding("GB2312"));
            strDY.Write(dianYaResult);
            strDY.Close();
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\result2.csv"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
            }
            FileStream tempDL = new FileStream((System.Windows.Forms.Application.StartupPath + "\\result2.csv"), FileMode.OpenOrCreate);
            StreamWriter strDL = new StreamWriter(tempDL, Encoding.GetEncoding("GB2312"));
            strDL.Write(dianLiuResult);
            strDL.Close();
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName  +"全网短路计算结果.xls"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "全网短路计算结果.xls");
            }

            Excel.Application ex;
            Excel.Worksheet xSheet;
            Excel.Application result1;
            Excel.Application result2;
            Excel.Worksheet tempSheet;
            Excel.Worksheet tempSheet1;
            Excel.Worksheet newWorksheet;
            Excel.Worksheet newWorkSheet1;

            object oMissing = System.Reflection.Missing.Value;
            ex = new Excel.Application();
            ex.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result.csv");

            xSheet = (Excel.Worksheet)ex.Worksheets[1];
            ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);
            xSheet = (Excel.Worksheet)ex.Worksheets[2];
            ex.Worksheets.Add(System.Reflection.Missing.Value, xSheet, 1, System.Reflection.Missing.Value);
            xSheet = (Excel.Worksheet)ex.Worksheets[1];
            result1 = new Excel.Application();
            result1.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result1.csv");
            result2 = new Excel.Application();
            result2.Application.Workbooks.Add(System.Windows.Forms.Application.StartupPath + "\\result2.csv");
            tempSheet = (Excel.Worksheet)result1.Worksheets.get_Item(1);
            tempSheet1 = (Excel.Worksheet)result2.Worksheets.get_Item(1);
            newWorksheet = (Excel.Worksheet)ex.Worksheets.get_Item(2);
            newWorkSheet1 = (Excel.Worksheet)ex.Worksheets.get_Item(3);
            newWorksheet.Name = "母线电压";
            newWorkSheet1.Name = "支路电流";
            xSheet.Name = "短路电流";
            ex.Visible = true;

            tempSheet.Cells.Select();
            tempSheet.Cells.Copy(System.Reflection.Missing.Value);
            newWorksheet.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);
            tempSheet1.Cells.Select();
            tempSheet1.Cells.Copy(System.Reflection.Missing.Value);
            newWorkSheet1.Paste(System.Reflection.Missing.Value, System.Reflection.Missing.Value);

            xSheet.UsedRange.Font.Name = "楷体_GB2312";
            newWorksheet.UsedRange.Font.Name = "楷体_GB2312";
            newWorkSheet1.UsedRange.Font.Name = "楷体_GB2312";
            //记录的为短路电流格式
            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 3]).MergeCells = true;
            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Size = 20;
            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).Font.Name = "黑体";
            xSheet.get_Range(xSheet.Cells[1, 1], xSheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            xSheet.get_Range(xSheet.Cells[6, 1], xSheet.Cells[6, 3]).Interior.ColorIndex = 45;
            xSheet.get_Range(xSheet.Cells[7, 1], xSheet.Cells[xSheet.UsedRange.Rows.Count, 1]).Interior.ColorIndex = 6;
            xSheet.get_Range(xSheet.Cells[4, 3], xSheet.Cells[xSheet.UsedRange.Rows.Count, 13]).NumberFormat = "0.0000_ ";
           //母线电压显示方式
            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 14]).MergeCells = true;
            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Size = 20;
            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).Font.Name = "黑体";
            newWorksheet.get_Range(newWorksheet.Cells[1, 1], newWorksheet.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            for (int m = 0; m < muxiannum-1;m++ )
            {
                newWorksheet.get_Range(newWorksheet.Cells[m * (muxiannum + 2) + 8, 1], newWorksheet.Cells[m * (muxiannum + 2) + 8, 14]).Interior.ColorIndex = 45;
                newWorksheet.get_Range(newWorksheet.Cells[m * (muxiannum + 2) + 9, 1], newWorksheet.Cells[m * (muxiannum + 2) +8+muxiannum-1, 1]).Interior.ColorIndex = 6;
                newWorksheet.get_Range(newWorksheet.Cells[m * (muxiannum + 2) + 9, 3], newWorksheet.Cells[m * (muxiannum +2) + 8 + muxiannum-1, 13]).NumberFormat = "0.0000_ ";
            }
            
            //线路三序电流的显示方式
            newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 15]).MergeCells = true;
            newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 1]).Font.Size = 20;
            newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 1]).Font.Name = "黑体";
            newWorkSheet1.get_Range(newWorkSheet1.Cells[1, 1], newWorkSheet1.Cells[1, 1]).HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            for (int m = 0; m < muxiannum-1;m++ )
            {
                newWorkSheet1.get_Range(newWorkSheet1.Cells[m * (linenum + 2) + 8, 1], newWorkSheet1.Cells[m * (linenum + 2) + 8, 15]).Interior.ColorIndex = 45;
                newWorkSheet1.get_Range(newWorkSheet1.Cells[m * (linenum + 2) + 9, 1], newWorkSheet1.Cells[m * (linenum + 2) + 8+linenum-1, 1]).Interior.ColorIndex = 6;
                newWorkSheet1.get_Range(newWorkSheet1.Cells[m * (linenum + 2) + 9, 2], newWorkSheet1.Cells[m * (linenum + 2) + 8 + linenum-1, 2]).Interior.ColorIndex = 6;
                newWorkSheet1.get_Range(newWorkSheet1.Cells[m * (linenum + 2) + 9, 3], newWorkSheet1.Cells[m * (linenum + 2) + 8+ linenum-1, 3]).Interior.ColorIndex = 6;
                newWorkSheet1.get_Range(newWorkSheet1.Cells[m * (linenum + 2) + 9, 4], newWorkSheet1.Cells[m * (linenum + 2) + 8 + linenum-1, 14]).NumberFormat = "0.0000_ ";
            }
            
            xSheet.Rows.AutoFit();
            xSheet.Columns.AutoFit();
            newWorksheet.Rows.AutoFit();
            newWorksheet.Columns.AutoFit();
            newWorkSheet1.Rows.AutoFit();
            newWorkSheet1.Columns.AutoFit();
            newWorksheet.SaveAs(System.Windows.Forms.Application.StartupPath + "\\" + tlVectorControl1.SVGDocument.FileName + "全网短路计算结果.xls", Excel.XlFileFormat.xlXMLSpreadsheet, null, null, false, false, false, null, null, null);
            System.Windows.Forms.Clipboard.Clear();
            result1.Workbooks.Close();
            result1.Quit();
            result2.Workbooks.Close();
            result2.Quit();
        }
        private void Allshortcheck(int caozuoi)  //根据操作的次序依次显示
        {
            if (! CheckDL())
            {
                return;
            }
            
            Dictionary<int, double> nodeshorti=new Dictionary<int, double>();      //记录母线有没有进行过短路 
            KeyValuePair<int, double> maxshorti = new KeyValuePair<int, double>(); //取出短路的最大短路电流
            PSPDEV pspDev = new PSPDEV();
            pspDev.Type = "Use";
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Lable = "母线节点";
             IList list1 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", pspDev);
            PSPDEV psp = new PSPDEV();
            psp.Type = "Polyline";
            psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            psp.Lable = "支路";
            IList list2 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);

            for (int i = 0; i < list1.Count; i++)
            {
                pspDev = list1[i] as PSPDEV;
                bool flag = false;
                for (int j = 0; j < list2.Count; j++)
                {
                    psp = list2[j] as PSPDEV;
                    string dlr = null;
                    if (pspDev.Number == psp.FirstNode && psp.KName == "合" && psp.KSwitchStatus == "合")
                    {

                        flag = true;
                        dlr = "0" + " " + psp.FirstNode + " " + psp.LastNode + " " + psp.Number + " " + "0 " + " " + "0";

                    }
                    if (pspDev.Number == psp.LastNode && psp.KName == "合" && psp.KSwitchStatus == "合")
                    {
                        flag = true;
                        dlr = "0" + " " + psp.FirstNode + " " + psp.LastNode + " " + psp.Number + " " + "1 " + " " + "0";
                    }
                    if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\fault.txt"))
                    {
                        File.Delete(System.Windows.Forms.Application.StartupPath + "\\fault.txt");
                    }
                    if (flag)
                    {
                        FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fault.txt"), FileMode.OpenOrCreate);
                        StreamWriter str11 = new StreamWriter(VK);
                        str11.Write(dlr);
                        str11.Close();
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                        {
                            File.Delete(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt");
                        }
                        shortcir shortCutCal = new shortcir();
                        shortCutCal.Show_shortcir(0,0);
                        //bool matrixflag=true;                //用来判断是否导纳矩阵的逆矩阵是否存在逆矩阵
                        string matrixstr = null;
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt"))
                        {
                            matrixstr = "正序导纳矩阵";
                            // matrixflag = false;
                        }

                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt"))
                        {
                            // matrixflag = false;
                            matrixstr += "负序导纳矩阵";
                        }

                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt"))
                        {
                            //matrixflag = false;
                            matrixstr += "零序导纳矩阵";
                        }
                        if (matrixstr != null)
                        {
                            MessageBox.Show(matrixstr + "不存在逆矩阵，请调整参数后再进行计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                        {
                        }
                        else
                        {
                            return;
                        }

                        FileStream shorcuit = new FileStream(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt", FileMode.Open);
                        StreamReader readLineGU = new StreamReader(shorcuit, System.Text.Encoding.Default);
                        string strLineGU;
                        string[] arrayGU;
                        char[] charSplitGU = new char[] { ' ' };

                        while ((strLineGU = readLineGU.ReadLine()) != null)
                        {

                            while ((strLineGU = readLineGU.ReadLine()) != null)
                            {
                                arrayGU = strLineGU.Split(charSplitGU);
                                string[] shorti = new string[4];
                                shorti.Initialize();
                                int m = 0;
                                foreach (string str in arrayGU)
                                {

                                    if (str != "")
                                    {

                                        shorti[m++] = str.ToString();

                                    }
                                }

                                nodeshorti[pspDev.Number] = Convert.ToDouble(shorti[3]) * 100 / (Math.Sqrt(3) * pspDev.ReferenceVolt);
                            }
                        }
                        readLineGU.Close();
                        break;                 //跳出本循环 进行母线的另外一个母线短路
                    }
                    if (!flag)
                        continue;
                    //写入错误中
                }
                //如果在一般线路中没有则在两绕组中进行
                if (!flag)
                {
                    psp.Type = "transformertwozu";
                    psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    psp.Lable = "二绕组变压器";
                    IList list3 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                    for (int j = 0; j < list3.Count; j++)
                    {
                        string dlr = null;
                        psp = list3[j] as PSPDEV;
                        PSPDEV devFirst = new PSPDEV();
                        devFirst.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devFirst.Name = psp.HuganLine1;
                        devFirst.Type = "Use";
                        devFirst = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devFirst);
                        PSPDEV devLast = new PSPDEV();
                        devLast.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devLast.Name = psp.HuganLine2;
                        devLast.Type = "Use";
                        devLast = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devLast);

                        if (pspDev.Number == devFirst.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合")
                        {

                            flag = true;
                            dlr = "0" + " " + devFirst.Number + " " + devLast.Number + " " + psp.Number + " " + "0" + " " + "0";

                        }
                        if (pspDev.Number == devLast.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合")
                        {
                            flag = true;
                            dlr = "0" + " " + devFirst.Number + " " + devLast.Number + " " + psp.Number + " " + "1" + " " + "0";
                        }
                        if (flag)
                        {
                            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fault.txt"), FileMode.OpenOrCreate);
                            StreamWriter str11 = new StreamWriter(VK);
                            str11.Write(dlr);
                            str11.Close();
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                            {
                                File.Delete(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt");
                            }
                            shortcir shortCutCal = new shortcir();
                            shortCutCal.Show_shortcir(0,0);
                            //bool matrixflag=true;                //用来判断是否导纳矩阵的逆矩阵是否存在逆矩阵
                            string matrixstr = null;
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt"))
                            {
                                matrixstr = "正序导纳矩阵";
                                // matrixflag = false;
                            }

                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt"))
                            {
                                // matrixflag = false;
                                matrixstr += "负序导纳矩阵";
                            }

                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt"))
                            {
                                //matrixflag = false;
                                matrixstr += "零序导纳矩阵";
                            }
                            if (matrixstr != null)
                            {
                                MessageBox.Show(matrixstr + "不存在逆矩阵，请调整参数后再进行计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                            {
                            }
                            else
                            {
                                return;
                            }

                            FileStream shorcuit = new FileStream(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt", FileMode.Open);
                            StreamReader readLineGU = new StreamReader(shorcuit, System.Text.Encoding.Default);
                            string strLineGU;
                            string[] arrayGU;
                            char[] charSplitGU = new char[] { ' ' };

                            while ((strLineGU = readLineGU.ReadLine()) != null)
                            {

                                while ((strLineGU = readLineGU.ReadLine()) != null)
                                {
                                    arrayGU = strLineGU.Split(charSplitGU);
                                    string[] shorti = new string[4];
                                    shorti.Initialize();
                                    int m = 0;
                                    foreach (string str in arrayGU)
                                    {

                                        if (str != "")
                                        {

                                            shorti[m++] = str.ToString();

                                        }
                                    }

                                    nodeshorti[pspDev.Number] = Convert.ToDouble(shorti[3]) * 100 / (Math.Sqrt(3) * pspDev.ReferenceVolt);
                                }
                            }
                            readLineGU.Close();
                            break;                 //跳出本循环 进行母线的另外一个母线短路
                        }
                        if (!flag)
                            continue;
                        //写入错误中
                    }
                }
                if (!flag)
                {
                    psp.Type = "transformerthirdzu";
                    psp.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                    psp.Lable = "三绕组变压器";
                    IList list4 = Services.BaseService.GetList("SelectPSPDEVBySvgUIDandLableandType", psp);
                    for (int j = 0; j < list4.Count; j++)
                    {
                        string dlr = null;
                        psp = list4[j] as PSPDEV;
                        PSPDEV devINode = new PSPDEV();
                        devINode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devINode.Name = psp.HuganLine1;
                        devINode.Type = "Use";
                        devINode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devINode);
                        PSPDEV devJNode = new PSPDEV();
                        devJNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devJNode.Name = psp.HuganLine2;
                        devJNode.Type = "Use";
                        devJNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devJNode);
                        PSPDEV devKNode = new PSPDEV();
                        devKNode.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        devKNode.Name = psp.KName;
                        devKNode.Type = "Use";
                        devKNode = (PSPDEV)Services.BaseService.GetObject("SelectPSPDEVByName", devKNode);

                        if (pspDev.Number == devINode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                        {

                            flag = true;
                            dlr = "0" + " " + devINode.Number + " " + devJNode.Number + " " + psp.Number + " " + "0" + " " + "0";

                        }
                        if (pspDev.Number == devJNode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                        {
                            flag = true;
                            dlr = "0" + " " + devINode.Number + " " + devJNode.Number + " " + psp.Number + " " + "1" + " " + "0";
                        }
                        if (pspDev.Number == devKNode.Number && psp.HuganLine3 == "合" && psp.HuganLine4 == "合" && psp.KSwitchStatus == "合")
                        {
                            flag = true;
                            dlr = "0" + " " + devINode.Number + " " + devKNode.Number + " " + psp.Number + " " + "1" + " " + "0";
                        }

                        if (flag)
                        {
                            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\fault.txt"), FileMode.OpenOrCreate);
                            StreamWriter str11 = new StreamWriter(VK);
                            str11.Write(dlr);
                            str11.Close();
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                            {
                                File.Delete(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt");
                            }
                            shortcir shortCutCal = new shortcir();
                            shortCutCal.Show_shortcir(0,0);
                            //bool matrixflag=true;                //用来判断是否导纳矩阵的逆矩阵是否存在逆矩阵
                            string matrixstr = null;
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Zmatrixcheck.txt"))
                            {
                                matrixstr = "正序导纳矩阵";
                                // matrixflag = false;
                            }

                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Fmatrixcheck.txt"))
                            {
                                // matrixflag = false;
                                matrixstr += "负序导纳矩阵";
                            }

                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\Lmatrixcheck.txt"))
                            {
                                //matrixflag = false;
                                matrixstr += "零序导纳矩阵";
                            }
                            if (matrixstr != null)
                            {
                                MessageBox.Show(matrixstr + "不存在逆矩阵，请调整参数后再进行计算！", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt"))
                            {
                            }
                            else
                            {
                                return;
                            }

                            FileStream shorcuit = new FileStream(System.Windows.Forms.Application.StartupPath + "\\ShortcuitI.txt", FileMode.Open);
                            StreamReader readLineGU = new StreamReader(shorcuit, System.Text.Encoding.Default);
                            string strLineGU;
                            string[] arrayGU;
                            char[] charSplitGU = new char[] { ' ' };

                            while ((strLineGU = readLineGU.ReadLine()) != null)
                            {

                                while ((strLineGU = readLineGU.ReadLine()) != null)
                                {
                                    arrayGU = strLineGU.Split(charSplitGU);
                                    string[] shorti = new string[4];
                                    shorti.Initialize();
                                    int m = 0;
                                    foreach (string str in arrayGU)
                                    {

                                        if (str != "")
                                        {

                                            shorti[m++] = str.ToString();

                                        }
                                    }

                                    nodeshorti[pspDev.Number] = Convert.ToDouble(shorti[3]) * 100 / (Math.Sqrt(3) * pspDev.ReferenceVolt);
                                }
                            }
                            readLineGU.Close();
                            break;                 //跳出本循环 进行母线的另外一个母线短路
                        }
                        if (!flag)
                            continue;
                        //写入错误中
                    }
                }
            }
            //找出短路电流最大的值
            //maxshorti.Key = 1;
            //maxshorti.Value = nodeshorti[1];
            foreach (KeyValuePair<int,double> keyvalue in nodeshorti)
            {
                if (keyvalue.Value>maxshorti.Value)
                {
                    maxshorti = keyvalue;
                }
            }

             //首先取出断路器 判断它的母线在不在 如果不在就将其删除 然后与额定电压进行比较 
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Type = "Duanluqi";
            IList list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
            for (int i = 0; i < list.Count; i++)
            {
                bool flag = false;
                pspDev = list[i] as PSPDEV;
                for (int j = 0; j < list1.Count; j++)
                {
                    psp = list1[j] as PSPDEV;
                    if (pspDev.EleID == psp.SUID)
                        flag = true;

                }
                if (!flag)
                {
                    Services.BaseService.Delete<PSPDEV>(pspDev);
                }
            }
            pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
            pspDev.Type = "Duanluqi";
            list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
　　　　　　for(int i=0;i<list.Count;i++)
            {
                pspDev = list[i] as PSPDEV;
                pspDev.HuganLine3="";
                pspDev.KName="";
                if (pspDev.KSwitchStatus=="合")
                {
                    pspDev.OutP = maxshorti.Value;
                    if (maxshorti.Value > pspDev.HuganTQ1)
                    {
                        pspDev.HuganLine3 = "不合格";
                    }
                    else
                    {
                        pspDev.HuganLine3 = "合格";
                    }
                    pspDev.HuganLine4 = "";
                    if (pspDev.HuganLine3 == "合格")
                    {
                        pspDev.KName = "合格";
                    }
                    else
                        pspDev.KName = "不合格";
                }
                
                Services.BaseService.Update<PSPDEV>(pspDev);
            }
            switch (caozuoi)
            {
                case 1:           //全部短路检验
                    {
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Type = "Duanluqi";
                        DlqiCheckform dlqicheckform = new DlqiCheckform(pspDev);
                        dlqicheckform.getusercltr.gridView.GroupPanelText = "断路器开断能力评估初步结果表";
                        dlqicheckform.ShowDialog();
                        break;
                    }
                case 2:             //最大短路检验        
                    {
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Type = "Duanluqi";
                        list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
                        for (int i = 0; i < list.Count; i++)
                        {
                            pspDev = list[i] as PSPDEV;
                           if (pspDev.KSwitchStatus=="合")
                           {
                               psp.SUID = pspDev.EleID;
                               IList list4 = Services.BaseService.GetList("SelectPSPDEVByKey", psp);
                               psp = list4[0] as PSPDEV;
                               try
                               {
                                   pspDev.OutQ = nodeshorti[psp.Number];
                                   if (pspDev.HuganLine3 == "不合格")
                                   {
                                       if (pspDev.OutQ <= pspDev.HuganTQ1)
                                       {
                                           pspDev.HuganLine3 = "合格";
                                       }
                                   }
                                   pspDev.HuganLine4 = "";

                                   if (pspDev.HuganLine3 == "合格")
                                   {
                                       pspDev.KName = "合格";
                                   }
                                   else
                                       pspDev.KName = "不合格";
                                   Services.BaseService.Update<PSPDEV>(pspDev);
                               }
                               catch (System.Exception ex)
                               {
                                   MessageBox.Show("短路数据不完整");
                               }
                           }
                            
                           
                        }
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Type = "Duanluqi";
                        DlqiCheckform dlqicheckform = new DlqiCheckform(pspDev);
                        dlqicheckform.getusercltr.gridView.GroupPanelText = "最大短路校核结果表";
                        dlqicheckform.ShowDialog();
                        break;
                    }
                case 3:          //断路器直流检验
                    {
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Type = "Duanluqi";
                        list = Services.BaseService.GetList("SelectPSPDEVBySvgUIDAndType", pspDev);
                        for (int i = 0; i < list.Count; i++)
                        {
                            pspDev = list[i] as PSPDEV;
                            if (pspDev.KSwitchStatus=="合")
                            {
                                double tx = 0.0;
                                if (pspDev.HuganLine2 == "自脱扣断路器")
                                {
                                    tx = 0.0;
                                }
                                else if (pspDev.HuganLine2 == "辅助动力脱扣的断路器")
                                {
                                    tx = 10;
                                }
                                pspDev.HuganTQ4 = (pspDev.OutP / pspDev.HuganTQ1) * Math.Exp((-pspDev.HuganTQ2 - tx) / 45) * 100;
                                pspDev.HuganTQ5 = (pspDev.OutQ / pspDev.HuganTQ1) * Math.Exp((-pspDev.HuganTQ2 - tx) / 45) * 100;
                                if (pspDev.HuganTQ3 >= pspDev.HuganTQ4)
                                {
                                    pspDev.HuganLine4 = "合格";
                                }
                                if (pspDev.HuganTQ3 >= pspDev.HuganTQ5)
                                {
                                    pspDev.HuganLine4 = "合格";
                                }
                                else if (pspDev.HuganTQ3 < pspDev.HuganTQ5)
                                {
                                    pspDev.HuganLine4 = "不合格";
                                }
                                if (pspDev.HuganLine3 == "合格" && pspDev.HuganLine4 == "合格")
                                {
                                    pspDev.KName = "合格";
                                }
                                else
                                {
                                    pspDev.KName = "不合格";
                                }

                                Services.BaseService.Update<PSPDEV>(pspDev);
                            }
                           
                        }
                        pspDev.SvgUID = tlVectorControl1.SVGDocument.SvgdataUid;
                        pspDev.Type = "Duanluqi";
                        DlqiCheckform dlqicheckform = new DlqiCheckform(pspDev);
                        dlqicheckform.getusercltr.gridView.GroupPanelText = "断路器开端能力最终评估表";
                        dlqicheckform.ShowDialog();
                        break;
                    }
            
            }
           
        }
        private void FirstStart()
        {
            string strData = (1+" "+1+" "+0+" "+0+" "+234+" "+76.912+" "+230+" "+360+";" + "\r\n");
            strData += (2 + " " + 0 + " " + 0 + " " + 0 + " " + 0 + " " + 0 + " " + 230 + " " + 360 + ";" + "\r\n");
            strData += (1 + " " + 1 + " " + 2 + " " + 0.432 + " " + 2.464 + " " + 141.6 + " " + 1400 + " " + -1 + ";" + "\r\n");
            strData += (230 + " " + 100 + " " + -2 + " " + -2 + " " + -2 + " " + -2 + " " + -2 + " " + -2 + ";" + "\r\n");
            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\data.txt"))
            {
                File.Delete(System.Windows.Forms.Application.StartupPath + "\\data.txt");
            }
            //if (File.Exists("c:\\L9.txt"))
            //{
            //    File.Delete("c:\\L9.txt");
            //}
            FileStream VK = new FileStream((System.Windows.Forms.Application.StartupPath + "\\data.txt"), FileMode.OpenOrCreate);
            StreamWriter str1 = new StreamWriter(VK);
            str1.Write(strData);
            str1.Close();
            
            try
            {
                Process ps = Process.Start("ChaoLiu.exe", "0");  
            }
            catch (System.Exception e)
            {
                
            }           
        }
        private void frmTLpsp_Load(object sender, EventArgs e)
        {          
            this.alignButton = this.dotNetBarManager1.GetItem("mAlign") as ButtonItem;
            this.orderButton = this.dotNetBarManager1.GetItem("mOrder") as ButtonItem;
            this.rotateButton = this.dotNetBarManager1.GetItem("mRotate") as ButtonItem;
            
            if (!base.EditRight)
            {
                //dotNetBarManager1.Bars["mainmenu"].Enabled = false;
                dotNetBarManager1.Bars["bar6"].Enabled = false;
                //dotNetBarManager1.Bars["bar2"].Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mNew").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mSave").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mjxt").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem5").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem6").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem7").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("ButtonItem9").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("mConvert").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Dlqibutt").Enabled = false;
                dotNetBarManager1.Bars["mainmenu"].GetItem("Idle").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mSelect").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mShapeTransform").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mFreeTransform").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("powerFactor").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mPolyline").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mConnectLine").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("mText").Enabled = false;
                dotNetBarManager1.Bars["bar2"].GetItem("duanlu").Enabled = false;
                //barLeftDockSite.Enabled = false;
                barLeftDockSite.Enabled = false;
            }            

        }
    }
    public class lineclass
    {
        public int row;                  //记录第几行条线路断开时出现不合格的
        public int linenum;               //记录那个不合格的
        public lineclass(int _row,int _linenum)
        {
            row = _row;
            linenum = _linenum;
        }
    }
}